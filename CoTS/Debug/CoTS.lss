
CoTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003346  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00003346  000033ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002958  00000000  00000000  00003448  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000efd  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b496  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bd24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <main>
      7a:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 ea       	ldi	r26, 0xA7	; 167
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 86 19 	jmp	0x330c	; 0x330c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 ea       	ldi	r24, 0xA7	; 167
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 86 19 	jmp	0x330c	; 0x330c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 ea       	ldi	r22, 0xA7	; 167
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 96 19 	jmp	0x332c	; 0x332c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidSetupPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetupPinDirection (u8 copy_u8PortID,u8 copy_u8PinID,u8 copy_u8Directoin){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Directoin > 2){
		// Do nothing
	}

	switch (copy_u8Directoin){
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	39 87       	std	Y+9, r19	; 0x09
     cb0:	28 87       	std	Y+8, r18	; 0x08
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <DIO_voidSetupPinDirection+0x2e>
     cba:	75 c0       	rjmp	.+234    	; 0xda6 <DIO_voidSetupPinDirection+0x118>
     cbc:	28 85       	ldd	r18, Y+8	; 0x08
     cbe:	39 85       	ldd	r19, Y+9	; 0x09
     cc0:	21 30       	cpi	r18, 0x01	; 1
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <DIO_voidSetupPinDirection+0x3a>
     cc6:	e2 c0       	rjmp	.+452    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
	case DIO_OUTPUT :
		switch(copy_u8PortID)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	49 f1       	breq	.+82     	; 0xd2e <DIO_voidSetupPinDirection+0xa0>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_voidSetupPinDirection+0x62>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	61 f0       	breq	.+24     	; 0xd06 <DIO_voidSetupPinDirection+0x78>
     cee:	ce c0       	rjmp	.+412    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
     cf0:	2e 81       	ldd	r18, Y+6	; 0x06
     cf2:	3f 81       	ldd	r19, Y+7	; 0x07
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	71 f1       	breq	.+92     	; 0xd56 <DIO_voidSetupPinDirection+0xc8>
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	e9 f1       	breq	.+122    	; 0xd7e <DIO_voidSetupPinDirection+0xf0>
     d04:	c3 c0       	rjmp	.+390    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(DDRA_REG,copy_u8PinID);
     d06:	aa e3       	ldi	r26, 0x3A	; 58
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e3       	ldi	r30, 0x3A	; 58
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_voidSetupPinDirection+0x96>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_voidSetupPinDirection+0x92>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	af c0       	rjmp	.+350    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTB :
			SET_BIT(DDRB_REG,copy_u8PinID);
     d2e:	a7 e3       	ldi	r26, 0x37	; 55
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e3       	ldi	r30, 0x37	; 55
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_voidSetupPinDirection+0xbe>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_voidSetupPinDirection+0xba>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	9b c0       	rjmp	.+310    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(DDRC_REG,copy_u8PinID);
     d56:	a4 e3       	ldi	r26, 0x34	; 52
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e4 e3       	ldi	r30, 0x34	; 52
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_voidSetupPinDirection+0xe6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_voidSetupPinDirection+0xe2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	87 c0       	rjmp	.+270    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTD :
			SET_BIT(DDRD_REG,copy_u8PinID);
     d7e:	a1 e3       	ldi	r26, 0x31	; 49
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e3       	ldi	r30, 0x31	; 49
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_voidSetupPinDirection+0x10e>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_voidSetupPinDirection+0x10a>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	73 c0       	rjmp	.+230    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
		}
		break;


		case DIO_INPUT :
			switch(copy_u8PortID){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	59 f1       	breq	.+86     	; 0xe10 <DIO_voidSetupPinDirection+0x182>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_voidSetupPinDirection+0x140>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f0       	breq	.+26     	; 0xde6 <DIO_voidSetupPinDirection+0x158>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <DIO_voidSetupPinDirection+0x1ac>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <DIO_voidSetupPinDirection+0x156>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <DIO_voidSetupPinDirection+0x1d6>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			case DIO_PORTA :
				CLR_BIT(DDRA_REG,copy_u8PinID);
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_voidSetupPinDirection+0x176>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_voidSetupPinDirection+0x172>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	3e c0       	rjmp	.+124    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTB :
				CLR_BIT(DDRB_REG,copy_u8PinID);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_voidSetupPinDirection+0x1a0>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_voidSetupPinDirection+0x19c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(DDRC_REG,copy_u8PinID);
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_voidSetupPinDirection+0x1ca>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_voidSetupPinDirection+0x1c6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTD :
				CLR_BIT(DDRD_REG,copy_u8PinID);
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidSetupPinDirection+0x1f4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidSetupPinDirection+0x1f0>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
				break;
			}
			break;
	}
}
     e8c:	29 96       	adiw	r28, 0x09	; 9
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	6a 83       	std	Y+2, r22	; 0x02
     eb6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Value)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <DIO_voidSetPinValue+0x2e>
     eca:	75 c0       	rjmp	.+234    	; 0xfb6 <DIO_voidSetPinValue+0x118>
     ecc:	28 85       	ldd	r18, Y+8	; 0x08
     ece:	39 85       	ldd	r19, Y+9	; 0x09
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <DIO_voidSetPinValue+0x3a>
     ed6:	e2 c0       	rjmp	.+452    	; 0x109c <DIO_voidSetPinValue+0x1fe>
	{
	case DIO_HIGH :
		switch(Copy_u8PortID)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	49 f1       	breq	.+82     	; 0xf3e <DIO_voidSetPinValue+0xa0>
     eec:	2e 81       	ldd	r18, Y+6	; 0x06
     eee:	3f 81       	ldd	r19, Y+7	; 0x07
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <DIO_voidSetPinValue+0x62>
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	61 f0       	breq	.+24     	; 0xf16 <DIO_voidSetPinValue+0x78>
     efe:	ce c0       	rjmp	.+412    	; 0x109c <DIO_voidSetPinValue+0x1fe>
     f00:	2e 81       	ldd	r18, Y+6	; 0x06
     f02:	3f 81       	ldd	r19, Y+7	; 0x07
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	71 f1       	breq	.+92     	; 0xf66 <DIO_voidSetPinValue+0xc8>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	e9 f1       	breq	.+122    	; 0xf8e <DIO_voidSetPinValue+0xf0>
     f14:	c3 c0       	rjmp	.+390    	; 0x109c <DIO_voidSetPinValue+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(PORTA_REG , Copy_u8PinID);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinValue+0x96>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinValue+0x92>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	af c0       	rjmp	.+350    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTB :
			SET_BIT(PORTB_REG , Copy_u8PinID);
     f3e:	a8 e3       	ldi	r26, 0x38	; 56
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e8 e3       	ldi	r30, 0x38	; 56
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_voidSetPinValue+0xbe>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_voidSetPinValue+0xba>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	9b c0       	rjmp	.+310    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(PORTC_REG , Copy_u8PinID);
     f66:	a5 e3       	ldi	r26, 0x35	; 53
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e5 e3       	ldi	r30, 0x35	; 53
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_voidSetPinValue+0xe6>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_voidSetPinValue+0xe2>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	87 c0       	rjmp	.+270    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTD :
			SET_BIT(PORTD_REG , Copy_u8PinID);
     f8e:	a2 e3       	ldi	r26, 0x32	; 50
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_voidSetPinValue+0x10e>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_voidSetPinValue+0x10a>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	73 c0       	rjmp	.+230    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break;
		}
		break;
		case DIO_LOW :
			switch(Copy_u8PortID)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <DIO_voidSetPinValue+0x182>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <DIO_voidSetPinValue+0x140>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_voidSetPinValue+0x158>
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <DIO_voidSetPinValue+0x1fe>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_voidSetPinValue+0x1ac>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_voidSetPinValue+0x156>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <DIO_voidSetPinValue+0x1d6>
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA :
				CLR_BIT(PORTA_REG , Copy_u8PinID);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x176>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x172>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3e c0       	rjmp	.+124    	; 0x109c <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTB :
				CLR_BIT(PORTB_REG , Copy_u8PinID);
    1020:	a8 e3       	ldi	r26, 0x38	; 56
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e3       	ldi	r30, 0x38	; 56
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_voidSetPinValue+0x1a0>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_voidSetPinValue+0x19c>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	29 c0       	rjmp	.+82     	; 0x109c <DIO_voidSetPinValue+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(PORTC_REG , Copy_u8PinID);
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidSetPinValue+0x1ca>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidSetPinValue+0x1c6>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	14 c0       	rjmp	.+40     	; 0x109c <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTD :
				CLR_BIT(PORTD_REG , Copy_u8PinID);
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_voidSetPinValue+0x1f4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_voidSetPinValue+0x1f0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
			}
			break ;
	}


}
    109c:	29 96       	adiw	r28, 0x09	; 9
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_u8GetPinValue+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_u8GetPinValue+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue = 255; // check error state
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	3d 83       	std	Y+5, r19	; 0x05
    10cc:	2c 83       	std	Y+4, r18	; 0x04
    10ce:	4c 81       	ldd	r20, Y+4	; 0x04
    10d0:	5d 81       	ldd	r21, Y+5	; 0x05
    10d2:	41 30       	cpi	r20, 0x01	; 1
    10d4:	51 05       	cpc	r21, r1
    10d6:	69 f1       	breq	.+90     	; 0x1132 <DIO_u8GetPinValue+0x84>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	91 05       	cpc	r25, r1
    10e0:	34 f4       	brge	.+12     	; 0x10ee <DIO_u8GetPinValue+0x40>
    10e2:	2c 81       	ldd	r18, Y+4	; 0x04
    10e4:	3d 81       	ldd	r19, Y+5	; 0x05
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	69 f0       	breq	.+26     	; 0x1106 <DIO_u8GetPinValue+0x58>
    10ec:	63 c0       	rjmp	.+198    	; 0x11b4 <DIO_u8GetPinValue+0x106>
    10ee:	4c 81       	ldd	r20, Y+4	; 0x04
    10f0:	5d 81       	ldd	r21, Y+5	; 0x05
    10f2:	42 30       	cpi	r20, 0x02	; 2
    10f4:	51 05       	cpc	r21, r1
    10f6:	99 f1       	breq	.+102    	; 0x115e <DIO_u8GetPinValue+0xb0>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <DIO_u8GetPinValue+0x56>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <DIO_u8GetPinValue+0xdc>
    1104:	57 c0       	rjmp	.+174    	; 0x11b4 <DIO_u8GetPinValue+0x106>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = GET_BIT(PINA_REG, Copy_u8PinID);
    1106:	a9 e3       	ldi	r26, 0x39	; 57
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e9 e3       	ldi	r30, 0x39	; 57
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_u8GetPinValue+0x74>
    111e:	55 95       	asr	r21
    1120:	47 95       	ror	r20
    1122:	8a 95       	dec	r24
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_u8GetPinValue+0x70>
    1126:	ca 01       	movw	r24, r20
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	8c 93       	st	X, r24
    112c:	8c 91       	ld	r24, X
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	41 c0       	rjmp	.+130    	; 0x11b4 <DIO_u8GetPinValue+0x106>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = GET_BIT(PINB_REG, Copy_u8PinID);
    1132:	a6 e3       	ldi	r26, 0x36	; 54
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e6 e3       	ldi	r30, 0x36	; 54
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a9 01       	movw	r20, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_u8GetPinValue+0xa0>
    114a:	55 95       	asr	r21
    114c:	47 95       	ror	r20
    114e:	8a 95       	dec	r24
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_u8GetPinValue+0x9c>
    1152:	ca 01       	movw	r24, r20
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	8c 93       	st	X, r24
    1158:	8c 91       	ld	r24, X
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	2b c0       	rjmp	.+86     	; 0x11b4 <DIO_u8GetPinValue+0x106>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = GET_BIT(PINC_REG, Copy_u8PinID);
    115e:	a3 e3       	ldi	r26, 0x33	; 51
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e3 e3       	ldi	r30, 0x33	; 51
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_u8GetPinValue+0xcc>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_u8GetPinValue+0xc8>
    117e:	ca 01       	movw	r24, r20
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	8c 93       	st	X, r24
    1184:	8c 91       	ld	r24, X
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	15 c0       	rjmp	.+42     	; 0x11b4 <DIO_u8GetPinValue+0x106>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = GET_BIT(PIND_REG, Copy_u8PinID);
    118a:	a0 e3       	ldi	r26, 0x30	; 48
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e0 e3       	ldi	r30, 0x30	; 48
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8GetPinValue+0xf8>
    11a2:	55 95       	asr	r21
    11a4:	47 95       	ror	r20
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8GetPinValue+0xf4>
    11aa:	ca 01       	movw	r24, r20
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	8c 93       	st	X, r24
    11b0:	8c 91       	ld	r24, X
    11b2:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01


}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection    (u8 Copy_u8PortID , u8 Copy_u8Direction ){
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	28 97       	sbiw	r28, 0x08	; 8
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Direction)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	38 87       	std	Y+8, r19	; 0x08
    11e6:	2f 83       	std	Y+7, r18	; 0x07
    11e8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ea:	98 85       	ldd	r25, Y+8	; 0x08
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	c9 f1       	breq	.+114    	; 0x1262 <DIO_voidSetPortDirection+0x9c>
    11f0:	2f 81       	ldd	r18, Y+7	; 0x07
    11f2:	38 85       	ldd	r19, Y+8	; 0x08
    11f4:	21 30       	cpi	r18, 0x01	; 1
    11f6:	31 05       	cpc	r19, r1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <DIO_voidSetPortDirection+0x36>
    11fa:	61 c0       	rjmp	.+194    	; 0x12be <DIO_voidSetPortDirection+0xf8>
	{
	case DIO_OUTPUT :
		switch(Copy_u8PortID)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3e 83       	std	Y+6, r19	; 0x06
    1204:	2d 83       	std	Y+5, r18	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	d1 f0       	breq	.+52     	; 0x1244 <DIO_voidSetPortDirection+0x7e>
    1210:	2d 81       	ldd	r18, Y+5	; 0x05
    1212:	3e 81       	ldd	r19, Y+6	; 0x06
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <DIO_voidSetPortDirection+0x5e>
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	61 f0       	breq	.+24     	; 0x123a <DIO_voidSetPortDirection+0x74>
    1222:	4d c0       	rjmp	.+154    	; 0x12be <DIO_voidSetPortDirection+0xf8>
    1224:	2d 81       	ldd	r18, Y+5	; 0x05
    1226:	3e 81       	ldd	r19, Y+6	; 0x06
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	81 f0       	breq	.+32     	; 0x124e <DIO_voidSetPortDirection+0x88>
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <DIO_voidSetPortDirection+0x92>
    1238:	42 c0       	rjmp	.+132    	; 0x12be <DIO_voidSetPortDirection+0xf8>
		{
		case DIO_PORTA :
			DDRA_REG = 0xff ; // 255 0b11111111
    123a:	ea e3       	ldi	r30, 0x3A	; 58
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	80 83       	st	Z, r24
    1242:	3d c0       	rjmp	.+122    	; 0x12be <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTB :
			DDRB_REG = 0xff;
    1244:	e7 e3       	ldi	r30, 0x37	; 55
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	80 83       	st	Z, r24
    124c:	38 c0       	rjmp	.+112    	; 0x12be <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTC :
			DDRC_REG = 0xff;
    124e:	e4 e3       	ldi	r30, 0x34	; 52
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	80 83       	st	Z, r24
    1256:	33 c0       	rjmp	.+102    	; 0x12be <DIO_voidSetPortDirection+0xf8>

			break;
		case DIO_PORTD :
			DDRD_REG = 0xff;
    1258:	e1 e3       	ldi	r30, 0x31	; 49
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	80 83       	st	Z, r24
    1260:	2e c0       	rjmp	.+92     	; 0x12be <DIO_voidSetPortDirection+0xf8>
		default:
			break;
		}
		break ;
		case DIO_INPUT :
			switch(Copy_u8PortID)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	c9 f0       	breq	.+50     	; 0x12a8 <DIO_voidSetPortDirection+0xe2>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <DIO_voidSetPortDirection+0xc4>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <DIO_voidSetPortDirection+0xda>
    1288:	1a c0       	rjmp	.+52     	; 0x12be <DIO_voidSetPortDirection+0xf8>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	71 f0       	breq	.+28     	; 0x12b0 <DIO_voidSetPortDirection+0xea>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	69 f0       	breq	.+26     	; 0x12b8 <DIO_voidSetPortDirection+0xf2>
    129e:	0f c0       	rjmp	.+30     	; 0x12be <DIO_voidSetPortDirection+0xf8>
			{
			case DIO_PORTA :
				DDRA_REG = 0x00 ; // 255 0b11111111
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	10 82       	st	Z, r1
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTB :
				DDRB_REG = 0;
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	10 82       	st	Z, r1
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTC :
				DDRC_REG = 0x00;
    12b0:	e4 e3       	ldi	r30, 0x34	; 52
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	10 82       	st	Z, r1
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <DIO_voidSetPortDirection+0xf8>

				break;
			case DIO_PORTD :
				DDRD_REG = 0x00;
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	10 82       	st	Z, r1
			}
			break;
	}


}
    12be:	28 96       	adiw	r28, 0x08	; 8
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue    (u8 Copy_u8PortID , u8 Copy_u8Value )
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_voidSetPortValue+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_voidSetPortValue+0x8>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	3c 83       	std	Y+4, r19	; 0x04
    12e8:	2b 83       	std	Y+3, r18	; 0x03
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 05       	cpc	r25, r1
    12f2:	d1 f0       	breq	.+52     	; 0x1328 <DIO_voidSetPortValue+0x58>
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	2c f4       	brge	.+10     	; 0x1308 <DIO_voidSetPortValue+0x38>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	61 f0       	breq	.+24     	; 0x131e <DIO_voidSetPortValue+0x4e>
    1306:	1e c0       	rjmp	.+60     	; 0x1344 <DIO_voidSetPortValue+0x74>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	81 f0       	breq	.+32     	; 0x1332 <DIO_voidSetPortValue+0x62>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	81 f0       	breq	.+32     	; 0x133c <DIO_voidSetPortValue+0x6c>
    131c:	13 c0       	rjmp	.+38     	; 0x1344 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA :
		PORTA_REG = Copy_u8Value ;
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB :
		PORTB_REG = Copy_u8Value ;
    1328:	e8 e3       	ldi	r30, 0x38	; 56
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC :
		PORTC_REG = Copy_u8Value ;
    1332:	e5 e3       	ldi	r30, 0x35	; 53
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <DIO_voidSetPortValue+0x74>

		break;
	case DIO_PORTD :
		PORTD_REG = Copy_u8Value ;
    133c:	e2 e3       	ldi	r30, 0x32	; 50
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
		break;
	default:
		break;
	}

}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8PortID){
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_u8GetPortValue+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <DIO_u8GetPortValue+0x8>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnedValue = 255; // check error state
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3c 83       	std	Y+4, r19	; 0x04
    136c:	2b 83       	std	Y+3, r18	; 0x03
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	91 05       	cpc	r25, r1
    1376:	d1 f0       	breq	.+52     	; 0x13ac <DIO_u8GetPortValue+0x5a>
    1378:	2b 81       	ldd	r18, Y+3	; 0x03
    137a:	3c 81       	ldd	r19, Y+4	; 0x04
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	2c f4       	brge	.+10     	; 0x138c <DIO_u8GetPortValue+0x3a>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	61 f0       	breq	.+24     	; 0x13a2 <DIO_u8GetPortValue+0x50>
    138a:	1e c0       	rjmp	.+60     	; 0x13c8 <DIO_u8GetPortValue+0x76>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	81 f0       	breq	.+32     	; 0x13b6 <DIO_u8GetPortValue+0x64>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	81 f0       	breq	.+32     	; 0x13c0 <DIO_u8GetPortValue+0x6e>
    13a0:	13 c0       	rjmp	.+38     	; 0x13c8 <DIO_u8GetPortValue+0x76>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = PINA_REG;
    13a2:	e9 e3       	ldi	r30, 0x39	; 57
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = PINB_REG;
    13ac:	e6 e3       	ldi	r30, 0x36	; 54
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = PINC_REG;
    13b6:	e3 e3       	ldi	r30, 0x33	; 51
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = PIND_REG;
    13c0:	e0 e3       	ldi	r30, 0x30	; 48
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01


}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <SSD_voidInit>:

#include "SSD_interface.h"



void SSD_voidInit(SSD_t * SSDPtr){
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <SSD_voidInit+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <SSD_voidInit+0x8>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPortDirection(SSDPtr->Port, DIO_OUTPUT);
    13e8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ea:	fa 81       	ldd	r31, Y+2	; 0x02
    13ec:	80 81       	ld	r24, Z
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPortDirection>
	switch (SSDPtr->CommonState ){
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	81 81       	ldd	r24, Z+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3c 83       	std	Y+4, r19	; 0x04
    1400:	2b 83       	std	Y+3, r18	; 0x03
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	31 f0       	breq	.+12     	; 0x1416 <SSD_voidInit+0x3e>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	21 30       	cpi	r18, 0x01	; 1
    1410:	31 05       	cpc	r19, r1
    1412:	41 f0       	breq	.+16     	; 0x1424 <SSD_voidInit+0x4c>
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <SSD_voidInit+0x58>

	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0xff);
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	80 81       	ld	r24, Z
    141c:	6f ef       	ldi	r22, 0xFF	; 255
    141e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <SSD_voidInit+0x58>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0x00);
    1424:	e9 81       	ldd	r30, Y+1	; 0x01
    1426:	fa 81       	ldd	r31, Y+2	; 0x02
    1428:	80 81       	ld	r24, Z
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
		break;
	}

}
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <SSD_voidEnable>:

void SSD_voidEnable(SSD_t * SSDPtr, u8 Copy_u8Number){
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <SSD_voidEnable+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <SSD_voidEnable+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6b 83       	std	Y+3, r22	; 0x03
	switch(SSDPtr -> CommonState){
    1452:	e9 81       	ldd	r30, Y+1	; 0x01
    1454:	fa 81       	ldd	r31, Y+2	; 0x02
    1456:	81 81       	ldd	r24, Z+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3d 83       	std	Y+5, r19	; 0x05
    145e:	2c 83       	std	Y+4, r18	; 0x04
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	31 f0       	breq	.+12     	; 0x1474 <SSD_voidEnable+0x36>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	21 30       	cpi	r18, 0x01	; 1
    146e:	31 05       	cpc	r19, r1
    1470:	81 f0       	breq	.+32     	; 0x1492 <SSD_voidEnable+0x54>
    1472:	1f c0       	rjmp	.+62     	; 0x14b2 <SSD_voidEnable+0x74>
	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr->Port, array[Copy_u8Number]);
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	20 81       	ld	r18, Z
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	fc 01       	movw	r30, r24
    1482:	e9 52       	subi	r30, 0x29	; 41
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	90 81       	ld	r25, Z
    1488:	82 2f       	mov	r24, r18
    148a:	69 2f       	mov	r22, r25
    148c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
    1490:	10 c0       	rjmp	.+32     	; 0x14b2 <SSD_voidEnable+0x74>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr->Port, ~array[Copy_u8Number]);
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	20 81       	ld	r18, Z
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	fc 01       	movw	r30, r24
    14a0:	e9 52       	subi	r30, 0x29	; 41
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	98 2f       	mov	r25, r24
    14a8:	90 95       	com	r25
    14aa:	82 2f       	mov	r24, r18
    14ac:	69 2f       	mov	r22, r25
    14ae:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
		break;
	}

}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <SSD_voidDisable>:



void SSD_voidDisable(SSD_t * SSDPtr){
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <SSD_voidDisable+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <SSD_voidDisable+0x8>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01

	switch (SSDPtr->CommonState ){
    14d2:	e9 81       	ldd	r30, Y+1	; 0x01
    14d4:	fa 81       	ldd	r31, Y+2	; 0x02
    14d6:	81 81       	ldd	r24, Z+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3c 83       	std	Y+4, r19	; 0x04
    14de:	2b 83       	std	Y+3, r18	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	31 f0       	breq	.+12     	; 0x14f4 <SSD_voidDisable+0x32>
    14e8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ea:	3c 81       	ldd	r19, Y+4	; 0x04
    14ec:	21 30       	cpi	r18, 0x01	; 1
    14ee:	31 05       	cpc	r19, r1
    14f0:	41 f0       	breq	.+16     	; 0x1502 <SSD_voidDisable+0x40>
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <SSD_voidDisable+0x4c>

	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0xff);
    14f4:	e9 81       	ldd	r30, Y+1	; 0x01
    14f6:	fa 81       	ldd	r31, Y+2	; 0x02
    14f8:	80 81       	ld	r24, Z
    14fa:	6f ef       	ldi	r22, 0xFF	; 255
    14fc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
    1500:	06 c0       	rjmp	.+12     	; 0x150e <SSD_voidDisable+0x4c>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0x00);
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	80 81       	ld	r24, Z
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
		break;
	}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <LED_voidInit>:

#include "..\..\MCAL\DIO\DIO_interface.h"

#include "LED_interface.h"

void LED_voidInit(LED_t * ptrLED){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <LED_voidInit+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <LED_voidInit+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetupPinDirection( ptrLED->Port,ptrLED->Pin,DIO_OUTPUT);
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	80 81       	ld	r24, Z
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	69 2f       	mov	r22, r25
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>

	switch( ptrLED -> ActiveState){
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3c 83       	std	Y+4, r19	; 0x04
    154c:	2b 83       	std	Y+3, r18	; 0x03
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	81 f0       	breq	.+32     	; 0x1576 <LED_voidInit+0x5a>
    1556:	2b 81       	ldd	r18, Y+3	; 0x03
    1558:	3c 81       	ldd	r19, Y+4	; 0x04
    155a:	21 30       	cpi	r18, 0x01	; 1
    155c:	31 05       	cpc	r19, r1
    155e:	a9 f4       	brne	.+42     	; 0x158a <LED_voidInit+0x6e>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED->Port, ptrLED->Pin, DIO_LOW);
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	80 81       	ld	r24, Z
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	69 2f       	mov	r22, r25
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1574:	0a c0       	rjmp	.+20     	; 0x158a <LED_voidInit+0x6e>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED->Port, ptrLED->Pin, DIO_HIGH);
    1576:	e9 81       	ldd	r30, Y+1	; 0x01
    1578:	fa 81       	ldd	r31, Y+2	; 0x02
    157a:	80 81       	ld	r24, Z
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	69 2f       	mov	r22, r25
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;

	}
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <LED_voidON>:
void LED_voidON(LED_t * ptrLED){
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <LED_voidON+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <LED_voidON+0x8>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
	switch( ptrLED -> ActiveState){
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3c 83       	std	Y+4, r19	; 0x04
    15b4:	2b 83       	std	Y+3, r18	; 0x03
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	81 f0       	breq	.+32     	; 0x15de <LED_voidON+0x46>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	21 30       	cpi	r18, 0x01	; 1
    15c4:	31 05       	cpc	r19, r1
    15c6:	a9 f4       	brne	.+42     	; 0x15f2 <LED_voidON+0x5a>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_HIGH);
    15c8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ca:	fa 81       	ldd	r31, Y+2	; 0x02
    15cc:	80 81       	ld	r24, Z
    15ce:	e9 81       	ldd	r30, Y+1	; 0x01
    15d0:	fa 81       	ldd	r31, Y+2	; 0x02
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	69 2f       	mov	r22, r25
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    15dc:	0a c0       	rjmp	.+20     	; 0x15f2 <LED_voidON+0x5a>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_LOW);
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	80 81       	ld	r24, Z
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	91 81       	ldd	r25, Z+1	; 0x01
    15ea:	69 2f       	mov	r22, r25
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;
	}

}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <LED_voidOFF>:
void LED_voidOFF(LED_t * ptrLED){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <LED_voidOFF+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <LED_voidOFF+0x8>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
	switch( ptrLED -> ActiveState){
    1610:	e9 81       	ldd	r30, Y+1	; 0x01
    1612:	fa 81       	ldd	r31, Y+2	; 0x02
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	81 f0       	breq	.+32     	; 0x1646 <LED_voidOFF+0x46>
    1626:	2b 81       	ldd	r18, Y+3	; 0x03
    1628:	3c 81       	ldd	r19, Y+4	; 0x04
    162a:	21 30       	cpi	r18, 0x01	; 1
    162c:	31 05       	cpc	r19, r1
    162e:	a9 f4       	brne	.+42     	; 0x165a <LED_voidOFF+0x5a>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_LOW);
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	80 81       	ld	r24, Z
    1636:	e9 81       	ldd	r30, Y+1	; 0x01
    1638:	fa 81       	ldd	r31, Y+2	; 0x02
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	69 2f       	mov	r22, r25
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1644:	0a c0       	rjmp	.+20     	; 0x165a <LED_voidOFF+0x5a>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_HIGH);
    1646:	e9 81       	ldd	r30, Y+1	; 0x01
    1648:	fa 81       	ldd	r31, Y+2	; 0x02
    164a:	80 81       	ld	r24, Z
    164c:	e9 81       	ldd	r30, Y+1	; 0x01
    164e:	fa 81       	ldd	r31, Y+2	; 0x02
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	69 2f       	mov	r22, r25
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;


	}
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include "CLCD_config.h"

void CLCD_voidInit		(	void	)
{
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	cc 54       	subi	r28, 0x4C	; 76
    1676:	d0 40       	sbci	r29, 0x00	; 0
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
	// Data Port --> OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT , DIO_OUTPUT);
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPortDirection>
	// RS , RW , EN --> OUTPUT
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_OUTPUT);
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	67 e0       	ldi	r22, 0x07	; 7
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_OUTPUT);
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	66 e0       	ldi	r22, 0x06	; 6
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_OUTPUT);
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	65 e0       	ldi	r22, 0x05	; 5
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    16a8:	fe 01       	movw	r30, r28
    16aa:	e7 5b       	subi	r30, 0xB7	; 183
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a8 e4       	ldi	r26, 0x48	; 72
    16b4:	b2 e4       	ldi	r27, 0x42	; 66
    16b6:	80 83       	st	Z, r24
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	a2 83       	std	Z+2, r26	; 0x02
    16bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	8e 01       	movw	r16, r28
    16c0:	0b 5b       	subi	r16, 0xBB	; 187
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	fe 01       	movw	r30, r28
    16c6:	e7 5b       	subi	r30, 0xB7	; 183
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	f8 01       	movw	r30, r16
    16e4:	80 83       	st	Z, r24
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	a2 83       	std	Z+2, r26	; 0x02
    16ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ec:	fe 01       	movw	r30, r28
    16ee:	eb 5b       	subi	r30, 0xBB	; 187
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	5f e3       	ldi	r21, 0x3F	; 63
    1702:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1706:	88 23       	and	r24, r24
    1708:	44 f4       	brge	.+16     	; 0x171a <CLCD_voidInit+0xb2>
		__ticks = 1;
    170a:	fe 01       	movw	r30, r28
    170c:	ed 5b       	subi	r30, 0xBD	; 189
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	64 c0       	rjmp	.+200    	; 0x17e2 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    171a:	fe 01       	movw	r30, r28
    171c:	eb 5b       	subi	r30, 0xBB	; 187
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	3f ef       	ldi	r19, 0xFF	; 255
    172c:	4f e7       	ldi	r20, 0x7F	; 127
    172e:	57 e4       	ldi	r21, 0x47	; 71
    1730:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1734:	18 16       	cp	r1, r24
    1736:	0c f0       	brlt	.+2      	; 0x173a <CLCD_voidInit+0xd2>
    1738:	43 c0       	rjmp	.+134    	; 0x17c0 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	fe 01       	movw	r30, r28
    173c:	e7 5b       	subi	r30, 0xB7	; 183
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	8e 01       	movw	r16, r28
    175a:	0d 5b       	subi	r16, 0xBD	; 189
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	f8 01       	movw	r30, r16
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	1f c0       	rjmp	.+62     	; 0x17b0 <CLCD_voidInit+0x148>
    1772:	fe 01       	movw	r30, r28
    1774:	ef 5b       	subi	r30, 0xBF	; 191
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1780:	fe 01       	movw	r30, r28
    1782:	ef 5b       	subi	r30, 0xBF	; 191
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <CLCD_voidInit+0x122>
    178e:	fe 01       	movw	r30, r28
    1790:	ef 5b       	subi	r30, 0xBF	; 191
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	de 01       	movw	r26, r28
    179a:	ad 5b       	subi	r26, 0xBD	; 189
    179c:	bf 4f       	sbci	r27, 0xFF	; 255
    179e:	fe 01       	movw	r30, r28
    17a0:	ed 5b       	subi	r30, 0xBD	; 189
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	9c 93       	st	X, r25
    17ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	fe 01       	movw	r30, r28
    17b2:	ed 5b       	subi	r30, 0xBD	; 189
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	d1 f6       	brne	.-76     	; 0x1772 <CLCD_voidInit+0x10a>
    17be:	24 c0       	rjmp	.+72     	; 0x1808 <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c0:	8e 01       	movw	r16, r28
    17c2:	0d 5b       	subi	r16, 0xBD	; 189
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	fe 01       	movw	r30, r28
    17c8:	eb 5b       	subi	r30, 0xBB	; 187
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	f8 01       	movw	r30, r16
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	fe 01       	movw	r30, r28
    17e4:	ed 5b       	subi	r30, 0xBD	; 189
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	fe 01       	movw	r30, r28
    17ee:	ff 96       	adiw	r30, 0x3f	; 63
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
    17f4:	fe 01       	movw	r30, r28
    17f6:	ff 96       	adiw	r30, 0x3f	; 63
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <CLCD_voidInit+0x194>
    1800:	fe 01       	movw	r30, r28
    1802:	ff 96       	adiw	r30, 0x3f	; 63
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24

	/* Initialization Sequence */
	_delay_ms(50);
	/*Function Set */
	CLCD_voidSendCommand(CLCD_FUNCTIONSET8bit);
    1808:	88 e3       	ldi	r24, 0x38	; 56
    180a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a8 e4       	ldi	r26, 0x48	; 72
    1814:	b2 e4       	ldi	r27, 0x42	; 66
    1816:	8b af       	std	Y+59, r24	; 0x3b
    1818:	9c af       	std	Y+60, r25	; 0x3c
    181a:	ad af       	std	Y+61, r26	; 0x3d
    181c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    181e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1820:	7c ad       	ldd	r23, Y+60	; 0x3c
    1822:	8d ad       	ldd	r24, Y+61	; 0x3d
    1824:	9e ad       	ldd	r25, Y+62	; 0x3e
    1826:	2b ea       	ldi	r18, 0xAB	; 171
    1828:	3a ea       	ldi	r19, 0xAA	; 170
    182a:	4a e2       	ldi	r20, 0x2A	; 42
    182c:	50 e4       	ldi	r21, 0x40	; 64
    182e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8f ab       	std	Y+55, r24	; 0x37
    1838:	98 af       	std	Y+56, r25	; 0x38
    183a:	a9 af       	std	Y+57, r26	; 0x39
    183c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    183e:	6f a9       	ldd	r22, Y+55	; 0x37
    1840:	78 ad       	ldd	r23, Y+56	; 0x38
    1842:	89 ad       	ldd	r24, Y+57	; 0x39
    1844:	9a ad       	ldd	r25, Y+58	; 0x3a
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	1c f4       	brge	.+6      	; 0x185c <CLCD_voidInit+0x1f4>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	8e ab       	std	Y+54, r24	; 0x36
    185a:	91 c0       	rjmp	.+290    	; 0x197e <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    185c:	6f a9       	ldd	r22, Y+55	; 0x37
    185e:	78 ad       	ldd	r23, Y+56	; 0x38
    1860:	89 ad       	ldd	r24, Y+57	; 0x39
    1862:	9a ad       	ldd	r25, Y+58	; 0x3a
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	53 e4       	ldi	r21, 0x43	; 67
    186c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	0c f0       	brlt	.+2      	; 0x1876 <CLCD_voidInit+0x20e>
    1874:	7b c0       	rjmp	.+246    	; 0x196c <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1876:	6b ad       	ldd	r22, Y+59	; 0x3b
    1878:	7c ad       	ldd	r23, Y+60	; 0x3c
    187a:	8d ad       	ldd	r24, Y+61	; 0x3d
    187c:	9e ad       	ldd	r25, Y+62	; 0x3e
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a e7       	ldi	r20, 0x7A	; 122
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8a ab       	std	Y+50, r24	; 0x32
    1890:	9b ab       	std	Y+51, r25	; 0x33
    1892:	ac ab       	std	Y+52, r26	; 0x34
    1894:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6a a9       	ldd	r22, Y+50	; 0x32
    1898:	7b a9       	ldd	r23, Y+51	; 0x33
    189a:	8c a9       	ldd	r24, Y+52	; 0x34
    189c:	9d a9       	ldd	r25, Y+53	; 0x35
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8e a7       	std	Y+46, r24	; 0x2e
    18b0:	9f a7       	std	Y+47, r25	; 0x2f
    18b2:	a8 ab       	std	Y+48, r26	; 0x30
    18b4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    18b6:	6e a5       	ldd	r22, Y+46	; 0x2e
    18b8:	7f a5       	ldd	r23, Y+47	; 0x2f
    18ba:	88 a9       	ldd	r24, Y+48	; 0x30
    18bc:	99 a9       	ldd	r25, Y+49	; 0x31
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <CLCD_voidInit+0x270>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9d a7       	std	Y+45, r25	; 0x2d
    18d4:	8c a7       	std	Y+44, r24	; 0x2c
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    18d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    18da:	7f a5       	ldd	r23, Y+47	; 0x2f
    18dc:	88 a9       	ldd	r24, Y+48	; 0x30
    18de:	99 a9       	ldd	r25, Y+49	; 0x31
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6a a9       	ldd	r22, Y+50	; 0x32
    18f2:	7b a9       	ldd	r23, Y+51	; 0x33
    18f4:	8c a9       	ldd	r24, Y+52	; 0x34
    18f6:	9d a9       	ldd	r25, Y+53	; 0x35
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9d a7       	std	Y+45, r25	; 0x2d
    1916:	8c a7       	std	Y+44, r24	; 0x2c
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <CLCD_voidInit+0x2d0>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9b a7       	std	Y+43, r25	; 0x2b
    1920:	8a a7       	std	Y+42, r24	; 0x2a
    1922:	8a a5       	ldd	r24, Y+42	; 0x2a
    1924:	9b a5       	ldd	r25, Y+43	; 0x2b
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <CLCD_voidInit+0x2be>
    192a:	9b a7       	std	Y+43, r25	; 0x2b
    192c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1930:	9d a5       	ldd	r25, Y+45	; 0x2d
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9d a7       	std	Y+45, r25	; 0x2d
    1936:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8c a5       	ldd	r24, Y+44	; 0x2c
    193a:	9d a5       	ldd	r25, Y+45	; 0x2d
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <CLCD_voidInit+0x2b2>
    1940:	24 c0       	rjmp	.+72     	; 0x198a <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6e a5       	ldd	r22, Y+46	; 0x2e
    1944:	7f a5       	ldd	r23, Y+47	; 0x2f
    1946:	88 a9       	ldd	r24, Y+48	; 0x30
    1948:	99 a9       	ldd	r25, Y+49	; 0x31
    194a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9d a7       	std	Y+45, r25	; 0x2d
    1954:	8c a7       	std	Y+44, r24	; 0x2c
    1956:	8c a5       	ldd	r24, Y+44	; 0x2c
    1958:	9d a5       	ldd	r25, Y+45	; 0x2d
    195a:	99 a7       	std	Y+41, r25	; 0x29
    195c:	88 a7       	std	Y+40, r24	; 0x28
    195e:	88 a5       	ldd	r24, Y+40	; 0x28
    1960:	99 a5       	ldd	r25, Y+41	; 0x29
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <CLCD_voidInit+0x2fa>
    1966:	99 a7       	std	Y+41, r25	; 0x29
    1968:	88 a7       	std	Y+40, r24	; 0x28
    196a:	0f c0       	rjmp	.+30     	; 0x198a <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    196c:	6f a9       	ldd	r22, Y+55	; 0x37
    196e:	78 ad       	ldd	r23, Y+56	; 0x38
    1970:	89 ad       	ldd	r24, Y+57	; 0x39
    1972:	9a ad       	ldd	r25, Y+58	; 0x3a
    1974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8e ab       	std	Y+54, r24	; 0x36
    197e:	8e a9       	ldd	r24, Y+54	; 0x36
    1980:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1982:	8f a1       	ldd	r24, Y+39	; 0x27
    1984:	8a 95       	dec	r24
    1986:	f1 f7       	brne	.-4      	; 0x1984 <CLCD_voidInit+0x31c>
    1988:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	/*Display ON/OFF*/
	CLCD_voidSendCommand(CLCD_DISPLAYON_OFF);
    198a:	8c e0       	ldi	r24, 0x0C	; 12
    198c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a8 e4       	ldi	r26, 0x48	; 72
    1996:	b2 e4       	ldi	r27, 0x42	; 66
    1998:	8b a3       	std	Y+35, r24	; 0x23
    199a:	9c a3       	std	Y+36, r25	; 0x24
    199c:	ad a3       	std	Y+37, r26	; 0x25
    199e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	2b ea       	ldi	r18, 0xAB	; 171
    19aa:	3a ea       	ldi	r19, 0xAA	; 170
    19ac:	4a e2       	ldi	r20, 0x2A	; 42
    19ae:	50 e4       	ldi	r21, 0x40	; 64
    19b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8f 8f       	std	Y+31, r24	; 0x1f
    19ba:	98 a3       	std	Y+32, r25	; 0x20
    19bc:	a9 a3       	std	Y+33, r26	; 0x21
    19be:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19c2:	78 a1       	ldd	r23, Y+32	; 0x20
    19c4:	89 a1       	ldd	r24, Y+33	; 0x21
    19c6:	9a a1       	ldd	r25, Y+34	; 0x22
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	1c f4       	brge	.+6      	; 0x19de <CLCD_voidInit+0x376>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	8e 8f       	std	Y+30, r24	; 0x1e
    19dc:	91 c0       	rjmp	.+290    	; 0x1b00 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    19de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19e0:	78 a1       	ldd	r23, Y+32	; 0x20
    19e2:	89 a1       	ldd	r24, Y+33	; 0x21
    19e4:	9a a1       	ldd	r25, Y+34	; 0x22
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	53 e4       	ldi	r21, 0x43	; 67
    19ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	0c f0       	brlt	.+2      	; 0x19f8 <CLCD_voidInit+0x390>
    19f6:	7b c0       	rjmp	.+246    	; 0x1aee <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    19f8:	6b a1       	ldd	r22, Y+35	; 0x23
    19fa:	7c a1       	ldd	r23, Y+36	; 0x24
    19fc:	8d a1       	ldd	r24, Y+37	; 0x25
    19fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	54 e4       	ldi	r21, 0x44	; 68
    1a08:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8a 8f       	std	Y+26, r24	; 0x1a
    1a12:	9b 8f       	std	Y+27, r25	; 0x1b
    1a14:	ac 8f       	std	Y+28, r26	; 0x1c
    1a16:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a1a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8e 8b       	std	Y+22, r24	; 0x16
    1a32:	9f 8b       	std	Y+23, r25	; 0x17
    1a34:	a8 8f       	std	Y+24, r26	; 0x18
    1a36:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a38:	6e 89       	ldd	r22, Y+22	; 0x16
    1a3a:	7f 89       	ldd	r23, Y+23	; 0x17
    1a3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a3e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <CLCD_voidInit+0x3f2>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9d 8b       	std	Y+21, r25	; 0x15
    1a56:	8c 8b       	std	Y+20, r24	; 0x14
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    1a5a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a5c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a60:	99 8d       	ldd	r25, Y+25	; 0x19
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a74:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a78:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9d 8b       	std	Y+21, r25	; 0x15
    1a98:	8c 8b       	std	Y+20, r24	; 0x14
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <CLCD_voidInit+0x452>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9b 8b       	std	Y+19, r25	; 0x13
    1aa2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa4:	8a 89       	ldd	r24, Y+18	; 0x12
    1aa6:	9b 89       	ldd	r25, Y+19	; 0x13
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <CLCD_voidInit+0x440>
    1aac:	9b 8b       	std	Y+19, r25	; 0x13
    1aae:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ab2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9d 8b       	std	Y+21, r25	; 0x15
    1ab8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8c 89       	ldd	r24, Y+20	; 0x14
    1abc:	9d 89       	ldd	r25, Y+21	; 0x15
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <CLCD_voidInit+0x434>
    1ac2:	24 c0       	rjmp	.+72     	; 0x1b0c <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6e 89       	ldd	r22, Y+22	; 0x16
    1ac6:	7f 89       	ldd	r23, Y+23	; 0x17
    1ac8:	88 8d       	ldd	r24, Y+24	; 0x18
    1aca:	99 8d       	ldd	r25, Y+25	; 0x19
    1acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9d 8b       	std	Y+21, r25	; 0x15
    1ad6:	8c 8b       	std	Y+20, r24	; 0x14
    1ad8:	8c 89       	ldd	r24, Y+20	; 0x14
    1ada:	9d 89       	ldd	r25, Y+21	; 0x15
    1adc:	99 8b       	std	Y+17, r25	; 0x11
    1ade:	88 8b       	std	Y+16, r24	; 0x10
    1ae0:	88 89       	ldd	r24, Y+16	; 0x10
    1ae2:	99 89       	ldd	r25, Y+17	; 0x11
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <CLCD_voidInit+0x47c>
    1ae8:	99 8b       	std	Y+17, r25	; 0x11
    1aea:	88 8b       	std	Y+16, r24	; 0x10
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1af0:	78 a1       	ldd	r23, Y+32	; 0x20
    1af2:	89 a1       	ldd	r24, Y+33	; 0x21
    1af4:	9a a1       	ldd	r25, Y+34	; 0x22
    1af6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8e 8f       	std	Y+30, r24	; 0x1e
    1b00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b06:	8a 95       	dec	r24
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <CLCD_voidInit+0x49e>
    1b0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	/*Display Clear */
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	b0 e4       	ldi	r27, 0x40	; 64
    1b1a:	8b 87       	std	Y+11, r24	; 0x0b
    1b1c:	9c 87       	std	Y+12, r25	; 0x0c
    1b1e:	ad 87       	std	Y+13, r26	; 0x0d
    1b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4a ef       	ldi	r20, 0xFA	; 250
    1b30:	54 e4       	ldi	r21, 0x44	; 68
    1b32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8f 83       	std	Y+7, r24	; 0x07
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	a9 87       	std	Y+9, r26	; 0x09
    1b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <CLCD_voidInit+0x4fc>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	57 e4       	ldi	r21, 0x47	; 71
    1b74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	4c f5       	brge	.+82     	; 0x1bce <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <CLCD_voidInit+0x55c>
    1ba6:	88 ec       	ldi	r24, 0xC8	; 200
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <CLCD_voidInit+0x54a>
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <CLCD_voidInit+0x53e>
    1bcc:	14 c0       	rjmp	.+40     	; 0x1bf6 <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <CLCD_voidInit+0x586>
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Mode Set */
	CLCD_voidSendCommand(CLCD_ENTRYMODE);
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>

}
    1bfc:	c4 5b       	subi	r28, 0xB4	; 180
    1bfe:	df 4f       	sbci	r29, 0xFF	; 255
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	08 95       	ret

00001c14 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand	(u8 Copy_u8Command	)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	e1 97       	sbiw	r28, 0x31	; 49
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> Low (To Send Command )*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_LOW);
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	67 e0       	ldi	r22, 0x07	; 7
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	/*RW -> Low	(To Write)*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	66 e0       	ldi	r22, 0x06	; 6
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	/*	Send Command */
	DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Command);
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	69 a9       	ldd	r22, Y+49	; 0x31
    1c42:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
	/*Enable Sequence */
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	65 e0       	ldi	r22, 0x05	; 5
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e8       	ldi	r26, 0x80	; 128
    1c56:	bf e3       	ldi	r27, 0x3F	; 63
    1c58:	8d a7       	std	Y+45, r24	; 0x2d
    1c5a:	9e a7       	std	Y+46, r25	; 0x2e
    1c5c:	af a7       	std	Y+47, r26	; 0x2f
    1c5e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c60:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c62:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c66:	98 a9       	ldd	r25, Y+48	; 0x30
    1c68:	2b ea       	ldi	r18, 0xAB	; 171
    1c6a:	3a ea       	ldi	r19, 0xAA	; 170
    1c6c:	4a e2       	ldi	r20, 0x2A	; 42
    1c6e:	50 e4       	ldi	r21, 0x40	; 64
    1c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	89 a7       	std	Y+41, r24	; 0x29
    1c7a:	9a a7       	std	Y+42, r25	; 0x2a
    1c7c:	ab a7       	std	Y+43, r26	; 0x2b
    1c7e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c80:	69 a5       	ldd	r22, Y+41	; 0x29
    1c82:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c84:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c86:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	1c f4       	brge	.+6      	; 0x1c9e <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	88 a7       	std	Y+40, r24	; 0x28
    1c9c:	91 c0       	rjmp	.+290    	; 0x1dc0 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1c9e:	69 a5       	ldd	r22, Y+41	; 0x29
    1ca0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	53 e4       	ldi	r21, 0x43	; 67
    1cae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <CLCD_voidSendCommand+0xa4>
    1cb6:	7b c0       	rjmp	.+246    	; 0x1dae <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1cb8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cba:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	4a e7       	ldi	r20, 0x7A	; 122
    1cc6:	54 e4       	ldi	r21, 0x44	; 68
    1cc8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	8c a3       	std	Y+36, r24	; 0x24
    1cd2:	9d a3       	std	Y+37, r25	; 0x25
    1cd4:	ae a3       	std	Y+38, r26	; 0x26
    1cd6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	6c a1       	ldd	r22, Y+36	; 0x24
    1cda:	7d a1       	ldd	r23, Y+37	; 0x25
    1cdc:	8e a1       	ldd	r24, Y+38	; 0x26
    1cde:	9f a1       	ldd	r25, Y+39	; 0x27
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a ef       	ldi	r20, 0xFA	; 250
    1ce6:	54 e4       	ldi	r21, 0x44	; 68
    1ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	88 a3       	std	Y+32, r24	; 0x20
    1cf2:	99 a3       	std	Y+33, r25	; 0x21
    1cf4:	aa a3       	std	Y+34, r26	; 0x22
    1cf6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cf8:	68 a1       	ldd	r22, Y+32	; 0x20
    1cfa:	79 a1       	ldd	r23, Y+33	; 0x21
    1cfc:	8a a1       	ldd	r24, Y+34	; 0x22
    1cfe:	9b a1       	ldd	r25, Y+35	; 0x23
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9f 8f       	std	Y+31, r25	; 0x1f
    1d16:	8e 8f       	std	Y+30, r24	; 0x1e
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1d1a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d1c:	79 a1       	ldd	r23, Y+33	; 0x21
    1d1e:	8a a1       	ldd	r24, Y+34	; 0x22
    1d20:	9b a1       	ldd	r25, Y+35	; 0x23
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	4c f5       	brge	.+82     	; 0x1d84 <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	6c a1       	ldd	r22, Y+36	; 0x24
    1d34:	7d a1       	ldd	r23, Y+37	; 0x25
    1d36:	8e a1       	ldd	r24, Y+38	; 0x26
    1d38:	9f a1       	ldd	r25, Y+39	; 0x27
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9f 8f       	std	Y+31, r25	; 0x1f
    1d58:	8e 8f       	std	Y+30, r24	; 0x1e
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <CLCD_voidSendCommand+0x166>
    1d5c:	88 ec       	ldi	r24, 0xC8	; 200
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9d 8f       	std	Y+29, r25	; 0x1d
    1d62:	8c 8f       	std	Y+28, r24	; 0x1c
    1d64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <CLCD_voidSendCommand+0x154>
    1d6c:	9d 8f       	std	Y+29, r25	; 0x1d
    1d6e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9f 8f       	std	Y+31, r25	; 0x1f
    1d78:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <CLCD_voidSendCommand+0x148>
    1d82:	24 c0       	rjmp	.+72     	; 0x1dcc <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	68 a1       	ldd	r22, Y+32	; 0x20
    1d86:	79 a1       	ldd	r23, Y+33	; 0x21
    1d88:	8a a1       	ldd	r24, Y+34	; 0x22
    1d8a:	9b a1       	ldd	r25, Y+35	; 0x23
    1d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9f 8f       	std	Y+31, r25	; 0x1f
    1d96:	8e 8f       	std	Y+30, r24	; 0x1e
    1d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d9c:	9b 8f       	std	Y+27, r25	; 0x1b
    1d9e:	8a 8f       	std	Y+26, r24	; 0x1a
    1da0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1da2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <CLCD_voidSendCommand+0x190>
    1da8:	9b 8f       	std	Y+27, r25	; 0x1b
    1daa:	8a 8f       	std	Y+26, r24	; 0x1a
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dae:	69 a5       	ldd	r22, Y+41	; 0x29
    1db0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	88 a7       	std	Y+40, r24	; 0x28
    1dc0:	88 a5       	ldd	r24, Y+40	; 0x28
    1dc2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dc4:	89 8d       	ldd	r24, Y+25	; 0x19
    1dc6:	8a 95       	dec	r24
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <CLCD_voidSendCommand+0x1b2>
    1dca:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	65 e0       	ldi	r22, 0x05	; 5
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a8 e4       	ldi	r26, 0x48	; 72
    1ddc:	b2 e4       	ldi	r27, 0x42	; 66
    1dde:	8d 8b       	std	Y+21, r24	; 0x15
    1de0:	9e 8b       	std	Y+22, r25	; 0x16
    1de2:	af 8b       	std	Y+23, r26	; 0x17
    1de4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1de6:	6d 89       	ldd	r22, Y+21	; 0x15
    1de8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dea:	8f 89       	ldd	r24, Y+23	; 0x17
    1dec:	98 8d       	ldd	r25, Y+24	; 0x18
    1dee:	2b ea       	ldi	r18, 0xAB	; 171
    1df0:	3a ea       	ldi	r19, 0xAA	; 170
    1df2:	4a e2       	ldi	r20, 0x2A	; 42
    1df4:	50 e4       	ldi	r21, 0x40	; 64
    1df6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	89 8b       	std	Y+17, r24	; 0x11
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	ab 8b       	std	Y+19, r26	; 0x13
    1e04:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e06:	69 89       	ldd	r22, Y+17	; 0x11
    1e08:	7a 89       	ldd	r23, Y+18	; 0x12
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	1c f4       	brge	.+6      	; 0x1e24 <CLCD_voidSendCommand+0x210>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	88 8b       	std	Y+16, r24	; 0x10
    1e22:	91 c0       	rjmp	.+290    	; 0x1f46 <CLCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    1e24:	69 89       	ldd	r22, Y+17	; 0x11
    1e26:	7a 89       	ldd	r23, Y+18	; 0x12
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	53 e4       	ldi	r21, 0x43	; 67
    1e34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <CLCD_voidSendCommand+0x22a>
    1e3c:	7b c0       	rjmp	.+246    	; 0x1f34 <CLCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8c 87       	std	Y+12, r24	; 0x0c
    1e58:	9d 87       	std	Y+13, r25	; 0x0d
    1e5a:	ae 87       	std	Y+14, r26	; 0x0e
    1e5c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e60:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a ef       	ldi	r20, 0xFA	; 250
    1e6c:	54 e4       	ldi	r21, 0x44	; 68
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	88 87       	std	Y+8, r24	; 0x08
    1e78:	99 87       	std	Y+9, r25	; 0x09
    1e7a:	aa 87       	std	Y+10, r26	; 0x0a
    1e7c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e7e:	68 85       	ldd	r22, Y+8	; 0x08
    1e80:	79 85       	ldd	r23, Y+9	; 0x09
    1e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <CLCD_voidSendCommand+0x28c>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9f 83       	std	Y+7, r25	; 0x07
    1e9c:	8e 83       	std	Y+6, r24	; 0x06
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <CLCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    1ea0:	68 85       	ldd	r22, Y+8	; 0x08
    1ea2:	79 85       	ldd	r23, Y+9	; 0x09
    1ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <CLCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ebc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ebe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9f 83       	std	Y+7, r25	; 0x07
    1ede:	8e 83       	std	Y+6, r24	; 0x06
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <CLCD_voidSendCommand+0x2ec>
    1ee2:	88 ec       	ldi	r24, 0xC8	; 200
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9d 83       	std	Y+5, r25	; 0x05
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <CLCD_voidSendCommand+0x2da>
    1ef2:	9d 83       	std	Y+5, r25	; 0x05
    1ef4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9f 83       	std	Y+7, r25	; 0x07
    1efe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	9f 81       	ldd	r25, Y+7	; 0x07
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <CLCD_voidSendCommand+0x2ce>
    1f08:	24 c0       	rjmp	.+72     	; 0x1f52 <CLCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	68 85       	ldd	r22, Y+8	; 0x08
    1f0c:	79 85       	ldd	r23, Y+9	; 0x09
    1f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9f 83       	std	Y+7, r25	; 0x07
    1f1c:	8e 83       	std	Y+6, r24	; 0x06
    1f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f20:	9f 81       	ldd	r25, Y+7	; 0x07
    1f22:	9b 83       	std	Y+3, r25	; 0x03
    1f24:	8a 83       	std	Y+2, r24	; 0x02
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <CLCD_voidSendCommand+0x316>
    1f2e:	9b 83       	std	Y+3, r25	; 0x03
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <CLCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f34:	69 89       	ldd	r22, Y+17	; 0x11
    1f36:	7a 89       	ldd	r23, Y+18	; 0x12
    1f38:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	88 8b       	std	Y+16, r24	; 0x10
    1f46:	88 89       	ldd	r24, Y+16	; 0x10
    1f48:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	8a 95       	dec	r24
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <CLCD_voidSendCommand+0x338>
    1f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

}
    1f52:	e1 96       	adiw	r28, 0x31	; 49
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <CLCD_voidSendData>:
void CLCD_voidSendData		(u8 Copy_u8Data		)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	e1 97       	sbiw	r28, 0x31	; 49
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> High (To Send Data )*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_HIGH);
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	67 e0       	ldi	r22, 0x07	; 7
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		/*RW -> Low	(To Write)*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	66 e0       	ldi	r22, 0x06	; 6
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		/*	Send Command */
		DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	69 a9       	ldd	r22, Y+49	; 0x31
    1f92:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortValue>
		/*Enable Sequence */
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	65 e0       	ldi	r22, 0x05	; 5
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e8       	ldi	r26, 0x80	; 128
    1fa6:	bf e3       	ldi	r27, 0x3F	; 63
    1fa8:	8d a7       	std	Y+45, r24	; 0x2d
    1faa:	9e a7       	std	Y+46, r25	; 0x2e
    1fac:	af a7       	std	Y+47, r26	; 0x2f
    1fae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fb2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb8:	2b ea       	ldi	r18, 0xAB	; 171
    1fba:	3a ea       	ldi	r19, 0xAA	; 170
    1fbc:	4a e2       	ldi	r20, 0x2A	; 42
    1fbe:	50 e4       	ldi	r21, 0x40	; 64
    1fc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	89 a7       	std	Y+41, r24	; 0x29
    1fca:	9a a7       	std	Y+42, r25	; 0x2a
    1fcc:	ab a7       	std	Y+43, r26	; 0x2b
    1fce:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1fd0:	69 a5       	ldd	r22, Y+41	; 0x29
    1fd2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	1c f4       	brge	.+6      	; 0x1fee <CLCD_voidSendData+0x8a>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	88 a7       	std	Y+40, r24	; 0x28
    1fec:	91 c0       	rjmp	.+290    	; 0x2110 <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    1fee:	69 a5       	ldd	r22, Y+41	; 0x29
    1ff0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	53 e4       	ldi	r21, 0x43	; 67
    1ffe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	0c f0       	brlt	.+2      	; 0x2008 <CLCD_voidSendData+0xa4>
    2006:	7b c0       	rjmp	.+246    	; 0x20fe <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2008:	6d a5       	ldd	r22, Y+45	; 0x2d
    200a:	7e a5       	ldd	r23, Y+46	; 0x2e
    200c:	8f a5       	ldd	r24, Y+47	; 0x2f
    200e:	98 a9       	ldd	r25, Y+48	; 0x30
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a e7       	ldi	r20, 0x7A	; 122
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8c a3       	std	Y+36, r24	; 0x24
    2022:	9d a3       	std	Y+37, r25	; 0x25
    2024:	ae a3       	std	Y+38, r26	; 0x26
    2026:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6c a1       	ldd	r22, Y+36	; 0x24
    202a:	7d a1       	ldd	r23, Y+37	; 0x25
    202c:	8e a1       	ldd	r24, Y+38	; 0x26
    202e:	9f a1       	ldd	r25, Y+39	; 0x27
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	88 a3       	std	Y+32, r24	; 0x20
    2042:	99 a3       	std	Y+33, r25	; 0x21
    2044:	aa a3       	std	Y+34, r26	; 0x22
    2046:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2048:	68 a1       	ldd	r22, Y+32	; 0x20
    204a:	79 a1       	ldd	r23, Y+33	; 0x21
    204c:	8a a1       	ldd	r24, Y+34	; 0x22
    204e:	9b a1       	ldd	r25, Y+35	; 0x23
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <CLCD_voidSendData+0x106>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9f 8f       	std	Y+31, r25	; 0x1f
    2066:	8e 8f       	std	Y+30, r24	; 0x1e
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    206a:	68 a1       	ldd	r22, Y+32	; 0x20
    206c:	79 a1       	ldd	r23, Y+33	; 0x21
    206e:	8a a1       	ldd	r24, Y+34	; 0x22
    2070:	9b a1       	ldd	r25, Y+35	; 0x23
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6c a1       	ldd	r22, Y+36	; 0x24
    2084:	7d a1       	ldd	r23, Y+37	; 0x25
    2086:	8e a1       	ldd	r24, Y+38	; 0x26
    2088:	9f a1       	ldd	r25, Y+39	; 0x27
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9f 8f       	std	Y+31, r25	; 0x1f
    20a8:	8e 8f       	std	Y+30, r24	; 0x1e
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <CLCD_voidSendData+0x166>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9d 8f       	std	Y+29, r25	; 0x1d
    20b2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <CLCD_voidSendData+0x154>
    20bc:	9d 8f       	std	Y+29, r25	; 0x1d
    20be:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9f 8f       	std	Y+31, r25	; 0x1f
    20c8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <CLCD_voidSendData+0x148>
    20d2:	24 c0       	rjmp	.+72     	; 0x211c <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	68 a1       	ldd	r22, Y+32	; 0x20
    20d6:	79 a1       	ldd	r23, Y+33	; 0x21
    20d8:	8a a1       	ldd	r24, Y+34	; 0x22
    20da:	9b a1       	ldd	r25, Y+35	; 0x23
    20dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9f 8f       	std	Y+31, r25	; 0x1f
    20e6:	8e 8f       	std	Y+30, r24	; 0x1e
    20e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ec:	9b 8f       	std	Y+27, r25	; 0x1b
    20ee:	8a 8f       	std	Y+26, r24	; 0x1a
    20f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <CLCD_voidSendData+0x190>
    20f8:	9b 8f       	std	Y+27, r25	; 0x1b
    20fa:	8a 8f       	std	Y+26, r24	; 0x1a
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20fe:	69 a5       	ldd	r22, Y+41	; 0x29
    2100:	7a a5       	ldd	r23, Y+42	; 0x2a
    2102:	8b a5       	ldd	r24, Y+43	; 0x2b
    2104:	9c a5       	ldd	r25, Y+44	; 0x2c
    2106:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	88 a7       	std	Y+40, r24	; 0x28
    2110:	88 a5       	ldd	r24, Y+40	; 0x28
    2112:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2114:	89 8d       	ldd	r24, Y+25	; 0x19
    2116:	8a 95       	dec	r24
    2118:	f1 f7       	brne	.-4      	; 0x2116 <CLCD_voidSendData+0x1b2>
    211a:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	65 e0       	ldi	r22, 0x05	; 5
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a8 e4       	ldi	r26, 0x48	; 72
    212c:	b2 e4       	ldi	r27, 0x42	; 66
    212e:	8d 8b       	std	Y+21, r24	; 0x15
    2130:	9e 8b       	std	Y+22, r25	; 0x16
    2132:	af 8b       	std	Y+23, r26	; 0x17
    2134:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	2b ea       	ldi	r18, 0xAB	; 171
    2140:	3a ea       	ldi	r19, 0xAA	; 170
    2142:	4a e2       	ldi	r20, 0x2A	; 42
    2144:	50 e4       	ldi	r21, 0x40	; 64
    2146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	89 8b       	std	Y+17, r24	; 0x11
    2150:	9a 8b       	std	Y+18, r25	; 0x12
    2152:	ab 8b       	std	Y+19, r26	; 0x13
    2154:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2156:	69 89       	ldd	r22, Y+17	; 0x11
    2158:	7a 89       	ldd	r23, Y+18	; 0x12
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	1c f4       	brge	.+6      	; 0x2174 <CLCD_voidSendData+0x210>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	88 8b       	std	Y+16, r24	; 0x10
    2172:	91 c0       	rjmp	.+290    	; 0x2296 <CLCD_voidSendData+0x332>
	else if (__tmp > 255)
    2174:	69 89       	ldd	r22, Y+17	; 0x11
    2176:	7a 89       	ldd	r23, Y+18	; 0x12
    2178:	8b 89       	ldd	r24, Y+19	; 0x13
    217a:	9c 89       	ldd	r25, Y+20	; 0x14
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	53 e4       	ldi	r21, 0x43	; 67
    2184:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <CLCD_voidSendData+0x22a>
    218c:	7b c0       	rjmp	.+246    	; 0x2284 <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    218e:	6d 89       	ldd	r22, Y+21	; 0x15
    2190:	7e 89       	ldd	r23, Y+22	; 0x16
    2192:	8f 89       	ldd	r24, Y+23	; 0x17
    2194:	98 8d       	ldd	r25, Y+24	; 0x18
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4a e7       	ldi	r20, 0x7A	; 122
    219c:	54 e4       	ldi	r21, 0x44	; 68
    219e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	8c 87       	std	Y+12, r24	; 0x0c
    21a8:	9d 87       	std	Y+13, r25	; 0x0d
    21aa:	ae 87       	std	Y+14, r26	; 0x0e
    21ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    21b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    21b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a ef       	ldi	r20, 0xFA	; 250
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	88 87       	std	Y+8, r24	; 0x08
    21c8:	99 87       	std	Y+9, r25	; 0x09
    21ca:	aa 87       	std	Y+10, r26	; 0x0a
    21cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21ce:	68 85       	ldd	r22, Y+8	; 0x08
    21d0:	79 85       	ldd	r23, Y+9	; 0x09
    21d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <CLCD_voidSendData+0x28c>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9f 83       	std	Y+7, r25	; 0x07
    21ec:	8e 83       	std	Y+6, r24	; 0x06
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <CLCD_voidSendData+0x30a>
	else if (__tmp > 65535)
    21f0:	68 85       	ldd	r22, Y+8	; 0x08
    21f2:	79 85       	ldd	r23, Y+9	; 0x09
    21f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <CLCD_voidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	6c 85       	ldd	r22, Y+12	; 0x0c
    220a:	7d 85       	ldd	r23, Y+13	; 0x0d
    220c:	8e 85       	ldd	r24, Y+14	; 0x0e
    220e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9f 83       	std	Y+7, r25	; 0x07
    222e:	8e 83       	std	Y+6, r24	; 0x06
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <CLCD_voidSendData+0x2ec>
    2232:	88 ec       	ldi	r24, 0xC8	; 200
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9d 83       	std	Y+5, r25	; 0x05
    2238:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <CLCD_voidSendData+0x2da>
    2242:	9d 83       	std	Y+5, r25	; 0x05
    2244:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9f 83       	std	Y+7, r25	; 0x07
    224e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	9f 81       	ldd	r25, Y+7	; 0x07
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <CLCD_voidSendData+0x2ce>
    2258:	24 c0       	rjmp	.+72     	; 0x22a2 <CLCD_voidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	68 85       	ldd	r22, Y+8	; 0x08
    225c:	79 85       	ldd	r23, Y+9	; 0x09
    225e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2260:	9b 85       	ldd	r25, Y+11	; 0x0b
    2262:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9f 83       	std	Y+7, r25	; 0x07
    226c:	8e 83       	std	Y+6, r24	; 0x06
    226e:	8e 81       	ldd	r24, Y+6	; 0x06
    2270:	9f 81       	ldd	r25, Y+7	; 0x07
    2272:	9b 83       	std	Y+3, r25	; 0x03
    2274:	8a 83       	std	Y+2, r24	; 0x02
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <CLCD_voidSendData+0x316>
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <CLCD_voidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2284:	69 89       	ldd	r22, Y+17	; 0x11
    2286:	7a 89       	ldd	r23, Y+18	; 0x12
    2288:	8b 89       	ldd	r24, Y+19	; 0x13
    228a:	9c 89       	ldd	r25, Y+20	; 0x14
    228c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	88 8b       	std	Y+16, r24	; 0x10
    2296:	88 89       	ldd	r24, Y+16	; 0x10
    2298:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	8a 95       	dec	r24
    229e:	f1 f7       	brne	.-4      	; 0x229c <CLCD_voidSendData+0x338>
    22a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);

}
    22a2:	e1 96       	adiw	r28, 0x31	; 49
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <CLCD_voidSetPosition>:

void CLCD_voidSetPosition	(u8 Copy_u8Row , u8 Copy_u8Col)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <CLCD_voidSetPosition+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <CLCD_voidSetPosition+0x8>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	3c 83       	std	Y+4, r19	; 0x04
    22cc:	2b 83       	std	Y+3, r18	; 0x03
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	31 f0       	breq	.+12     	; 0x22e4 <CLCD_voidSetPosition+0x30>
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	3c 81       	ldd	r19, Y+4	; 0x04
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	31 f0       	breq	.+12     	; 0x22ee <CLCD_voidSetPosition+0x3a>
    22e2:	09 c0       	rjmp	.+18     	; 0x22f6 <CLCD_voidSetPosition+0x42>
	{
	case CLCD_ROW_1:	CLCD_voidSendCommand(	FIRST_PLACE_IN_ROW1 + Copy_u8Col - 1);
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	81 58       	subi	r24, 0x81	; 129
    22e8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
    22ec:	04 c0       	rjmp	.+8      	; 0x22f6 <CLCD_voidSetPosition+0x42>
		break;
	case CLCD_ROW_2 :	CLCD_voidSendCommand(	FIRST_PLACE_IN_ROW2 + Copy_u8Col - 1);
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	81 54       	subi	r24, 0x41	; 65
    22f2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
		break ;
	default :
		break;
	}
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar	(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar , u8 Copy_u8Row , u8 Copy_u8Col )
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	27 97       	sbiw	r28, 0x07	; 7
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	8b 83       	std	Y+3, r24	; 0x03
    231a:	7d 83       	std	Y+5, r23	; 0x05
    231c:	6c 83       	std	Y+4, r22	; 0x04
    231e:	4e 83       	std	Y+6, r20	; 0x06
    2320:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address_INCREMENT = 0 ;
    2322:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	80 5c       	subi	r24, 0xC0	; 192
    233c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    2340:	19 82       	std	Y+1, r1	; 0x01
    2342:	0e c0       	rjmp	.+28     	; 0x2360 <CLCD_voidSendExtraChar+0x5c>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	8c 81       	ldd	r24, Y+4	; 0x04
    234c:	9d 81       	ldd	r25, Y+5	; 0x05
    234e:	fc 01       	movw	r30, r24
    2350:	e2 0f       	add	r30, r18
    2352:	f3 1f       	adc	r31, r19
    2354:	80 81       	ld	r24, Z
    2356:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	8f 5f       	subi	r24, 0xFF	; 255
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	88 30       	cpi	r24, 0x08	; 8
    2364:	78 f3       	brcs	.-34     	; 0x2344 <CLCD_voidSendExtraChar+0x40>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}
	/*Back to DDRAM */
	CLCD_voidSetPosition(Copy_u8Row , Copy_u8Col);
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
	/*Draw Character on display */
	CLCD_voidSendData(Copy_u8PatternLocation);
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
}
    2374:	27 96       	adiw	r28, 0x07	; 7
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <CLCD_voidStoreExtraChar>:
void CLCD_voidStoreExtraChar(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar )
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <CLCD_voidStoreExtraChar+0x6>
    238c:	00 d0       	rcall	.+0      	; 0x238e <CLCD_voidStoreExtraChar+0x8>
    238e:	0f 92       	push	r0
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	7d 83       	std	Y+5, r23	; 0x05
    2398:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Address_INCREMENT = 0 ;
    239a:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	80 5c       	subi	r24, 0xC0	; 192
    23b4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    23b8:	19 82       	std	Y+1, r1	; 0x01
    23ba:	0e c0       	rjmp	.+28     	; 0x23d8 <CLCD_voidStoreExtraChar+0x52>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	9d 81       	ldd	r25, Y+5	; 0x05
    23c6:	fc 01       	movw	r30, r24
    23c8:	e2 0f       	add	r30, r18
    23ca:	f3 1f       	adc	r31, r19
    23cc:	80 81       	ld	r24, Z
    23ce:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	88 30       	cpi	r24, 0x08	; 8
    23dc:	78 f3       	brcs	.-34     	; 0x23bc <CLCD_voidStoreExtraChar+0x36>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}


}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <CLCD_voidSendString>:
void CLCD_voidSendString	(u8 *Copy_pu8String )
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	61 97       	sbiw	r28, 0x11	; 17
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	99 8b       	std	Y+17, r25	; 0x11
    2404:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Iterator = 0 ;
    2406:	1f 86       	std	Y+15, r1	; 0x0f
    2408:	80 c0       	rjmp	.+256    	; 0x250a <CLCD_voidSendString+0x11c>
	while(Copy_pu8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    240a:	8f 85       	ldd	r24, Y+15	; 0x0f
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	88 89       	ldd	r24, Y+16	; 0x10
    2412:	99 89       	ldd	r25, Y+17	; 0x11
    2414:	fc 01       	movw	r30, r24
    2416:	e2 0f       	add	r30, r18
    2418:	f3 1f       	adc	r31, r19
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
		Local_u8Iterator ++ ;
    2420:	8f 85       	ldd	r24, Y+15	; 0x0f
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	8f 87       	std	Y+15, r24	; 0x0f
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e0       	ldi	r26, 0x00	; 0
    242c:	b0 e4       	ldi	r27, 0x40	; 64
    242e:	8b 87       	std	Y+11, r24	; 0x0b
    2430:	9c 87       	std	Y+12, r25	; 0x0c
    2432:	ad 87       	std	Y+13, r26	; 0x0d
    2434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6b 85       	ldd	r22, Y+11	; 0x0b
    2438:	7c 85       	ldd	r23, Y+12	; 0x0c
    243a:	8d 85       	ldd	r24, Y+13	; 0x0d
    243c:	9e 85       	ldd	r25, Y+14	; 0x0e
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8f 83       	std	Y+7, r24	; 0x07
    2450:	98 87       	std	Y+8, r25	; 0x08
    2452:	a9 87       	std	Y+9, r26	; 0x09
    2454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <CLCD_voidSendString+0x8a>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <CLCD_voidSendString+0x108>
	else if (__tmp > 65535)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <CLCD_voidSendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6b 85       	ldd	r22, Y+11	; 0x0b
    2492:	7c 85       	ldd	r23, Y+12	; 0x0c
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <CLCD_voidSendString+0xea>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <CLCD_voidSendString+0xd8>
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <CLCD_voidSendString+0xcc>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <CLCD_voidSendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <CLCD_voidSendString+0x114>
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01

}
void CLCD_voidSendString	(u8 *Copy_pu8String )
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_pu8String[Local_u8Iterator] != '\0')
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	88 89       	ldd	r24, Y+16	; 0x10
    2512:	99 89       	ldd	r25, Y+17	; 0x11
    2514:	fc 01       	movw	r30, r24
    2516:	e2 0f       	add	r30, r18
    2518:	f3 1f       	adc	r31, r19
    251a:	80 81       	ld	r24, Z
    251c:	88 23       	and	r24, r24
    251e:	09 f0       	breq	.+2      	; 0x2522 <CLCD_voidSendString+0x134>
    2520:	74 cf       	rjmp	.-280    	; 0x240a <CLCD_voidSendString+0x1c>
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
		Local_u8Iterator ++ ;
		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}
}
    2522:	61 96       	adiw	r28, 0x11	; 17
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <CLCD_voidSendu32Number>:

void CLCD_voidSendu32Number (u32 Copy_u32Number){
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	66 97       	sbiw	r28, 0x16	; 22
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	6b 8b       	std	Y+19, r22	; 0x13
    254a:	7c 8b       	std	Y+20, r23	; 0x14
    254c:	8d 8b       	std	Y+21, r24	; 0x15
    254e:	9e 8b       	std	Y+22, r25	; 0x16
	if(Copy_u32Number!=0)
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	ad 89       	ldd	r26, Y+21	; 0x15
    2556:	be 89       	ldd	r27, Y+22	; 0x16
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	a1 05       	cpc	r26, r1
    255c:	b1 05       	cpc	r27, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <CLCD_voidSendu32Number+0x2e>
    2560:	9e c0       	rjmp	.+316    	; 0x269e <CLCD_voidSendu32Number+0x16a>
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
    2562:	1b 82       	std	Y+3, r1	; 0x03
    2564:	1a 82       	std	Y+2, r1	; 0x02
    2566:	19 82       	std	Y+1, r1	; 0x01
    2568:	31 c0       	rjmp	.+98     	; 0x25cc <CLCD_voidSendu32Number+0x98>
		// filling array with number reversed in order
		while(Copy_u32Number!=0)
		{
			temp=Copy_u32Number%10;
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	ad 89       	ldd	r26, Y+21	; 0x15
    2570:	be 89       	ldd	r27, Y+22	; 0x16
    2572:	2a e0       	ldi	r18, 0x0A	; 10
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodsi4>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8c 83       	std	Y+4, r24	; 0x04
    2588:	9d 83       	std	Y+5, r25	; 0x05
    258a:	ae 83       	std	Y+6, r26	; 0x06
    258c:	bf 83       	std	Y+7, r27	; 0x07
			arr[Local_u8Iterator]=temp;
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4c 81       	ldd	r20, Y+4	; 0x04
    2596:	ce 01       	movw	r24, r28
    2598:	08 96       	adiw	r24, 0x08	; 8
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	40 83       	st	Z, r20
			Local_u8Iterator++;
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	ad 89       	ldd	r26, Y+21	; 0x15
    25ae:	be 89       	ldd	r27, Y+22	; 0x16
    25b0:	2a e0       	ldi	r18, 0x0A	; 10
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 48 19 	call	0x3290	; 0x3290 <__udivmodsi4>
    25c0:	da 01       	movw	r26, r20
    25c2:	c9 01       	movw	r24, r18
    25c4:	8b 8b       	std	Y+19, r24	; 0x13
    25c6:	9c 8b       	std	Y+20, r25	; 0x14
    25c8:	ad 8b       	std	Y+21, r26	; 0x15
    25ca:	be 8b       	std	Y+22, r27	; 0x16
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
		// filling array with number reversed in order
		while(Copy_u32Number!=0)
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	ad 89       	ldd	r26, Y+21	; 0x15
    25d2:	be 89       	ldd	r27, Y+22	; 0x16
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	a1 05       	cpc	r26, r1
    25d8:	b1 05       	cpc	r27, r1
    25da:	39 f6       	brne	.-114    	; 0x256a <CLCD_voidSendu32Number+0x36>
			temp=Copy_u32Number%10;
			arr[Local_u8Iterator]=temp;
			Local_u8Iterator++;
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x'; // null char
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	ce 01       	movw	r24, r28
    25e4:	08 96       	adiw	r24, 0x08	; 8
    25e6:	fc 01       	movw	r30, r24
    25e8:	e2 0f       	add	r30, r18
    25ea:	f3 1f       	adc	r31, r19
    25ec:	88 e7       	ldi	r24, 0x78	; 120
    25ee:	80 83       	st	Z, r24
		Local_u8Iterator--;
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	81 50       	subi	r24, 0x01	; 1
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	33 c0       	rjmp	.+102    	; 0x265e <CLCD_voidSendu32Number+0x12a>
		// re arrange the array
		while(Itr1<Local_u8Iterator)
		{
			// swap
			temp=arr[Itr1];
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	ce 01       	movw	r24, r28
    2600:	08 96       	adiw	r24, 0x08	; 8
    2602:	fc 01       	movw	r30, r24
    2604:	e2 0f       	add	r30, r18
    2606:	f3 1f       	adc	r31, r19
    2608:	80 81       	ld	r24, Z
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	8c 83       	std	Y+4, r24	; 0x04
    2614:	9d 83       	std	Y+5, r25	; 0x05
    2616:	ae 83       	std	Y+6, r26	; 0x06
    2618:	bf 83       	std	Y+7, r27	; 0x07
			arr[Itr1]=arr[Local_u8Iterator];
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	48 2f       	mov	r20, r24
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	ce 01       	movw	r24, r28
    2628:	08 96       	adiw	r24, 0x08	; 8
    262a:	fc 01       	movw	r30, r24
    262c:	e2 0f       	add	r30, r18
    262e:	f3 1f       	adc	r31, r19
    2630:	20 81       	ld	r18, Z
    2632:	ce 01       	movw	r24, r28
    2634:	08 96       	adiw	r24, 0x08	; 8
    2636:	fc 01       	movw	r30, r24
    2638:	e4 0f       	add	r30, r20
    263a:	f5 1f       	adc	r31, r21
    263c:	20 83       	st	Z, r18
			arr[Local_u8Iterator]=temp;
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4c 81       	ldd	r20, Y+4	; 0x04
    2646:	ce 01       	movw	r24, r28
    2648:	08 96       	adiw	r24, 0x08	; 8
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	40 83       	st	Z, r20
			Itr1++;
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	8f 5f       	subi	r24, 0xFF	; 255
    2656:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Iterator--;
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	81 50       	subi	r24, 0x01	; 1
    265c:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x'; // null char
		Local_u8Iterator--;
		// re arrange the array
		while(Itr1<Local_u8Iterator)
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	98 17       	cp	r25, r24
    2664:	48 f2       	brcs	.-110    	; 0x25f8 <CLCD_voidSendu32Number+0xc4>
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <CLCD_voidSendu32Number+0x152>
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
		{
			CLCD_voidSendData(arr[Itr2]+'0');
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	ce 01       	movw	r24, r28
    2670:	08 96       	adiw	r24, 0x08	; 8
    2672:	fc 01       	movw	r30, r24
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	80 81       	ld	r24, Z
    267a:	80 5d       	subi	r24, 0xD0	; 208
    267c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
			Itr2++;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	8f 5f       	subi	r24, 0xFF	; 255
    2684:	89 83       	std	Y+1, r24	; 0x01
			arr[Itr1]=arr[Local_u8Iterator];
			arr[Local_u8Iterator]=temp;
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	ce 01       	movw	r24, r28
    268e:	08 96       	adiw	r24, 0x08	; 8
    2690:	fc 01       	movw	r30, r24
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	80 81       	ld	r24, Z
    2698:	88 37       	cpi	r24, 0x78	; 120
    269a:	31 f7       	brne	.-52     	; 0x2668 <CLCD_voidSendu32Number+0x134>
    269c:	03 c0       	rjmp	.+6      	; 0x26a4 <CLCD_voidSendu32Number+0x170>
			CLCD_voidSendData(arr[Itr2]+'0');
			Itr2++;
		}
	}
	else{
		CLCD_voidSendData('0');
    269e:	80 e3       	ldi	r24, 0x30	; 48
    26a0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
	}
}
    26a4:	66 96       	adiw	r28, 0x16	; 22
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <main>:
		0x11,
		0x0E,
		0x00
};

int main(void){
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	cb 56       	subi	r28, 0x6B	; 107
    26c4:	d0 40       	sbci	r29, 0x00	; 0
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidInit();
    26d0:	0e 94 34 0b 	call	0x1668	; 0x1668 <CLCD_voidInit>
	u8 i;
	CLCD_voidStoreExtraChar(0,Person);
    26d4:	2f ea       	ldi	r18, 0xAF	; 175
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	b9 01       	movw	r22, r18
    26dc:	0e 94 c3 11 	call	0x2386	; 0x2386 <CLCD_voidStoreExtraChar>
	CLCD_voidStoreExtraChar(1,GradPerson);
    26e0:	27 eb       	ldi	r18, 0xB7	; 183
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 c3 11 	call	0x2386	; 0x2386 <CLCD_voidStoreExtraChar>
	CLCD_voidStoreExtraChar(2,Building);
    26ec:	2f eb       	ldi	r18, 0xBF	; 191
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	b9 01       	movw	r22, r18
    26f4:	0e 94 c3 11 	call	0x2386	; 0x2386 <CLCD_voidStoreExtraChar>
	CLCD_voidStoreExtraChar(3,Wire);
    26f8:	27 ec       	ldi	r18, 0xC7	; 199
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	b9 01       	movw	r22, r18
    2700:	0e 94 c3 11 	call	0x2386	; 0x2386 <CLCD_voidStoreExtraChar>
	CLCD_voidStoreExtraChar(4,Trap);
    2704:	2f ec       	ldi	r18, 0xCF	; 207
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	b9 01       	movw	r22, r18
    270c:	0e 94 c3 11 	call	0x2386	; 0x2386 <CLCD_voidStoreExtraChar>
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>

	while(1){
		/*	Start of the Story */

		CLCD_voidSetPosition( 1 , 1 );
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
		CLCD_voidSendString((u8 *)"Hamo Graduation!");
    271e:	80 e6       	ldi	r24, 0x60	; 96
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
    2726:	fe 01       	movw	r30, r28
    2728:	e1 5a       	subi	r30, 0xA1	; 161
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e8       	ldi	r25, 0x80	; 128
    2730:	ab e3       	ldi	r26, 0x3B	; 59
    2732:	b5 e4       	ldi	r27, 0x45	; 69
    2734:	80 83       	st	Z, r24
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	a2 83       	std	Z+2, r26	; 0x02
    273a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	8e 01       	movw	r16, r28
    273e:	05 5a       	subi	r16, 0xA5	; 165
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	e1 5a       	subi	r30, 0xA1	; 161
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	4a ef       	ldi	r20, 0xFA	; 250
    2756:	54 e4       	ldi	r21, 0x44	; 68
    2758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	f8 01       	movw	r30, r16
    2762:	80 83       	st	Z, r24
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	a2 83       	std	Z+2, r26	; 0x02
    2768:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    276a:	fe 01       	movw	r30, r28
    276c:	e5 5a       	subi	r30, 0xA5	; 165
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	44 f4       	brge	.+16     	; 0x2798 <main+0xe2>
		__ticks = 1;
    2788:	fe 01       	movw	r30, r28
    278a:	e7 5a       	subi	r30, 0xA7	; 167
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	64 c0       	rjmp	.+200    	; 0x2860 <main+0x1aa>
	else if (__tmp > 65535)
    2798:	fe 01       	movw	r30, r28
    279a:	e5 5a       	subi	r30, 0xA5	; 165
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <main+0x102>
    27b6:	43 c0       	rjmp	.+134    	; 0x283e <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	fe 01       	movw	r30, r28
    27ba:	e1 5a       	subi	r30, 0xA1	; 161
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	8e 01       	movw	r16, r28
    27d8:	07 5a       	subi	r16, 0xA7	; 167
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	1f c0       	rjmp	.+62     	; 0x282e <main+0x178>
    27f0:	fe 01       	movw	r30, r28
    27f2:	e9 5a       	subi	r30, 0xA9	; 169
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	fe 01       	movw	r30, r28
    2800:	e9 5a       	subi	r30, 0xA9	; 169
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <main+0x152>
    280c:	fe 01       	movw	r30, r28
    280e:	e9 5a       	subi	r30, 0xA9	; 169
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	de 01       	movw	r26, r28
    2818:	a7 5a       	subi	r26, 0xA7	; 167
    281a:	bf 4f       	sbci	r27, 0xFF	; 255
    281c:	fe 01       	movw	r30, r28
    281e:	e7 5a       	subi	r30, 0xA7	; 167
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	11 96       	adiw	r26, 0x01	; 1
    282a:	9c 93       	st	X, r25
    282c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	fe 01       	movw	r30, r28
    2830:	e7 5a       	subi	r30, 0xA7	; 167
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	d1 f6       	brne	.-76     	; 0x27f0 <main+0x13a>
    283c:	27 c0       	rjmp	.+78     	; 0x288c <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	8e 01       	movw	r16, r28
    2840:	07 5a       	subi	r16, 0xA7	; 167
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	e5 5a       	subi	r30, 0xA5	; 165
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	f8 01       	movw	r30, r16
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	de 01       	movw	r26, r28
    2862:	ab 5a       	subi	r26, 0xAB	; 171
    2864:	bf 4f       	sbci	r27, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	e7 5a       	subi	r30, 0xA7	; 167
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	8d 93       	st	X+, r24
    2872:	9c 93       	st	X, r25
    2874:	fe 01       	movw	r30, r28
    2876:	eb 5a       	subi	r30, 0xAB	; 171
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	91 81       	ldd	r25, Z+1	; 0x01
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <main+0x1c8>
    2882:	fe 01       	movw	r30, r28
    2884:	eb 5a       	subi	r30, 0xAB	; 171
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
		_delay_ms(3000);
		CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
		CLCD_voidSendString((u8 *)"ASU");
    2892:	81 e7       	ldi	r24, 0x71	; 113
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
		for(i=1; i<4; i++){
    289a:	fe 01       	movw	r30, r28
    289c:	e5 59       	subi	r30, 0x95	; 149
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	80 83       	st	Z, r24
    28a4:	13 c0       	rjmp	.+38     	; 0x28cc <main+0x216>
			CLCD_voidSetPosition( 2 , i );
    28a6:	fe 01       	movw	r30, r28
    28a8:	e5 59       	subi	r30, 0x95	; 149
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	60 81       	ld	r22, Z
    28b0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(2); // building
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
		CLCD_voidSetPosition( 1 , 1 );
		CLCD_voidSendString((u8 *)"Hamo Graduation!");
		_delay_ms(3000);
		CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
		CLCD_voidSendString((u8 *)"ASU");
		for(i=1; i<4; i++){
    28ba:	de 01       	movw	r26, r28
    28bc:	a5 59       	subi	r26, 0x95	; 149
    28be:	bf 4f       	sbci	r27, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e5 59       	subi	r30, 0x95	; 149
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	8c 93       	st	X, r24
    28cc:	fe 01       	movw	r30, r28
    28ce:	e5 59       	subi	r30, 0x95	; 149
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	84 30       	cpi	r24, 0x04	; 4
    28d6:	38 f3       	brcs	.-50     	; 0x28a6 <main+0x1f0>
			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(2); // building
		}
		for(i=4; i<15; i++){
    28d8:	fe 01       	movw	r30, r28
    28da:	e5 59       	subi	r30, 0x95	; 149
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	84 e0       	ldi	r24, 0x04	; 4
    28e0:	80 83       	st	Z, r24
    28e2:	f8 c0       	rjmp	.+496    	; 0x2ad4 <main+0x41e>
			CLCD_voidSetPosition( 1 , 1 );
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"ASU");
    28ec:	81 e7       	ldi	r24, 0x71	; 113
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
			CLCD_voidSetPosition( 1 , 8 );
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	68 e0       	ldi	r22, 0x08	; 8
    28f8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"GoWork :)");
    28fc:	85 e7       	ldi	r24, 0x75	; 117
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
			for(u8 j=1; j<4; j++){
    2904:	fe 01       	movw	r30, r28
    2906:	e6 59       	subi	r30, 0x96	; 150
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	80 83       	st	Z, r24
    290e:	13 c0       	rjmp	.+38     	; 0x2936 <main+0x280>
				CLCD_voidSetPosition( 2 , j );
    2910:	fe 01       	movw	r30, r28
    2912:	e6 59       	subi	r30, 0x96	; 150
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	60 81       	ld	r22, Z
    291a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(2); // building
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
		for(i=4; i<15; i++){
			CLCD_voidSetPosition( 1 , 1 );
			CLCD_voidSendString((u8 *)"ASU");
			CLCD_voidSetPosition( 1 , 8 );
			CLCD_voidSendString((u8 *)"GoWork :)");
			for(u8 j=1; j<4; j++){
    2924:	de 01       	movw	r26, r28
    2926:	a6 59       	subi	r26, 0x96	; 150
    2928:	bf 4f       	sbci	r27, 0xFF	; 255
    292a:	fe 01       	movw	r30, r28
    292c:	e6 59       	subi	r30, 0x96	; 150
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	8c 93       	st	X, r24
    2936:	fe 01       	movw	r30, r28
    2938:	e6 59       	subi	r30, 0x96	; 150
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	38 f3       	brcs	.-50     	; 0x2910 <main+0x25a>
				CLCD_voidSetPosition( 2 , j );
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , i );
    2942:	fe 01       	movw	r30, r28
    2944:	e5 59       	subi	r30, 0x95	; 149
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	60 81       	ld	r22, Z
    294c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(1); // grad person
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
    2956:	fe 01       	movw	r30, r28
    2958:	ef 5a       	subi	r30, 0xAF	; 175
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a8 e4       	ldi	r26, 0x48	; 72
    2962:	b3 e4       	ldi	r27, 0x43	; 67
    2964:	80 83       	st	Z, r24
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	a2 83       	std	Z+2, r26	; 0x02
    296a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	8e 01       	movw	r16, r28
    296e:	03 5b       	subi	r16, 0xB3	; 179
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	ef 5a       	subi	r30, 0xAF	; 175
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a ef       	ldi	r20, 0xFA	; 250
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	f8 01       	movw	r30, r16
    2992:	80 83       	st	Z, r24
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	a2 83       	std	Z+2, r26	; 0x02
    2998:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    299a:	fe 01       	movw	r30, r28
    299c:	e3 5b       	subi	r30, 0xB3	; 179
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	60 81       	ld	r22, Z
    29a2:	71 81       	ldd	r23, Z+1	; 0x01
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	44 f4       	brge	.+16     	; 0x29c8 <main+0x312>
		__ticks = 1;
    29b8:	fe 01       	movw	r30, r28
    29ba:	e5 5b       	subi	r30, 0xB5	; 181
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	80 83       	st	Z, r24
    29c6:	64 c0       	rjmp	.+200    	; 0x2a90 <main+0x3da>
	else if (__tmp > 65535)
    29c8:	fe 01       	movw	r30, r28
    29ca:	e3 5b       	subi	r30, 0xB3	; 179
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	0c f0       	brlt	.+2      	; 0x29e8 <main+0x332>
    29e6:	43 c0       	rjmp	.+134    	; 0x2a6e <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	fe 01       	movw	r30, r28
    29ea:	ef 5a       	subi	r30, 0xAF	; 175
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e2       	ldi	r20, 0x20	; 32
    29fc:	51 e4       	ldi	r21, 0x41	; 65
    29fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8e 01       	movw	r16, r28
    2a08:	05 5b       	subi	r16, 0xB5	; 181
    2a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	f8 01       	movw	r30, r16
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
    2a1e:	1f c0       	rjmp	.+62     	; 0x2a5e <main+0x3a8>
    2a20:	fe 01       	movw	r30, r28
    2a22:	e7 5b       	subi	r30, 0xB7	; 183
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	88 ec       	ldi	r24, 0xC8	; 200
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e7 5b       	subi	r30, 0xB7	; 183
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <main+0x382>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e7 5b       	subi	r30, 0xB7	; 183
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	de 01       	movw	r26, r28
    2a48:	a5 5b       	subi	r26, 0xB5	; 181
    2a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e5 5b       	subi	r30, 0xB5	; 181
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	11 96       	adiw	r26, 0x01	; 1
    2a5a:	9c 93       	st	X, r25
    2a5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e5 5b       	subi	r30, 0xB5	; 181
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	d1 f6       	brne	.-76     	; 0x2a20 <main+0x36a>
    2a6c:	27 c0       	rjmp	.+78     	; 0x2abc <main+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	05 5b       	subi	r16, 0xB5	; 181
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e3 5b       	subi	r30, 0xB3	; 179
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
    2a90:	de 01       	movw	r26, r28
    2a92:	a9 5b       	subi	r26, 0xB9	; 185
    2a94:	bf 4f       	sbci	r27, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	e5 5b       	subi	r30, 0xB5	; 181
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	8d 93       	st	X+, r24
    2aa2:	9c 93       	st	X, r25
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e9 5b       	subi	r30, 0xB9	; 185
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <main+0x3f8>
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e9 5b       	subi	r30, 0xB9	; 185
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
			_delay_ms(200);
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
		CLCD_voidSendString((u8 *)"ASU");
		for(i=1; i<4; i++){
			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(2); // building
		}
		for(i=4; i<15; i++){
    2ac2:	de 01       	movw	r26, r28
    2ac4:	a5 59       	subi	r26, 0x95	; 149
    2ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e5 59       	subi	r30, 0x95	; 149
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	8c 93       	st	X, r24
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e5 59       	subi	r30, 0x95	; 149
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	8f 30       	cpi	r24, 0x0F	; 15
    2ade:	08 f4       	brcc	.+2      	; 0x2ae2 <main+0x42c>
    2ae0:	01 cf       	rjmp	.-510    	; 0x28e4 <main+0x22e>
			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(1); // grad person
			_delay_ms(200);
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
		}
		for(i=4; i<15; i++){
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e5 59       	subi	r30, 0x95	; 149
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	84 e0       	ldi	r24, 0x04	; 4
    2aea:	80 83       	st	Z, r24
    2aec:	ca c0       	rjmp	.+404    	; 0x2c82 <main+0x5cc>
			CLCD_voidSetPosition( 1 , 1 );
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"goto ");
    2af6:	8f e7       	ldi	r24, 0x7F	; 127
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
			CLCD_voidSetPosition( 1 , 12 );
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	6c e0       	ldi	r22, 0x0C	; 12
    2b02:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"Valeo");
    2b06:	85 e8       	ldi	r24, 0x85	; 133
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>

			for(u8 j=13; j<16; j++){
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e7 59       	subi	r30, 0x97	; 151
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	8d e0       	ldi	r24, 0x0D	; 13
    2b16:	80 83       	st	Z, r24
    2b18:	13 c0       	rjmp	.+38     	; 0x2b40 <main+0x48a>
				CLCD_voidSetPosition( 2 , j );
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e7 59       	subi	r30, 0x97	; 151
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	60 81       	ld	r22, Z
    2b24:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(2); // building
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
			CLCD_voidSetPosition( 1 , 1 );
			CLCD_voidSendString((u8 *)"goto ");
			CLCD_voidSetPosition( 1 , 12 );
			CLCD_voidSendString((u8 *)"Valeo");

			for(u8 j=13; j<16; j++){
    2b2e:	de 01       	movw	r26, r28
    2b30:	a7 59       	subi	r26, 0x97	; 151
    2b32:	bf 4f       	sbci	r27, 0xFF	; 255
    2b34:	fe 01       	movw	r30, r28
    2b36:	e7 59       	subi	r30, 0x97	; 151
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	8c 93       	st	X, r24
    2b40:	fe 01       	movw	r30, r28
    2b42:	e7 59       	subi	r30, 0x97	; 151
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	80 31       	cpi	r24, 0x10	; 16
    2b4a:	38 f3       	brcs	.-50     	; 0x2b1a <main+0x464>
				CLCD_voidSetPosition( 2 , j );
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , i );
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e5 59       	subi	r30, 0x95	; 149
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	60 81       	ld	r22, Z
    2b56:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(0); // person
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 5b       	subi	r30, 0xBD	; 189
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a8 e4       	ldi	r26, 0x48	; 72
    2b6c:	b3 e4       	ldi	r27, 0x43	; 67
    2b6e:	80 83       	st	Z, r24
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	a2 83       	std	Z+2, r26	; 0x02
    2b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	8e 01       	movw	r16, r28
    2b78:	01 5c       	subi	r16, 0xC1	; 193
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ed 5b       	subi	r30, 0xBD	; 189
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a ef       	ldi	r20, 0xFA	; 250
    2b90:	54 e4       	ldi	r21, 0x44	; 68
    2b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	80 83       	st	Z, r24
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	a2 83       	std	Z+2, r26	; 0x02
    2ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ff 96       	adiw	r30, 0x3f	; 63
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <main+0x514>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9e af       	std	Y+62, r25	; 0x3e
    2bc6:	8d af       	std	Y+61, r24	; 0x3d
    2bc8:	46 c0       	rjmp	.+140    	; 0x2c56 <main+0x5a0>
	else if (__tmp > 65535)
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ff 96       	adiw	r30, 0x3f	; 63
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	64 f5       	brge	.+88     	; 0x2c3e <main+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 5b       	subi	r30, 0xBD	; 189
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e af       	std	Y+62, r25	; 0x3e
    2c12:	8d af       	std	Y+61, r24	; 0x3d
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <main+0x57e>
    2c16:	88 ec       	ldi	r24, 0xC8	; 200
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9c af       	std	Y+60, r25	; 0x3c
    2c1c:	8b af       	std	Y+59, r24	; 0x3b
    2c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c20:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <main+0x56c>
    2c26:	9c af       	std	Y+60, r25	; 0x3c
    2c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	9e af       	std	Y+62, r25	; 0x3e
    2c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c36:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	69 f7       	brne	.-38     	; 0x2c16 <main+0x560>
    2c3c:	16 c0       	rjmp	.+44     	; 0x2c6a <main+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ff 96       	adiw	r30, 0x3f	; 63
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	9e af       	std	Y+62, r25	; 0x3e
    2c54:	8d af       	std	Y+61, r24	; 0x3d
    2c56:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c58:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c5a:	9a af       	std	Y+58, r25	; 0x3a
    2c5c:	89 af       	std	Y+57, r24	; 0x39
    2c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c60:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <main+0x5ac>
    2c66:	9a af       	std	Y+58, r25	; 0x3a
    2c68:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(1); // grad person
			_delay_ms(200);
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
		}
		for(i=4; i<15; i++){
    2c70:	de 01       	movw	r26, r28
    2c72:	a5 59       	subi	r26, 0x95	; 149
    2c74:	bf 4f       	sbci	r27, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e5 59       	subi	r30, 0x95	; 149
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	8c 93       	st	X, r24
    2c82:	fe 01       	movw	r30, r28
    2c84:	e5 59       	subi	r30, 0x95	; 149
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	8f 30       	cpi	r24, 0x0F	; 15
    2c8c:	08 f4       	brcc	.+2      	; 0x2c90 <main+0x5da>
    2c8e:	2f cf       	rjmp	.-418    	; 0x2aee <main+0x438>
			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(0); // person
			_delay_ms(200);
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
		}
		for(i=4; i<12; i++){
    2c90:	fe 01       	movw	r30, r28
    2c92:	e5 59       	subi	r30, 0x95	; 149
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	84 e0       	ldi	r24, 0x04	; 4
    2c98:	80 83       	st	Z, r24
    2c9a:	05 c1       	rjmp	.+522    	; 0x2ea6 <main+0x7f0>
			CLCD_voidSetPosition( 1 , 1 );
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"Army");
    2ca4:	8b e8       	ldi	r24, 0x8B	; 139
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
			CLCD_voidSetPosition( 1 , 12 );
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	6c e0       	ldi	r22, 0x0C	; 12
    2cb0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"Valeo");
    2cb4:	85 e8       	ldi	r24, 0x85	; 133
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>

			for(u8 j=13; j<16; j++){
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e8 59       	subi	r30, 0x98	; 152
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	8d e0       	ldi	r24, 0x0D	; 13
    2cc4:	80 83       	st	Z, r24
    2cc6:	13 c0       	rjmp	.+38     	; 0x2cee <main+0x638>
				CLCD_voidSetPosition( 2 , j );
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e8 59       	subi	r30, 0x98	; 152
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	60 81       	ld	r22, Z
    2cd2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(2); // building
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
			CLCD_voidSetPosition( 1 , 1 );
			CLCD_voidSendString((u8 *)"Army");
			CLCD_voidSetPosition( 1 , 12 );
			CLCD_voidSendString((u8 *)"Valeo");

			for(u8 j=13; j<16; j++){
    2cdc:	de 01       	movw	r26, r28
    2cde:	a8 59       	subi	r26, 0x98	; 152
    2ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e8 59       	subi	r30, 0x98	; 152
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	8f 5f       	subi	r24, 0xFF	; 255
    2cec:	8c 93       	st	X, r24
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e8 59       	subi	r30, 0x98	; 152
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	80 31       	cpi	r24, 0x10	; 16
    2cf8:	38 f3       	brcs	.-50     	; 0x2cc8 <main+0x612>
				CLCD_voidSetPosition( 2 , j );
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , 14);
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	6e e0       	ldi	r22, 0x0E	; 14
    2cfe:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(0); // person(H)
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>

			for(u8 j=1; j<4; j++){
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e9 59       	subi	r30, 0x99	; 153
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 83       	st	Z, r24
    2d12:	13 c0       	rjmp	.+38     	; 0x2d3a <main+0x684>
				CLCD_voidSetPosition( 2 , j );
    2d14:	fe 01       	movw	r30, r28
    2d16:	e9 59       	subi	r30, 0x99	; 153
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	60 81       	ld	r22, Z
    2d1e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(2); // building
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , 14);
			CLCD_voidSendData(0); // person(H)

			for(u8 j=1; j<4; j++){
    2d28:	de 01       	movw	r26, r28
    2d2a:	a9 59       	subi	r26, 0x99	; 153
    2d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e9 59       	subi	r30, 0x99	; 153
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	8c 93       	st	X, r24
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e9 59       	subi	r30, 0x99	; 153
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	84 30       	cpi	r24, 0x04	; 4
    2d44:	38 f3       	brcs	.-50     	; 0x2d14 <main+0x65e>
				CLCD_voidSetPosition( 2 , j );
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , 4 );
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	64 e0       	ldi	r22, 0x04	; 4
    2d4a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(0); // person
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a8 e4       	ldi	r26, 0x48	; 72
    2d5a:	b3 e4       	ldi	r27, 0x43	; 67
    2d5c:	8d ab       	std	Y+53, r24	; 0x35
    2d5e:	9e ab       	std	Y+54, r25	; 0x36
    2d60:	af ab       	std	Y+55, r26	; 0x37
    2d62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d64:	6d a9       	ldd	r22, Y+53	; 0x35
    2d66:	7e a9       	ldd	r23, Y+54	; 0x36
    2d68:	8f a9       	ldd	r24, Y+55	; 0x37
    2d6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a ef       	ldi	r20, 0xFA	; 250
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	89 ab       	std	Y+49, r24	; 0x31
    2d7e:	9a ab       	std	Y+50, r25	; 0x32
    2d80:	ab ab       	std	Y+51, r26	; 0x33
    2d82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d84:	69 a9       	ldd	r22, Y+49	; 0x31
    2d86:	7a a9       	ldd	r23, Y+50	; 0x32
    2d88:	8b a9       	ldd	r24, Y+51	; 0x33
    2d8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	2c f4       	brge	.+10     	; 0x2da6 <main+0x6f0>
		__ticks = 1;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	98 ab       	std	Y+48, r25	; 0x30
    2da2:	8f a7       	std	Y+47, r24	; 0x2f
    2da4:	3f c0       	rjmp	.+126    	; 0x2e24 <main+0x76e>
	else if (__tmp > 65535)
    2da6:	69 a9       	ldd	r22, Y+49	; 0x31
    2da8:	7a a9       	ldd	r23, Y+50	; 0x32
    2daa:	8b a9       	ldd	r24, Y+51	; 0x33
    2dac:	9c a9       	ldd	r25, Y+52	; 0x34
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	3f ef       	ldi	r19, 0xFF	; 255
    2db2:	4f e7       	ldi	r20, 0x7F	; 127
    2db4:	57 e4       	ldi	r21, 0x47	; 71
    2db6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2dba:	18 16       	cp	r1, r24
    2dbc:	4c f5       	brge	.+82     	; 0x2e10 <main+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbe:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc0:	7e a9       	ldd	r23, Y+54	; 0x36
    2dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    2dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	98 ab       	std	Y+48, r25	; 0x30
    2de4:	8f a7       	std	Y+47, r24	; 0x2f
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <main+0x750>
    2de8:	88 ec       	ldi	r24, 0xC8	; 200
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9e a7       	std	Y+46, r25	; 0x2e
    2dee:	8d a7       	std	Y+45, r24	; 0x2d
    2df0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2df2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <main+0x73e>
    2df8:	9e a7       	std	Y+46, r25	; 0x2e
    2dfa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dfe:	98 a9       	ldd	r25, Y+48	; 0x30
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	98 ab       	std	Y+48, r25	; 0x30
    2e04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e08:	98 a9       	ldd	r25, Y+48	; 0x30
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <main+0x732>
    2e0e:	14 c0       	rjmp	.+40     	; 0x2e38 <main+0x782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e10:	69 a9       	ldd	r22, Y+49	; 0x31
    2e12:	7a a9       	ldd	r23, Y+50	; 0x32
    2e14:	8b a9       	ldd	r24, Y+51	; 0x33
    2e16:	9c a9       	ldd	r25, Y+52	; 0x34
    2e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	98 ab       	std	Y+48, r25	; 0x30
    2e22:	8f a7       	std	Y+47, r24	; 0x2f
    2e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e26:	98 a9       	ldd	r25, Y+48	; 0x30
    2e28:	9c a7       	std	Y+44, r25	; 0x2c
    2e2a:	8b a7       	std	Y+43, r24	; 0x2b
    2e2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <main+0x77a>
    2e34:	9c a7       	std	Y+44, r25	; 0x2c
    2e36:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			for(int w=5; w<14; w++){
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 59       	subi	r30, 0x9B	; 155
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	85 e0       	ldi	r24, 0x05	; 5
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	17 c0       	rjmp	.+46     	; 0x2e76 <main+0x7c0>
				CLCD_voidSetPosition( 2 , w );
    2e48:	fe 01       	movw	r30, r28
    2e4a:	eb 59       	subi	r30, 0x9B	; 155
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	90 81       	ld	r25, Z
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	69 2f       	mov	r22, r25
    2e54:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(3); // wire
    2e58:	83 e0       	ldi	r24, 0x03	; 3
    2e5a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , 4 );
			CLCD_voidSendData(0); // person
			_delay_ms(200);
			for(int w=5; w<14; w++){
    2e5e:	de 01       	movw	r26, r28
    2e60:	ab 59       	subi	r26, 0x9B	; 155
    2e62:	bf 4f       	sbci	r27, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	eb 59       	subi	r30, 0x9B	; 155
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	11 96       	adiw	r26, 0x01	; 1
    2e72:	9c 93       	st	X, r25
    2e74:	8e 93       	st	-X, r24
    2e76:	fe 01       	movw	r30, r28
    2e78:	eb 59       	subi	r30, 0x9B	; 155
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	8e 30       	cpi	r24, 0x0E	; 14
    2e82:	91 05       	cpc	r25, r1
    2e84:	0c f3       	brlt	.-62     	; 0x2e48 <main+0x792>
				CLCD_voidSetPosition( 2 , w );
				CLCD_voidSendData(3); // wire
			}
			CLCD_voidSetPosition( 2 , 14 );
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	6e e0       	ldi	r22, 0x0E	; 14
    2e8a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(4); // trap
    2e8e:	84 e0       	ldi	r24, 0x04	; 4
    2e90:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(0); // person
			_delay_ms(200);
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
		}
		for(i=4; i<12; i++){
    2e94:	de 01       	movw	r26, r28
    2e96:	a5 59       	subi	r26, 0x95	; 149
    2e98:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e5 59       	subi	r30, 0x95	; 149
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 81       	ld	r24, Z
    2ea2:	8f 5f       	subi	r24, 0xFF	; 255
    2ea4:	8c 93       	st	X, r24
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e5 59       	subi	r30, 0x95	; 149
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	8c 30       	cpi	r24, 0x0C	; 12
    2eb0:	08 f4       	brcc	.+2      	; 0x2eb4 <main+0x7fe>
    2eb2:	f4 ce       	rjmp	.-536    	; 0x2c9c <main+0x5e6>
			}
			CLCD_voidSetPosition( 2 , 14 );
			CLCD_voidSendData(4); // trap

		}
		for(i = 14; i> 4; i--){
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e5 59       	subi	r30, 0x95	; 149
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	8e e0       	ldi	r24, 0x0E	; 14
    2ebc:	80 83       	st	Z, r24
    2ebe:	66 c1       	rjmp	.+716    	; 0x318c <main+0xad6>
			//CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
			CLCD_voidSetPosition( 1 , 1 );
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"Army ");
    2ec8:	80 e9       	ldi	r24, 0x90	; 144
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
			CLCD_voidSetPosition( 1 , 12 );
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	6c e0       	ldi	r22, 0x0C	; 12
    2ed4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"Valeo");
    2ed8:	85 e8       	ldi	r24, 0x85	; 133
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>

			for(u8 j=13; j<16; j++){
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ec 59       	subi	r30, 0x9C	; 156
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	8d e0       	ldi	r24, 0x0D	; 13
    2ee8:	80 83       	st	Z, r24
    2eea:	13 c0       	rjmp	.+38     	; 0x2f12 <main+0x85c>
				CLCD_voidSetPosition( 2 , j );
    2eec:	fe 01       	movw	r30, r28
    2eee:	ec 59       	subi	r30, 0x9C	; 156
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	60 81       	ld	r22, Z
    2ef6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(2); // building
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
			CLCD_voidSetPosition( 1 , 1 );
			CLCD_voidSendString((u8 *)"Army ");
			CLCD_voidSetPosition( 1 , 12 );
			CLCD_voidSendString((u8 *)"Valeo");

			for(u8 j=13; j<16; j++){
    2f00:	de 01       	movw	r26, r28
    2f02:	ac 59       	subi	r26, 0x9C	; 156
    2f04:	bf 4f       	sbci	r27, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	ec 59       	subi	r30, 0x9C	; 156
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	8c 93       	st	X, r24
    2f12:	fe 01       	movw	r30, r28
    2f14:	ec 59       	subi	r30, 0x9C	; 156
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	80 31       	cpi	r24, 0x10	; 16
    2f1c:	38 f3       	brcs	.-50     	; 0x2eec <main+0x836>
				CLCD_voidSetPosition( 2 , j );
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , i);
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e5 59       	subi	r30, 0x95	; 149
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	60 81       	ld	r22, Z
    2f28:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(0); // person(H)
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>

			for(u8 j=1; j<5; j++){
    2f32:	fe 01       	movw	r30, r28
    2f34:	ed 59       	subi	r30, 0x9D	; 157
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	80 83       	st	Z, r24
    2f3c:	13 c0       	rjmp	.+38     	; 0x2f64 <main+0x8ae>
				CLCD_voidSetPosition( 2 , j );
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 59       	subi	r30, 0x9D	; 157
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	60 81       	ld	r22, Z
    2f48:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
				CLCD_voidSendData(2); // building
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , i);
			CLCD_voidSendData(0); // person(H)

			for(u8 j=1; j<5; j++){
    2f52:	de 01       	movw	r26, r28
    2f54:	ad 59       	subi	r26, 0x9D	; 157
    2f56:	bf 4f       	sbci	r27, 0xFF	; 255
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ed 59       	subi	r30, 0x9D	; 157
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 81       	ld	r24, Z
    2f60:	8f 5f       	subi	r24, 0xFF	; 255
    2f62:	8c 93       	st	X, r24
    2f64:	fe 01       	movw	r30, r28
    2f66:	ed 59       	subi	r30, 0x9D	; 157
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	85 30       	cpi	r24, 0x05	; 5
    2f6e:	38 f3       	brcs	.-50     	; 0x2f3e <main+0x888>
				CLCD_voidSetPosition( 2 , j );
				CLCD_voidSendData(2); // building
			}
			CLCD_voidSetPosition( 2 , 4 );
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	64 e0       	ldi	r22, 0x04	; 4
    2f74:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(0); // person
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a8 e4       	ldi	r26, 0x48	; 72
    2f84:	b3 e4       	ldi	r27, 0x43	; 67
    2f86:	8f a3       	std	Y+39, r24	; 0x27
    2f88:	98 a7       	std	Y+40, r25	; 0x28
    2f8a:	a9 a7       	std	Y+41, r26	; 0x29
    2f8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f90:	78 a5       	ldd	r23, Y+40	; 0x28
    2f92:	89 a5       	ldd	r24, Y+41	; 0x29
    2f94:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a ef       	ldi	r20, 0xFA	; 250
    2f9c:	54 e4       	ldi	r21, 0x44	; 68
    2f9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8b a3       	std	Y+35, r24	; 0x23
    2fa8:	9c a3       	std	Y+36, r25	; 0x24
    2faa:	ad a3       	std	Y+37, r26	; 0x25
    2fac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fae:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	2c f4       	brge	.+10     	; 0x2fd0 <main+0x91a>
		__ticks = 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9a a3       	std	Y+34, r25	; 0x22
    2fcc:	89 a3       	std	Y+33, r24	; 0x21
    2fce:	3f c0       	rjmp	.+126    	; 0x304e <main+0x998>
	else if (__tmp > 65535)
    2fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	3f ef       	ldi	r19, 0xFF	; 255
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	57 e4       	ldi	r21, 0x47	; 71
    2fe0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	4c f5       	brge	.+82     	; 0x303a <main+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe8:	6f a1       	ldd	r22, Y+39	; 0x27
    2fea:	78 a5       	ldd	r23, Y+40	; 0x28
    2fec:	89 a5       	ldd	r24, Y+41	; 0x29
    2fee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9a a3       	std	Y+34, r25	; 0x22
    300e:	89 a3       	std	Y+33, r24	; 0x21
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <main+0x97a>
    3012:	88 ec       	ldi	r24, 0xC8	; 200
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	98 a3       	std	Y+32, r25	; 0x20
    3018:	8f 8f       	std	Y+31, r24	; 0x1f
    301a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    301c:	98 a1       	ldd	r25, Y+32	; 0x20
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <main+0x968>
    3022:	98 a3       	std	Y+32, r25	; 0x20
    3024:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	89 a1       	ldd	r24, Y+33	; 0x21
    3028:	9a a1       	ldd	r25, Y+34	; 0x22
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	9a a3       	std	Y+34, r25	; 0x22
    302e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3030:	89 a1       	ldd	r24, Y+33	; 0x21
    3032:	9a a1       	ldd	r25, Y+34	; 0x22
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	69 f7       	brne	.-38     	; 0x3012 <main+0x95c>
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303a:	6b a1       	ldd	r22, Y+35	; 0x23
    303c:	7c a1       	ldd	r23, Y+36	; 0x24
    303e:	8d a1       	ldd	r24, Y+37	; 0x25
    3040:	9e a1       	ldd	r25, Y+38	; 0x26
    3042:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9a a3       	std	Y+34, r25	; 0x22
    304c:	89 a3       	std	Y+33, r24	; 0x21
    304e:	89 a1       	ldd	r24, Y+33	; 0x21
    3050:	9a a1       	ldd	r25, Y+34	; 0x22
    3052:	9e 8f       	std	Y+30, r25	; 0x1e
    3054:	8d 8f       	std	Y+29, r24	; 0x1d
    3056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3058:	9e 8d       	ldd	r25, Y+30	; 0x1e
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <main+0x9a4>
    305e:	9e 8f       	std	Y+30, r25	; 0x1e
    3060:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			CLCD_voidSetPosition( 2 , i-1 );
    3062:	fe 01       	movw	r30, r28
    3064:	e5 59       	subi	r30, 0x95	; 149
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	98 2f       	mov	r25, r24
    306c:	91 50       	subi	r25, 0x01	; 1
    306e:	82 e0       	ldi	r24, 0x02	; 2
    3070:	69 2f       	mov	r22, r25
    3072:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(3); // wire
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	a8 e4       	ldi	r26, 0x48	; 72
    3082:	b3 e4       	ldi	r27, 0x43	; 67
    3084:	89 8f       	std	Y+25, r24	; 0x19
    3086:	9a 8f       	std	Y+26, r25	; 0x1a
    3088:	ab 8f       	std	Y+27, r26	; 0x1b
    308a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308c:	69 8d       	ldd	r22, Y+25	; 0x19
    308e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	4a ef       	ldi	r20, 0xFA	; 250
    309a:	54 e4       	ldi	r21, 0x44	; 68
    309c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	8d 8b       	std	Y+21, r24	; 0x15
    30a6:	9e 8b       	std	Y+22, r25	; 0x16
    30a8:	af 8b       	std	Y+23, r26	; 0x17
    30aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ac:	6d 89       	ldd	r22, Y+21	; 0x15
    30ae:	7e 89       	ldd	r23, Y+22	; 0x16
    30b0:	8f 89       	ldd	r24, Y+23	; 0x17
    30b2:	98 8d       	ldd	r25, Y+24	; 0x18
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e8       	ldi	r20, 0x80	; 128
    30ba:	5f e3       	ldi	r21, 0x3F	; 63
    30bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	2c f4       	brge	.+10     	; 0x30ce <main+0xa18>
		__ticks = 1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	9c 8b       	std	Y+20, r25	; 0x14
    30ca:	8b 8b       	std	Y+19, r24	; 0x13
    30cc:	3f c0       	rjmp	.+126    	; 0x314c <main+0xa96>
	else if (__tmp > 65535)
    30ce:	6d 89       	ldd	r22, Y+21	; 0x15
    30d0:	7e 89       	ldd	r23, Y+22	; 0x16
    30d2:	8f 89       	ldd	r24, Y+23	; 0x17
    30d4:	98 8d       	ldd	r25, Y+24	; 0x18
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	3f ef       	ldi	r19, 0xFF	; 255
    30da:	4f e7       	ldi	r20, 0x7F	; 127
    30dc:	57 e4       	ldi	r21, 0x47	; 71
    30de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30e2:	18 16       	cp	r1, r24
    30e4:	4c f5       	brge	.+82     	; 0x3138 <main+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e6:	69 8d       	ldd	r22, Y+25	; 0x19
    30e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e2       	ldi	r20, 0x20	; 32
    30f4:	51 e4       	ldi	r21, 0x41	; 65
    30f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9c 8b       	std	Y+20, r25	; 0x14
    310c:	8b 8b       	std	Y+19, r24	; 0x13
    310e:	0f c0       	rjmp	.+30     	; 0x312e <main+0xa78>
    3110:	88 ec       	ldi	r24, 0xC8	; 200
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9a 8b       	std	Y+18, r25	; 0x12
    3116:	89 8b       	std	Y+17, r24	; 0x11
    3118:	89 89       	ldd	r24, Y+17	; 0x11
    311a:	9a 89       	ldd	r25, Y+18	; 0x12
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <main+0xa66>
    3120:	9a 8b       	std	Y+18, r25	; 0x12
    3122:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3124:	8b 89       	ldd	r24, Y+19	; 0x13
    3126:	9c 89       	ldd	r25, Y+20	; 0x14
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	9c 8b       	std	Y+20, r25	; 0x14
    312c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312e:	8b 89       	ldd	r24, Y+19	; 0x13
    3130:	9c 89       	ldd	r25, Y+20	; 0x14
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	69 f7       	brne	.-38     	; 0x3110 <main+0xa5a>
    3136:	14 c0       	rjmp	.+40     	; 0x3160 <main+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3138:	6d 89       	ldd	r22, Y+21	; 0x15
    313a:	7e 89       	ldd	r23, Y+22	; 0x16
    313c:	8f 89       	ldd	r24, Y+23	; 0x17
    313e:	98 8d       	ldd	r25, Y+24	; 0x18
    3140:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	9c 8b       	std	Y+20, r25	; 0x14
    314a:	8b 8b       	std	Y+19, r24	; 0x13
    314c:	8b 89       	ldd	r24, Y+19	; 0x13
    314e:	9c 89       	ldd	r25, Y+20	; 0x14
    3150:	98 8b       	std	Y+16, r25	; 0x10
    3152:	8f 87       	std	Y+15, r24	; 0x0f
    3154:	8f 85       	ldd	r24, Y+15	; 0x0f
    3156:	98 89       	ldd	r25, Y+16	; 0x10
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	f1 f7       	brne	.-4      	; 0x3158 <main+0xaa2>
    315c:	98 8b       	std	Y+16, r25	; 0x10
    315e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			CLCD_voidSetPosition( 2 , i );
    3160:	fe 01       	movw	r30, r28
    3162:	e5 59       	subi	r30, 0x95	; 149
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	60 81       	ld	r22, Z
    316a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
			CLCD_voidSendData(4); // trap
    316e:	84 e0       	ldi	r24, 0x04	; 4
    3170:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CLCD_voidSendData>
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidSendCommand>
			}
			CLCD_voidSetPosition( 2 , 14 );
			CLCD_voidSendData(4); // trap

		}
		for(i = 14; i> 4; i--){
    317a:	de 01       	movw	r26, r28
    317c:	a5 59       	subi	r26, 0x95	; 149
    317e:	bf 4f       	sbci	r27, 0xFF	; 255
    3180:	fe 01       	movw	r30, r28
    3182:	e5 59       	subi	r30, 0x95	; 149
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 81       	ld	r24, Z
    3188:	81 50       	subi	r24, 0x01	; 1
    318a:	8c 93       	st	X, r24
    318c:	fe 01       	movw	r30, r28
    318e:	e5 59       	subi	r30, 0x95	; 149
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	80 81       	ld	r24, Z
    3194:	85 30       	cpi	r24, 0x05	; 5
    3196:	08 f0       	brcs	.+2      	; 0x319a <main+0xae4>
    3198:	93 ce       	rjmp	.-730    	; 0x2ec0 <main+0x80a>

			CLCD_voidSetPosition( 2 , i );
			CLCD_voidSendData(4); // trap
			CLCD_voidSendCommand(CLCD_CLR_DISPLAY);//display clear
		}
		CLCD_voidSetPosition( 1 , 1 );
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	61 e0       	ldi	r22, 0x01	; 1
    319e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CLCD_voidSetPosition>
		CLCD_voidSendString((u8 *)"To be Continue..");
    31a2:	86 e9       	ldi	r24, 0x96	; 150
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendString>
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e4       	ldi	r25, 0x40	; 64
    31ae:	ac e9       	ldi	r26, 0x9C	; 156
    31b0:	b5 e4       	ldi	r27, 0x45	; 69
    31b2:	8b 87       	std	Y+11, r24	; 0x0b
    31b4:	9c 87       	std	Y+12, r25	; 0x0c
    31b6:	ad 87       	std	Y+13, r26	; 0x0d
    31b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    31bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31be:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a ef       	ldi	r20, 0xFA	; 250
    31c8:	54 e4       	ldi	r21, 0x44	; 68
    31ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	8f 83       	std	Y+7, r24	; 0x07
    31d4:	98 87       	std	Y+8, r25	; 0x08
    31d6:	a9 87       	std	Y+9, r26	; 0x09
    31d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31da:	6f 81       	ldd	r22, Y+7	; 0x07
    31dc:	78 85       	ldd	r23, Y+8	; 0x08
    31de:	89 85       	ldd	r24, Y+9	; 0x09
    31e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e8       	ldi	r20, 0x80	; 128
    31e8:	5f e3       	ldi	r21, 0x3F	; 63
    31ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31ee:	88 23       	and	r24, r24
    31f0:	2c f4       	brge	.+10     	; 0x31fc <main+0xb46>
		__ticks = 1;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	8d 83       	std	Y+5, r24	; 0x05
    31fa:	3f c0       	rjmp	.+126    	; 0x327a <main+0xbc4>
	else if (__tmp > 65535)
    31fc:	6f 81       	ldd	r22, Y+7	; 0x07
    31fe:	78 85       	ldd	r23, Y+8	; 0x08
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	3f ef       	ldi	r19, 0xFF	; 255
    3208:	4f e7       	ldi	r20, 0x7F	; 127
    320a:	57 e4       	ldi	r21, 0x47	; 71
    320c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3210:	18 16       	cp	r1, r24
    3212:	4c f5       	brge	.+82     	; 0x3266 <main+0xbb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3214:	6b 85       	ldd	r22, Y+11	; 0x0b
    3216:	7c 85       	ldd	r23, Y+12	; 0x0c
    3218:	8d 85       	ldd	r24, Y+13	; 0x0d
    321a:	9e 85       	ldd	r25, Y+14	; 0x0e
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e2       	ldi	r20, 0x20	; 32
    3222:	51 e4       	ldi	r21, 0x41	; 65
    3224:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	0f c0       	rjmp	.+30     	; 0x325c <main+0xba6>
    323e:	88 ec       	ldi	r24, 0xC8	; 200
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9c 83       	std	Y+4, r25	; 0x04
    3244:	8b 83       	std	Y+3, r24	; 0x03
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	9c 81       	ldd	r25, Y+4	; 0x04
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <main+0xb94>
    324e:	9c 83       	std	Y+4, r25	; 0x04
    3250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3252:	8d 81       	ldd	r24, Y+5	; 0x05
    3254:	9e 81       	ldd	r25, Y+6	; 0x06
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325c:	8d 81       	ldd	r24, Y+5	; 0x05
    325e:	9e 81       	ldd	r25, Y+6	; 0x06
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	69 f7       	brne	.-38     	; 0x323e <main+0xb88>
    3264:	58 ca       	rjmp	.-2896   	; 0x2716 <main+0x60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3266:	6f 81       	ldd	r22, Y+7	; 0x07
    3268:	78 85       	ldd	r23, Y+8	; 0x08
    326a:	89 85       	ldd	r24, Y+9	; 0x09
    326c:	9a 85       	ldd	r25, Y+10	; 0x0a
    326e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
    327a:	8d 81       	ldd	r24, Y+5	; 0x05
    327c:	9e 81       	ldd	r25, Y+6	; 0x06
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	9a 81       	ldd	r25, Y+2	; 0x02
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <main+0xbd0>
    328a:	9a 83       	std	Y+2, r25	; 0x02
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	43 ca       	rjmp	.-2938   	; 0x2716 <main+0x60>

00003290 <__udivmodsi4>:
    3290:	a1 e2       	ldi	r26, 0x21	; 33
    3292:	1a 2e       	mov	r1, r26
    3294:	aa 1b       	sub	r26, r26
    3296:	bb 1b       	sub	r27, r27
    3298:	fd 01       	movw	r30, r26
    329a:	0d c0       	rjmp	.+26     	; 0x32b6 <__udivmodsi4_ep>

0000329c <__udivmodsi4_loop>:
    329c:	aa 1f       	adc	r26, r26
    329e:	bb 1f       	adc	r27, r27
    32a0:	ee 1f       	adc	r30, r30
    32a2:	ff 1f       	adc	r31, r31
    32a4:	a2 17       	cp	r26, r18
    32a6:	b3 07       	cpc	r27, r19
    32a8:	e4 07       	cpc	r30, r20
    32aa:	f5 07       	cpc	r31, r21
    32ac:	20 f0       	brcs	.+8      	; 0x32b6 <__udivmodsi4_ep>
    32ae:	a2 1b       	sub	r26, r18
    32b0:	b3 0b       	sbc	r27, r19
    32b2:	e4 0b       	sbc	r30, r20
    32b4:	f5 0b       	sbc	r31, r21

000032b6 <__udivmodsi4_ep>:
    32b6:	66 1f       	adc	r22, r22
    32b8:	77 1f       	adc	r23, r23
    32ba:	88 1f       	adc	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	1a 94       	dec	r1
    32c0:	69 f7       	brne	.-38     	; 0x329c <__udivmodsi4_loop>
    32c2:	60 95       	com	r22
    32c4:	70 95       	com	r23
    32c6:	80 95       	com	r24
    32c8:	90 95       	com	r25
    32ca:	9b 01       	movw	r18, r22
    32cc:	ac 01       	movw	r20, r24
    32ce:	bd 01       	movw	r22, r26
    32d0:	cf 01       	movw	r24, r30
    32d2:	08 95       	ret

000032d4 <__prologue_saves__>:
    32d4:	2f 92       	push	r2
    32d6:	3f 92       	push	r3
    32d8:	4f 92       	push	r4
    32da:	5f 92       	push	r5
    32dc:	6f 92       	push	r6
    32de:	7f 92       	push	r7
    32e0:	8f 92       	push	r8
    32e2:	9f 92       	push	r9
    32e4:	af 92       	push	r10
    32e6:	bf 92       	push	r11
    32e8:	cf 92       	push	r12
    32ea:	df 92       	push	r13
    32ec:	ef 92       	push	r14
    32ee:	ff 92       	push	r15
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	ca 1b       	sub	r28, r26
    32fe:	db 0b       	sbc	r29, r27
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	09 94       	ijmp

0000330c <__epilogue_restores__>:
    330c:	2a 88       	ldd	r2, Y+18	; 0x12
    330e:	39 88       	ldd	r3, Y+17	; 0x11
    3310:	48 88       	ldd	r4, Y+16	; 0x10
    3312:	5f 84       	ldd	r5, Y+15	; 0x0f
    3314:	6e 84       	ldd	r6, Y+14	; 0x0e
    3316:	7d 84       	ldd	r7, Y+13	; 0x0d
    3318:	8c 84       	ldd	r8, Y+12	; 0x0c
    331a:	9b 84       	ldd	r9, Y+11	; 0x0b
    331c:	aa 84       	ldd	r10, Y+10	; 0x0a
    331e:	b9 84       	ldd	r11, Y+9	; 0x09
    3320:	c8 84       	ldd	r12, Y+8	; 0x08
    3322:	df 80       	ldd	r13, Y+7	; 0x07
    3324:	ee 80       	ldd	r14, Y+6	; 0x06
    3326:	fd 80       	ldd	r15, Y+5	; 0x05
    3328:	0c 81       	ldd	r16, Y+4	; 0x04
    332a:	1b 81       	ldd	r17, Y+3	; 0x03
    332c:	aa 81       	ldd	r26, Y+2	; 0x02
    332e:	b9 81       	ldd	r27, Y+1	; 0x01
    3330:	ce 0f       	add	r28, r30
    3332:	d1 1d       	adc	r29, r1
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	ed 01       	movw	r28, r26
    3340:	08 95       	ret

00003342 <_exit>:
    3342:	f8 94       	cli

00003344 <__stop_program>:
    3344:	ff cf       	rjmp	.-2      	; 0x3344 <__stop_program>
