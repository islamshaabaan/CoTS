
CoTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ad4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00005ad4  00005b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000444c  00000000  00000000  00005b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011f7  00000000  00000000  00009fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000b1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000b317  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000d4eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000e5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000f570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <main>
      7a:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 31 2d 	jmp	0x5a62	; 0x5a62 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4d 2d 	jmp	0x5a9a	; 0x5a9a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 31 2d 	jmp	0x5a62	; 0x5a62 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4d 2d 	jmp	0x5a9a	; 0x5a9a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 55 2d 	jmp	0x5aaa	; 0x5aaa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 41 2d 	jmp	0x5a82	; 0x5a82 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 5d 2d 	jmp	0x5aba	; 0x5aba <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidSetupPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetupPinDirection (u8 copy_u8PortID,u8 copy_u8PinID,u8 copy_u8Directoin){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Directoin > 2){
		// Do nothing
	}

	switch (copy_u8Directoin){
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	39 87       	std	Y+9, r19	; 0x09
     cb0:	28 87       	std	Y+8, r18	; 0x08
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <DIO_voidSetupPinDirection+0x2e>
     cba:	75 c0       	rjmp	.+234    	; 0xda6 <DIO_voidSetupPinDirection+0x118>
     cbc:	28 85       	ldd	r18, Y+8	; 0x08
     cbe:	39 85       	ldd	r19, Y+9	; 0x09
     cc0:	21 30       	cpi	r18, 0x01	; 1
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <DIO_voidSetupPinDirection+0x3a>
     cc6:	e2 c0       	rjmp	.+452    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
	case DIO_OUTPUT :
		switch(copy_u8PortID)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	49 f1       	breq	.+82     	; 0xd2e <DIO_voidSetupPinDirection+0xa0>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_voidSetupPinDirection+0x62>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	61 f0       	breq	.+24     	; 0xd06 <DIO_voidSetupPinDirection+0x78>
     cee:	ce c0       	rjmp	.+412    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
     cf0:	2e 81       	ldd	r18, Y+6	; 0x06
     cf2:	3f 81       	ldd	r19, Y+7	; 0x07
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	71 f1       	breq	.+92     	; 0xd56 <DIO_voidSetupPinDirection+0xc8>
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	e9 f1       	breq	.+122    	; 0xd7e <DIO_voidSetupPinDirection+0xf0>
     d04:	c3 c0       	rjmp	.+390    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(DDRA_REG,copy_u8PinID);
     d06:	aa e3       	ldi	r26, 0x3A	; 58
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e3       	ldi	r30, 0x3A	; 58
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_voidSetupPinDirection+0x96>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_voidSetupPinDirection+0x92>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	af c0       	rjmp	.+350    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTB :
			SET_BIT(DDRB_REG,copy_u8PinID);
     d2e:	a7 e3       	ldi	r26, 0x37	; 55
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e3       	ldi	r30, 0x37	; 55
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_voidSetupPinDirection+0xbe>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_voidSetupPinDirection+0xba>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	9b c0       	rjmp	.+310    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(DDRC_REG,copy_u8PinID);
     d56:	a4 e3       	ldi	r26, 0x34	; 52
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e4 e3       	ldi	r30, 0x34	; 52
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_voidSetupPinDirection+0xe6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_voidSetupPinDirection+0xe2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	87 c0       	rjmp	.+270    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTD :
			SET_BIT(DDRD_REG,copy_u8PinID);
     d7e:	a1 e3       	ldi	r26, 0x31	; 49
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e3       	ldi	r30, 0x31	; 49
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_voidSetupPinDirection+0x10e>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_voidSetupPinDirection+0x10a>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	73 c0       	rjmp	.+230    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
		}
		break;


		case DIO_INPUT :
			switch(copy_u8PortID){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	59 f1       	breq	.+86     	; 0xe10 <DIO_voidSetupPinDirection+0x182>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_voidSetupPinDirection+0x140>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f0       	breq	.+26     	; 0xde6 <DIO_voidSetupPinDirection+0x158>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <DIO_voidSetupPinDirection+0x1ac>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <DIO_voidSetupPinDirection+0x156>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <DIO_voidSetupPinDirection+0x1d6>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
			case DIO_PORTA :
				CLR_BIT(DDRA_REG,copy_u8PinID);
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_voidSetupPinDirection+0x176>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_voidSetupPinDirection+0x172>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	3e c0       	rjmp	.+124    	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTB :
				CLR_BIT(DDRB_REG,copy_u8PinID);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_voidSetupPinDirection+0x1a0>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_voidSetupPinDirection+0x19c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(DDRC_REG,copy_u8PinID);
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_voidSetupPinDirection+0x1ca>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_voidSetupPinDirection+0x1c6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTD :
				CLR_BIT(DDRD_REG,copy_u8PinID);
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidSetupPinDirection+0x1f4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidSetupPinDirection+0x1f0>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
				break;
			}
			break;
	}
}
     e8c:	29 96       	adiw	r28, 0x09	; 9
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	6a 83       	std	Y+2, r22	; 0x02
     eb6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Value)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <DIO_voidSetPinValue+0x2e>
     eca:	75 c0       	rjmp	.+234    	; 0xfb6 <DIO_voidSetPinValue+0x118>
     ecc:	28 85       	ldd	r18, Y+8	; 0x08
     ece:	39 85       	ldd	r19, Y+9	; 0x09
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <DIO_voidSetPinValue+0x3a>
     ed6:	e2 c0       	rjmp	.+452    	; 0x109c <DIO_voidSetPinValue+0x1fe>
	{
	case DIO_HIGH :
		switch(Copy_u8PortID)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	49 f1       	breq	.+82     	; 0xf3e <DIO_voidSetPinValue+0xa0>
     eec:	2e 81       	ldd	r18, Y+6	; 0x06
     eee:	3f 81       	ldd	r19, Y+7	; 0x07
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <DIO_voidSetPinValue+0x62>
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	61 f0       	breq	.+24     	; 0xf16 <DIO_voidSetPinValue+0x78>
     efe:	ce c0       	rjmp	.+412    	; 0x109c <DIO_voidSetPinValue+0x1fe>
     f00:	2e 81       	ldd	r18, Y+6	; 0x06
     f02:	3f 81       	ldd	r19, Y+7	; 0x07
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	71 f1       	breq	.+92     	; 0xf66 <DIO_voidSetPinValue+0xc8>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	e9 f1       	breq	.+122    	; 0xf8e <DIO_voidSetPinValue+0xf0>
     f14:	c3 c0       	rjmp	.+390    	; 0x109c <DIO_voidSetPinValue+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(PORTA_REG , Copy_u8PinID);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinValue+0x96>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinValue+0x92>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	af c0       	rjmp	.+350    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTB :
			SET_BIT(PORTB_REG , Copy_u8PinID);
     f3e:	a8 e3       	ldi	r26, 0x38	; 56
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e8 e3       	ldi	r30, 0x38	; 56
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_voidSetPinValue+0xbe>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_voidSetPinValue+0xba>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	9b c0       	rjmp	.+310    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(PORTC_REG , Copy_u8PinID);
     f66:	a5 e3       	ldi	r26, 0x35	; 53
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e5 e3       	ldi	r30, 0x35	; 53
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_voidSetPinValue+0xe6>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_voidSetPinValue+0xe2>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	87 c0       	rjmp	.+270    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTD :
			SET_BIT(PORTD_REG , Copy_u8PinID);
     f8e:	a2 e3       	ldi	r26, 0x32	; 50
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_voidSetPinValue+0x10e>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_voidSetPinValue+0x10a>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	73 c0       	rjmp	.+230    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			break;
		}
		break;
		case DIO_LOW :
			switch(Copy_u8PortID)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <DIO_voidSetPinValue+0x182>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <DIO_voidSetPinValue+0x140>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_voidSetPinValue+0x158>
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <DIO_voidSetPinValue+0x1fe>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_voidSetPinValue+0x1ac>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_voidSetPinValue+0x156>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <DIO_voidSetPinValue+0x1d6>
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA :
				CLR_BIT(PORTA_REG , Copy_u8PinID);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x176>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x172>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3e c0       	rjmp	.+124    	; 0x109c <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTB :
				CLR_BIT(PORTB_REG , Copy_u8PinID);
    1020:	a8 e3       	ldi	r26, 0x38	; 56
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e3       	ldi	r30, 0x38	; 56
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_voidSetPinValue+0x1a0>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_voidSetPinValue+0x19c>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	29 c0       	rjmp	.+82     	; 0x109c <DIO_voidSetPinValue+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(PORTC_REG , Copy_u8PinID);
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidSetPinValue+0x1ca>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidSetPinValue+0x1c6>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	14 c0       	rjmp	.+40     	; 0x109c <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTD :
				CLR_BIT(PORTD_REG , Copy_u8PinID);
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_voidSetPinValue+0x1f4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_voidSetPinValue+0x1f0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
			}
			break ;
	}


}
    109c:	29 96       	adiw	r28, 0x09	; 9
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_u8GetPinValue+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_u8GetPinValue+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue = 255; // check error state
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	3d 83       	std	Y+5, r19	; 0x05
    10cc:	2c 83       	std	Y+4, r18	; 0x04
    10ce:	4c 81       	ldd	r20, Y+4	; 0x04
    10d0:	5d 81       	ldd	r21, Y+5	; 0x05
    10d2:	41 30       	cpi	r20, 0x01	; 1
    10d4:	51 05       	cpc	r21, r1
    10d6:	41 f1       	breq	.+80     	; 0x1128 <DIO_u8GetPinValue+0x7a>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	91 05       	cpc	r25, r1
    10e0:	34 f4       	brge	.+12     	; 0x10ee <DIO_u8GetPinValue+0x40>
    10e2:	2c 81       	ldd	r18, Y+4	; 0x04
    10e4:	3d 81       	ldd	r19, Y+5	; 0x05
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_u8GetPinValue+0x56>
    10ec:	52 c0       	rjmp	.+164    	; 0x1192 <DIO_u8GetPinValue+0xe4>
    10ee:	4c 81       	ldd	r20, Y+4	; 0x04
    10f0:	5d 81       	ldd	r21, Y+5	; 0x05
    10f2:	42 30       	cpi	r20, 0x02	; 2
    10f4:	51 05       	cpc	r21, r1
    10f6:	51 f1       	breq	.+84     	; 0x114c <DIO_u8GetPinValue+0x9e>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	b9 f1       	breq	.+110    	; 0x1170 <DIO_u8GetPinValue+0xc2>
    1102:	47 c0       	rjmp	.+142    	; 0x1192 <DIO_u8GetPinValue+0xe4>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = GET_BIT(PINA_REG, Copy_u8PinID);
    1104:	e9 e3       	ldi	r30, 0x39	; 57
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_u8GetPinValue+0x6e>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_u8GetPinValue+0x6a>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	35 c0       	rjmp	.+106    	; 0x1192 <DIO_u8GetPinValue+0xe4>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = GET_BIT(PINB_REG, Copy_u8PinID);
    1128:	e6 e3       	ldi	r30, 0x36	; 54
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_u8GetPinValue+0x92>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_u8GetPinValue+0x8e>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	23 c0       	rjmp	.+70     	; 0x1192 <DIO_u8GetPinValue+0xe4>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = GET_BIT(PINC_REG, Copy_u8PinID);
    114c:	e3 e3       	ldi	r30, 0x33	; 51
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_u8GetPinValue+0xb6>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_u8GetPinValue+0xb2>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	11 c0       	rjmp	.+34     	; 0x1192 <DIO_u8GetPinValue+0xe4>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = GET_BIT(PIND_REG, Copy_u8PinID);
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8GetPinValue+0xda>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8GetPinValue+0xd6>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    1192:	89 81       	ldd	r24, Y+1	; 0x01


}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection    (u8 Copy_u8PortID , u8 Copy_u8Direction ){
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	28 97       	sbiw	r28, 0x08	; 8
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Direction)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	38 87       	std	Y+8, r19	; 0x08
    11c4:	2f 83       	std	Y+7, r18	; 0x07
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	c9 f1       	breq	.+114    	; 0x1240 <DIO_voidSetPortDirection+0x9c>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	21 30       	cpi	r18, 0x01	; 1
    11d4:	31 05       	cpc	r19, r1
    11d6:	09 f0       	breq	.+2      	; 0x11da <DIO_voidSetPortDirection+0x36>
    11d8:	61 c0       	rjmp	.+194    	; 0x129c <DIO_voidSetPortDirection+0xf8>
	{
	case DIO_OUTPUT :
		switch(Copy_u8PortID)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	2d 83       	std	Y+5, r18	; 0x05
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <DIO_voidSetPortDirection+0x7e>
    11ee:	2d 81       	ldd	r18, Y+5	; 0x05
    11f0:	3e 81       	ldd	r19, Y+6	; 0x06
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_voidSetPortDirection+0x5e>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_voidSetPortDirection+0x74>
    1200:	4d c0       	rjmp	.+154    	; 0x129c <DIO_voidSetPortDirection+0xf8>
    1202:	2d 81       	ldd	r18, Y+5	; 0x05
    1204:	3e 81       	ldd	r19, Y+6	; 0x06
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <DIO_voidSetPortDirection+0x88>
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <DIO_voidSetPortDirection+0x92>
    1216:	42 c0       	rjmp	.+132    	; 0x129c <DIO_voidSetPortDirection+0xf8>
		{
		case DIO_PORTA :
			DDRA_REG = 0xff ; // 255 0b11111111
    1218:	ea e3       	ldi	r30, 0x3A	; 58
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	80 83       	st	Z, r24
    1220:	3d c0       	rjmp	.+122    	; 0x129c <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTB :
			DDRB_REG = 0xff;
    1222:	e7 e3       	ldi	r30, 0x37	; 55
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	80 83       	st	Z, r24
    122a:	38 c0       	rjmp	.+112    	; 0x129c <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTC :
			DDRC_REG = 0xff;
    122c:	e4 e3       	ldi	r30, 0x34	; 52
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	80 83       	st	Z, r24
    1234:	33 c0       	rjmp	.+102    	; 0x129c <DIO_voidSetPortDirection+0xf8>

			break;
		case DIO_PORTD :
			DDRD_REG = 0xff;
    1236:	e1 e3       	ldi	r30, 0x31	; 49
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	80 83       	st	Z, r24
    123e:	2e c0       	rjmp	.+92     	; 0x129c <DIO_voidSetPortDirection+0xf8>
		default:
			break;
		}
		break ;
		case DIO_INPUT :
			switch(Copy_u8PortID)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3c 83       	std	Y+4, r19	; 0x04
    1248:	2b 83       	std	Y+3, r18	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	c9 f0       	breq	.+50     	; 0x1286 <DIO_voidSetPortDirection+0xe2>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <DIO_voidSetPortDirection+0xc4>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 f0       	breq	.+24     	; 0x127e <DIO_voidSetPortDirection+0xda>
    1266:	1a c0       	rjmp	.+52     	; 0x129c <DIO_voidSetPortDirection+0xf8>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	71 f0       	breq	.+28     	; 0x128e <DIO_voidSetPortDirection+0xea>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	69 f0       	breq	.+26     	; 0x1296 <DIO_voidSetPortDirection+0xf2>
    127c:	0f c0       	rjmp	.+30     	; 0x129c <DIO_voidSetPortDirection+0xf8>
			{
			case DIO_PORTA :
				DDRA_REG = 0x00 ; // 255 0b11111111
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	10 82       	st	Z, r1
    1284:	0b c0       	rjmp	.+22     	; 0x129c <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTB :
				DDRB_REG = 0;
    1286:	e7 e3       	ldi	r30, 0x37	; 55
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	10 82       	st	Z, r1
    128c:	07 c0       	rjmp	.+14     	; 0x129c <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTC :
				DDRC_REG = 0x00;
    128e:	e4 e3       	ldi	r30, 0x34	; 52
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
    1294:	03 c0       	rjmp	.+6      	; 0x129c <DIO_voidSetPortDirection+0xf8>

				break;
			case DIO_PORTD :
				DDRD_REG = 0x00;
    1296:	e1 e3       	ldi	r30, 0x31	; 49
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
			}
			break;
	}


}
    129c:	28 96       	adiw	r28, 0x08	; 8
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <DIO_voidSetPortValue>:

void DIO_voidSetPortValue    (u8 Copy_u8PortID , u8 Copy_u8Value )
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_voidSetPortValue+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <DIO_voidSetPortValue+0x8>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3c 83       	std	Y+4, r19	; 0x04
    12c6:	2b 83       	std	Y+3, r18	; 0x03
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	91 05       	cpc	r25, r1
    12d0:	d1 f0       	breq	.+52     	; 0x1306 <DIO_voidSetPortValue+0x58>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	2c f4       	brge	.+10     	; 0x12e6 <DIO_voidSetPortValue+0x38>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	61 f0       	breq	.+24     	; 0x12fc <DIO_voidSetPortValue+0x4e>
    12e4:	1e c0       	rjmp	.+60     	; 0x1322 <DIO_voidSetPortValue+0x74>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	81 f0       	breq	.+32     	; 0x1310 <DIO_voidSetPortValue+0x62>
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	81 f0       	breq	.+32     	; 0x131a <DIO_voidSetPortValue+0x6c>
    12fa:	13 c0       	rjmp	.+38     	; 0x1322 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA :
		PORTA_REG = Copy_u8Value ;
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB :
		PORTB_REG = Copy_u8Value ;
    1306:	e8 e3       	ldi	r30, 0x38	; 56
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC :
		PORTC_REG = Copy_u8Value ;
    1310:	e5 e3       	ldi	r30, 0x35	; 53
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <DIO_voidSetPortValue+0x74>

		break;
	case DIO_PORTD :
		PORTD_REG = Copy_u8Value ;
    131a:	e2 e3       	ldi	r30, 0x32	; 50
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
		break;
	default:
		break;
	}

}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8PortID){
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_u8GetPortValue+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_u8GetPortValue+0x8>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnedValue = 255; // check error state
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3c 83       	std	Y+4, r19	; 0x04
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	d1 f0       	breq	.+52     	; 0x138a <DIO_u8GetPortValue+0x5a>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <DIO_u8GetPortValue+0x3a>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <DIO_u8GetPortValue+0x50>
    1368:	1e c0       	rjmp	.+60     	; 0x13a6 <DIO_u8GetPortValue+0x76>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <DIO_u8GetPortValue+0x64>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	81 f0       	breq	.+32     	; 0x139e <DIO_u8GetPortValue+0x6e>
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <DIO_u8GetPortValue+0x76>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = PINA_REG;
    1380:	e9 e3       	ldi	r30, 0x39	; 57
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = PINB_REG;
    138a:	e6 e3       	ldi	r30, 0x36	; 54
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = PINC_REG;
    1394:	e3 e3       	ldi	r30, 0x33	; 51
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = PIND_REG;
    139e:	e0 e3       	ldi	r30, 0x30	; 48
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01


}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <STEPPER_voidInit>:
#include"STEPPER_private.h"
#include<util/delay.h>


void STEPPER_voidInit( void )
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	//MAKING ALL PINS OUTPUT
	DIO_voidSetupPinDirection(STEPPER_PORT, STEPPER_BLUE_PIN  , DIO_OUTPUT);
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_OUTPUT);
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(STEPPER_PORT, STEPPER_PINK_PIN  , DIO_OUTPUT);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_OUTPUT);
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	63 e0       	ldi	r22, 0x03	; 3
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>

	//DISABLE ALL PINS
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN, DIO_HIGH);
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN, DIO_HIGH);
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	63 e0       	ldi	r22, 0x03	; 3
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <STEPPER_voidOn>:

void STEPPER_voidOn ( u8 Copy_u8StepType , u8 Copy_u8Direction , u16 Copy_u16Degree)
{
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	cc 55       	subi	r28, 0x5C	; 92
    1422:	d1 40       	sbci	r29, 0x01	; 1
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	fe 01       	movw	r30, r28
    1430:	e7 5a       	subi	r30, 0xA7	; 167
    1432:	fe 4f       	sbci	r31, 0xFE	; 254
    1434:	80 83       	st	Z, r24
    1436:	fe 01       	movw	r30, r28
    1438:	e6 5a       	subi	r30, 0xA6	; 166
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	60 83       	st	Z, r22
    143e:	fe 01       	movw	r30, r28
    1440:	e5 5a       	subi	r30, 0xA5	; 165
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	51 83       	std	Z+1, r21	; 0x01
    1446:	40 83       	st	Z, r20
	 *
	 * NOTE: in our Kit the unipolar stepper with 2 coils are
	 * 		  common top connected to Vcc so the activated state = LOW
	 * */

	u16 Local_u16Counter=0;
    1448:	fe 01       	movw	r30, r28
    144a:	e9 5a       	subi	r30, 0xA9	; 169
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	11 82       	std	Z+1, r1	; 0x01
    1450:	10 82       	st	Z, r1
	u32 Local_u16FullSteps = ( ( 2048*Copy_u16Degree ) / 360 );
    1452:	fe 01       	movw	r30, r28
    1454:	e5 5a       	subi	r30, 0xA5	; 165
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	98 2f       	mov	r25, r24
    145e:	88 27       	eor	r24, r24
    1460:	99 0f       	add	r25, r25
    1462:	99 0f       	add	r25, r25
    1464:	99 0f       	add	r25, r25
    1466:	28 e6       	ldi	r18, 0x68	; 104
    1468:	31 e0       	ldi	r19, 0x01	; 1
    146a:	b9 01       	movw	r22, r18
    146c:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <__udivmodhi4>
    1470:	cb 01       	movw	r24, r22
    1472:	fe 01       	movw	r30, r28
    1474:	ed 5a       	subi	r30, 0xAD	; 173
    1476:	fe 4f       	sbci	r31, 0xFE	; 254
    1478:	cc 01       	movw	r24, r24
    147a:	a0 e0       	ldi	r26, 0x00	; 0
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	80 83       	st	Z, r24
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	a2 83       	std	Z+2, r26	; 0x02
    1484:	b3 83       	std	Z+3, r27	; 0x03
	if(Copy_u8StepType == STEPPER_FULL_STEP)
    1486:	fe 01       	movw	r30, r28
    1488:	e7 5a       	subi	r30, 0xA7	; 167
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <STEPPER_voidOn+0x80>
    1492:	a9 c6       	rjmp	.+3410   	; 0x21e6 <STEPPER_voidOn+0xdd2>
	{
		if (Copy_u8Direction == STEPPER_CLOCK_WISE)
    1494:	fe 01       	movw	r30, r28
    1496:	e6 5a       	subi	r30, 0xA6	; 166
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	80 81       	ld	r24, Z
    149c:	88 23       	and	r24, r24
    149e:	09 f0       	breq	.+2      	; 0x14a2 <STEPPER_voidOn+0x8e>
    14a0:	4c c3       	rjmp	.+1688   	; 0x1b3a <STEPPER_voidOn+0x726>
		{
			for (Local_u16Counter=0 ; Local_u16Counter < ( Local_u16FullSteps / 4 )  ; Local_u16Counter++)
    14a2:	fe 01       	movw	r30, r28
    14a4:	e9 5a       	subi	r30, 0xA9	; 169
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	11 82       	std	Z+1, r1	; 0x01
    14aa:	10 82       	st	Z, r1
    14ac:	27 c3       	rjmp	.+1614   	; 0x1afc <STEPPER_voidOn+0x6e8>
			{
				//STEP1
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	62 e0       	ldi	r22, 0x02	; 2
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	63 e0       	ldi	r22, 0x03	; 3
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e3 5b       	subi	r30, 0xB3	; 179
    14da:	fe 4f       	sbci	r31, 0xFE	; 254
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	a0 ea       	ldi	r26, 0xA0	; 160
    14e2:	b1 e4       	ldi	r27, 0x41	; 65
    14e4:	80 83       	st	Z, r24
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	a2 83       	std	Z+2, r26	; 0x02
    14ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ec:	8e 01       	movw	r16, r28
    14ee:	07 5b       	subi	r16, 0xB7	; 183
    14f0:	1e 4f       	sbci	r17, 0xFE	; 254
    14f2:	fe 01       	movw	r30, r28
    14f4:	e3 5b       	subi	r30, 0xB3	; 179
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4a ef       	ldi	r20, 0xFA	; 250
    1506:	54 e4       	ldi	r21, 0x44	; 68
    1508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	f8 01       	movw	r30, r16
    1512:	80 83       	st	Z, r24
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	a2 83       	std	Z+2, r26	; 0x02
    1518:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    151a:	fe 01       	movw	r30, r28
    151c:	e7 5b       	subi	r30, 0xB7	; 183
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	44 f4       	brge	.+16     	; 0x1548 <STEPPER_voidOn+0x134>
		__ticks = 1;
    1538:	fe 01       	movw	r30, r28
    153a:	e9 5b       	subi	r30, 0xB9	; 185
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
    1546:	64 c0       	rjmp	.+200    	; 0x1610 <STEPPER_voidOn+0x1fc>
	else if (__tmp > 65535)
    1548:	fe 01       	movw	r30, r28
    154a:	e7 5b       	subi	r30, 0xB7	; 183
    154c:	fe 4f       	sbci	r31, 0xFE	; 254
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	0c f0       	brlt	.+2      	; 0x1568 <STEPPER_voidOn+0x154>
    1566:	43 c0       	rjmp	.+134    	; 0x15ee <STEPPER_voidOn+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	fe 01       	movw	r30, r28
    156a:	e3 5b       	subi	r30, 0xB3	; 179
    156c:	fe 4f       	sbci	r31, 0xFE	; 254
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8e 01       	movw	r16, r28
    1588:	09 5b       	subi	r16, 0xB9	; 185
    158a:	1e 4f       	sbci	r17, 0xFE	; 254
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	f8 01       	movw	r30, r16
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
    159e:	1f c0       	rjmp	.+62     	; 0x15de <STEPPER_voidOn+0x1ca>
    15a0:	fe 01       	movw	r30, r28
    15a2:	eb 5b       	subi	r30, 0xBB	; 187
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	88 ec       	ldi	r24, 0xC8	; 200
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ae:	fe 01       	movw	r30, r28
    15b0:	eb 5b       	subi	r30, 0xBB	; 187
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <STEPPER_voidOn+0x1a4>
    15bc:	fe 01       	movw	r30, r28
    15be:	eb 5b       	subi	r30, 0xBB	; 187
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c6:	de 01       	movw	r26, r28
    15c8:	a9 5b       	subi	r26, 0xB9	; 185
    15ca:	be 4f       	sbci	r27, 0xFE	; 254
    15cc:	fe 01       	movw	r30, r28
    15ce:	e9 5b       	subi	r30, 0xB9	; 185
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	80 81       	ld	r24, Z
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	9c 93       	st	X, r25
    15dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15de:	fe 01       	movw	r30, r28
    15e0:	e9 5b       	subi	r30, 0xB9	; 185
    15e2:	fe 4f       	sbci	r31, 0xFE	; 254
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	d1 f6       	brne	.-76     	; 0x15a0 <STEPPER_voidOn+0x18c>
    15ec:	27 c0       	rjmp	.+78     	; 0x163c <STEPPER_voidOn+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ee:	8e 01       	movw	r16, r28
    15f0:	09 5b       	subi	r16, 0xB9	; 185
    15f2:	1e 4f       	sbci	r17, 0xFE	; 254
    15f4:	fe 01       	movw	r30, r28
    15f6:	e7 5b       	subi	r30, 0xB7	; 183
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    1610:	de 01       	movw	r26, r28
    1612:	ad 5b       	subi	r26, 0xBD	; 189
    1614:	be 4f       	sbci	r27, 0xFE	; 254
    1616:	fe 01       	movw	r30, r28
    1618:	e9 5b       	subi	r30, 0xB9	; 185
    161a:	fe 4f       	sbci	r31, 0xFE	; 254
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	8d 93       	st	X+, r24
    1622:	9c 93       	st	X, r25
    1624:	fe 01       	movw	r30, r28
    1626:	ed 5b       	subi	r30, 0xBD	; 189
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <STEPPER_voidOn+0x21a>
    1632:	fe 01       	movw	r30, r28
    1634:	ed 5b       	subi	r30, 0xBD	; 189
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP2
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	62 e0       	ldi	r22, 0x02	; 2
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	63 e0       	ldi	r22, 0x03	; 3
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1664:	fe 01       	movw	r30, r28
    1666:	e1 5c       	subi	r30, 0xC1	; 193
    1668:	fe 4f       	sbci	r31, 0xFE	; 254
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 ea       	ldi	r26, 0xA0	; 160
    1670:	b1 e4       	ldi	r27, 0x41	; 65
    1672:	80 83       	st	Z, r24
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	a2 83       	std	Z+2, r26	; 0x02
    1678:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	8e 01       	movw	r16, r28
    167c:	05 5c       	subi	r16, 0xC5	; 197
    167e:	1e 4f       	sbci	r17, 0xFE	; 254
    1680:	fe 01       	movw	r30, r28
    1682:	e1 5c       	subi	r30, 0xC1	; 193
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a ef       	ldi	r20, 0xFA	; 250
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	f8 01       	movw	r30, r16
    16a0:	80 83       	st	Z, r24
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	a2 83       	std	Z+2, r26	; 0x02
    16a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16a8:	fe 01       	movw	r30, r28
    16aa:	e5 5c       	subi	r30, 0xC5	; 197
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	44 f4       	brge	.+16     	; 0x16d6 <STEPPER_voidOn+0x2c2>
		__ticks = 1;
    16c6:	fe 01       	movw	r30, r28
    16c8:	e7 5c       	subi	r30, 0xC7	; 199
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
    16d4:	64 c0       	rjmp	.+200    	; 0x179e <STEPPER_voidOn+0x38a>
	else if (__tmp > 65535)
    16d6:	fe 01       	movw	r30, r28
    16d8:	e5 5c       	subi	r30, 0xC5	; 197
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	0c f0       	brlt	.+2      	; 0x16f6 <STEPPER_voidOn+0x2e2>
    16f4:	43 c0       	rjmp	.+134    	; 0x177c <STEPPER_voidOn+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	fe 01       	movw	r30, r28
    16f8:	e1 5c       	subi	r30, 0xC1	; 193
    16fa:	fe 4f       	sbci	r31, 0xFE	; 254
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	93 81       	ldd	r25, Z+3	; 0x03
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8e 01       	movw	r16, r28
    1716:	07 5c       	subi	r16, 0xC7	; 199
    1718:	1e 4f       	sbci	r17, 0xFE	; 254
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	f8 01       	movw	r30, r16
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
    172c:	1f c0       	rjmp	.+62     	; 0x176c <STEPPER_voidOn+0x358>
    172e:	fe 01       	movw	r30, r28
    1730:	e9 5c       	subi	r30, 0xC9	; 201
    1732:	fe 4f       	sbci	r31, 0xFE	; 254
    1734:	88 ec       	ldi	r24, 0xC8	; 200
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
    173c:	fe 01       	movw	r30, r28
    173e:	e9 5c       	subi	r30, 0xC9	; 201
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <STEPPER_voidOn+0x332>
    174a:	fe 01       	movw	r30, r28
    174c:	e9 5c       	subi	r30, 0xC9	; 201
    174e:	fe 4f       	sbci	r31, 0xFE	; 254
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	de 01       	movw	r26, r28
    1756:	a7 5c       	subi	r26, 0xC7	; 199
    1758:	be 4f       	sbci	r27, 0xFE	; 254
    175a:	fe 01       	movw	r30, r28
    175c:	e7 5c       	subi	r30, 0xC7	; 199
    175e:	fe 4f       	sbci	r31, 0xFE	; 254
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	9c 93       	st	X, r25
    176a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	fe 01       	movw	r30, r28
    176e:	e7 5c       	subi	r30, 0xC7	; 199
    1770:	fe 4f       	sbci	r31, 0xFE	; 254
    1772:	80 81       	ld	r24, Z
    1774:	91 81       	ldd	r25, Z+1	; 0x01
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	d1 f6       	brne	.-76     	; 0x172e <STEPPER_voidOn+0x31a>
    177a:	27 c0       	rjmp	.+78     	; 0x17ca <STEPPER_voidOn+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	8e 01       	movw	r16, r28
    177e:	07 5c       	subi	r16, 0xC7	; 199
    1780:	1e 4f       	sbci	r17, 0xFE	; 254
    1782:	fe 01       	movw	r30, r28
    1784:	e5 5c       	subi	r30, 0xC5	; 197
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	f8 01       	movw	r30, r16
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
    179e:	de 01       	movw	r26, r28
    17a0:	ab 5c       	subi	r26, 0xCB	; 203
    17a2:	be 4f       	sbci	r27, 0xFE	; 254
    17a4:	fe 01       	movw	r30, r28
    17a6:	e7 5c       	subi	r30, 0xC7	; 199
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	8d 93       	st	X+, r24
    17b0:	9c 93       	st	X, r25
    17b2:	fe 01       	movw	r30, r28
    17b4:	eb 5c       	subi	r30, 0xCB	; 203
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <STEPPER_voidOn+0x3a8>
    17c0:	fe 01       	movw	r30, r28
    17c2:	eb 5c       	subi	r30, 0xCB	; 203
    17c4:	fe 4f       	sbci	r31, 0xFE	; 254
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP3
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	63 e0       	ldi	r22, 0x03	; 3
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 5c       	subi	r30, 0xCF	; 207
    17f6:	fe 4f       	sbci	r31, 0xFE	; 254
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 ea       	ldi	r26, 0xA0	; 160
    17fe:	b1 e4       	ldi	r27, 0x41	; 65
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	8e 01       	movw	r16, r28
    180a:	03 5d       	subi	r16, 0xD3	; 211
    180c:	1e 4f       	sbci	r17, 0xFE	; 254
    180e:	fe 01       	movw	r30, r28
    1810:	ef 5c       	subi	r30, 0xCF	; 207
    1812:	fe 4f       	sbci	r31, 0xFE	; 254
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	f8 01       	movw	r30, r16
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1836:	fe 01       	movw	r30, r28
    1838:	e3 5d       	subi	r30, 0xD3	; 211
    183a:	fe 4f       	sbci	r31, 0xFE	; 254
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	44 f4       	brge	.+16     	; 0x1864 <STEPPER_voidOn+0x450>
		__ticks = 1;
    1854:	fe 01       	movw	r30, r28
    1856:	e5 5d       	subi	r30, 0xD5	; 213
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	64 c0       	rjmp	.+200    	; 0x192c <STEPPER_voidOn+0x518>
	else if (__tmp > 65535)
    1864:	fe 01       	movw	r30, r28
    1866:	e3 5d       	subi	r30, 0xD3	; 211
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	0c f0       	brlt	.+2      	; 0x1884 <STEPPER_voidOn+0x470>
    1882:	43 c0       	rjmp	.+134    	; 0x190a <STEPPER_voidOn+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	fe 01       	movw	r30, r28
    1886:	ef 5c       	subi	r30, 0xCF	; 207
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8e 01       	movw	r16, r28
    18a4:	05 5d       	subi	r16, 0xD5	; 213
    18a6:	1e 4f       	sbci	r17, 0xFE	; 254
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	1f c0       	rjmp	.+62     	; 0x18fa <STEPPER_voidOn+0x4e6>
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5d       	subi	r30, 0xD7	; 215
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 5d       	subi	r30, 0xD7	; 215
    18ce:	fe 4f       	sbci	r31, 0xFE	; 254
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <STEPPER_voidOn+0x4c0>
    18d8:	fe 01       	movw	r30, r28
    18da:	e7 5d       	subi	r30, 0xD7	; 215
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	de 01       	movw	r26, r28
    18e4:	a5 5d       	subi	r26, 0xD5	; 213
    18e6:	be 4f       	sbci	r27, 0xFE	; 254
    18e8:	fe 01       	movw	r30, r28
    18ea:	e5 5d       	subi	r30, 0xD5	; 213
    18ec:	fe 4f       	sbci	r31, 0xFE	; 254
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	fe 01       	movw	r30, r28
    18fc:	e5 5d       	subi	r30, 0xD5	; 213
    18fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	d1 f6       	brne	.-76     	; 0x18bc <STEPPER_voidOn+0x4a8>
    1908:	27 c0       	rjmp	.+78     	; 0x1958 <STEPPER_voidOn+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	8e 01       	movw	r16, r28
    190c:	05 5d       	subi	r16, 0xD5	; 213
    190e:	1e 4f       	sbci	r17, 0xFE	; 254
    1910:	fe 01       	movw	r30, r28
    1912:	e3 5d       	subi	r30, 0xD3	; 211
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	de 01       	movw	r26, r28
    192e:	a9 5d       	subi	r26, 0xD9	; 217
    1930:	be 4f       	sbci	r27, 0xFE	; 254
    1932:	fe 01       	movw	r30, r28
    1934:	e5 5d       	subi	r30, 0xD5	; 213
    1936:	fe 4f       	sbci	r31, 0xFE	; 254
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	8d 93       	st	X+, r24
    193e:	9c 93       	st	X, r25
    1940:	fe 01       	movw	r30, r28
    1942:	e9 5d       	subi	r30, 0xD9	; 217
    1944:	fe 4f       	sbci	r31, 0xFE	; 254
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <STEPPER_voidOn+0x536>
    194e:	fe 01       	movw	r30, r28
    1950:	e9 5d       	subi	r30, 0xD9	; 217
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP4
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	63 e0       	ldi	r22, 0x03	; 3
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1980:	fe 01       	movw	r30, r28
    1982:	ed 5d       	subi	r30, 0xDD	; 221
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 ea       	ldi	r26, 0xA0	; 160
    198c:	b1 e4       	ldi	r27, 0x41	; 65
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	8e 01       	movw	r16, r28
    1998:	01 5e       	subi	r16, 0xE1	; 225
    199a:	1e 4f       	sbci	r17, 0xFE	; 254
    199c:	fe 01       	movw	r30, r28
    199e:	ed 5d       	subi	r30, 0xDD	; 221
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	80 83       	st	Z, r24
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	a2 83       	std	Z+2, r26	; 0x02
    19c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e1 5e       	subi	r30, 0xE1	; 225
    19c8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <STEPPER_voidOn+0x5de>
		__ticks = 1;
    19e2:	fe 01       	movw	r30, r28
    19e4:	e3 5e       	subi	r30, 0xE3	; 227
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	64 c0       	rjmp	.+200    	; 0x1aba <STEPPER_voidOn+0x6a6>
	else if (__tmp > 65535)
    19f2:	fe 01       	movw	r30, r28
    19f4:	e1 5e       	subi	r30, 0xE1	; 225
    19f6:	fe 4f       	sbci	r31, 0xFE	; 254
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	0c f0       	brlt	.+2      	; 0x1a12 <STEPPER_voidOn+0x5fe>
    1a10:	43 c0       	rjmp	.+134    	; 0x1a98 <STEPPER_voidOn+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a12:	fe 01       	movw	r30, r28
    1a14:	ed 5d       	subi	r30, 0xDD	; 221
    1a16:	fe 4f       	sbci	r31, 0xFE	; 254
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8e 01       	movw	r16, r28
    1a32:	03 5e       	subi	r16, 0xE3	; 227
    1a34:	1e 4f       	sbci	r17, 0xFE	; 254
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	f8 01       	movw	r30, r16
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
    1a48:	1f c0       	rjmp	.+62     	; 0x1a88 <STEPPER_voidOn+0x674>
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e5 5e       	subi	r30, 0xE5	; 229
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	88 ec       	ldi	r24, 0xC8	; 200
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e5 5e       	subi	r30, 0xE5	; 229
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <STEPPER_voidOn+0x64e>
    1a66:	fe 01       	movw	r30, r28
    1a68:	e5 5e       	subi	r30, 0xE5	; 229
    1a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	de 01       	movw	r26, r28
    1a72:	a3 5e       	subi	r26, 0xE3	; 227
    1a74:	be 4f       	sbci	r27, 0xFE	; 254
    1a76:	fe 01       	movw	r30, r28
    1a78:	e3 5e       	subi	r30, 0xE3	; 227
    1a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	11 96       	adiw	r26, 0x01	; 1
    1a84:	9c 93       	st	X, r25
    1a86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e3 5e       	subi	r30, 0xE3	; 227
    1a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	d1 f6       	brne	.-76     	; 0x1a4a <STEPPER_voidOn+0x636>
    1a96:	27 c0       	rjmp	.+78     	; 0x1ae6 <STEPPER_voidOn+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	03 5e       	subi	r16, 0xE3	; 227
    1a9c:	1e 4f       	sbci	r17, 0xFE	; 254
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e1 5e       	subi	r30, 0xE1	; 225
    1aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	de 01       	movw	r26, r28
    1abc:	a7 5e       	subi	r26, 0xE7	; 231
    1abe:	be 4f       	sbci	r27, 0xFE	; 254
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e3 5e       	subi	r30, 0xE3	; 227
    1ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	8d 93       	st	X+, r24
    1acc:	9c 93       	st	X, r25
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e7 5e       	subi	r30, 0xE7	; 231
    1ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <STEPPER_voidOn+0x6c4>
    1adc:	fe 01       	movw	r30, r28
    1ade:	e7 5e       	subi	r30, 0xE7	; 231
    1ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
	u32 Local_u16FullSteps = ( ( 2048*Copy_u16Degree ) / 360 );
	if(Copy_u8StepType == STEPPER_FULL_STEP)
	{
		if (Copy_u8Direction == STEPPER_CLOCK_WISE)
		{
			for (Local_u16Counter=0 ; Local_u16Counter < ( Local_u16FullSteps / 4 )  ; Local_u16Counter++)
    1ae6:	de 01       	movw	r26, r28
    1ae8:	a9 5a       	subi	r26, 0xA9	; 169
    1aea:	be 4f       	sbci	r27, 0xFE	; 254
    1aec:	fe 01       	movw	r30, r28
    1aee:	e9 5a       	subi	r30, 0xA9	; 169
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	8d 93       	st	X+, r24
    1afa:	9c 93       	st	X, r25
    1afc:	fe 01       	movw	r30, r28
    1afe:	e9 5a       	subi	r30, 0xA9	; 169
    1b00:	fe 4f       	sbci	r31, 0xFE	; 254
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	9c 01       	movw	r18, r24
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 5a       	subi	r30, 0xAD	; 173
    1b10:	fe 4f       	sbci	r31, 0xFE	; 254
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	a2 81       	ldd	r26, Z+2	; 0x02
    1b18:	b3 81       	ldd	r27, Z+3	; 0x03
    1b1a:	b6 95       	lsr	r27
    1b1c:	a7 95       	ror	r26
    1b1e:	97 95       	ror	r25
    1b20:	87 95       	ror	r24
    1b22:	b6 95       	lsr	r27
    1b24:	a7 95       	ror	r26
    1b26:	97 95       	ror	r25
    1b28:	87 95       	ror	r24
    1b2a:	28 17       	cp	r18, r24
    1b2c:	39 07       	cpc	r19, r25
    1b2e:	4a 07       	cpc	r20, r26
    1b30:	5b 07       	cpc	r21, r27
    1b32:	08 f4       	brcc	.+2      	; 0x1b36 <STEPPER_voidOn+0x722>
    1b34:	bc cc       	rjmp	.-1672   	; 0x14ae <STEPPER_voidOn+0x9a>
    1b36:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <STEPPER_voidOn+0x2542>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
				_delay_ms(20);
			}
		}
		else if(Copy_u8Direction == STEPPER_COUNTER_CLOCK_WISE)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e6 5a       	subi	r30, 0xA6	; 166
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	80 81       	ld	r24, Z
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <STEPPER_voidOn+0x736>
    1b46:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <STEPPER_voidOn+0x2542>
		{
			for (Local_u16Counter=0 ; Local_u16Counter< ((64*Copy_u16Degree)/45) ; Local_u16Counter++)
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e9 5a       	subi	r30, 0xA9	; 169
    1b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b50:	11 82       	std	Z+1, r1	; 0x01
    1b52:	10 82       	st	Z, r1
    1b54:	28 c3       	rjmp	.+1616   	; 0x21a6 <STEPPER_voidOn+0xd92>
			{
				//STEP1
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	63 e0       	ldi	r22, 0x03	; 3
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	eb 5e       	subi	r30, 0xEB	; 235
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 ea       	ldi	r26, 0xA0	; 160
    1b8a:	b1 e4       	ldi	r27, 0x41	; 65
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	8e 01       	movw	r16, r28
    1b96:	0f 5e       	subi	r16, 0xEF	; 239
    1b98:	1e 4f       	sbci	r17, 0xFE	; 254
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	eb 5e       	subi	r30, 0xEB	; 235
    1b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	a2 83       	std	Z+2, r26	; 0x02
    1bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ef 5e       	subi	r30, 0xEF	; 239
    1bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	44 f4       	brge	.+16     	; 0x1bf0 <STEPPER_voidOn+0x7dc>
		__ticks = 1;
    1be0:	fe 01       	movw	r30, r28
    1be2:	e1 5f       	subi	r30, 0xF1	; 241
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	64 c0       	rjmp	.+200    	; 0x1cb8 <STEPPER_voidOn+0x8a4>
	else if (__tmp > 65535)
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ef 5e       	subi	r30, 0xEF	; 239
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	0c f0       	brlt	.+2      	; 0x1c10 <STEPPER_voidOn+0x7fc>
    1c0e:	43 c0       	rjmp	.+134    	; 0x1c96 <STEPPER_voidOn+0x882>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	fe 01       	movw	r30, r28
    1c12:	eb 5e       	subi	r30, 0xEB	; 235
    1c14:	fe 4f       	sbci	r31, 0xFE	; 254
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8e 01       	movw	r16, r28
    1c30:	01 5f       	subi	r16, 0xF1	; 241
    1c32:	1e 4f       	sbci	r17, 0xFE	; 254
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	f8 01       	movw	r30, r16
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	1f c0       	rjmp	.+62     	; 0x1c86 <STEPPER_voidOn+0x872>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e3 5f       	subi	r30, 0xF3	; 243
    1c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	fe 01       	movw	r30, r28
    1c58:	e3 5f       	subi	r30, 0xF3	; 243
    1c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <STEPPER_voidOn+0x84c>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e3 5f       	subi	r30, 0xF3	; 243
    1c68:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	de 01       	movw	r26, r28
    1c70:	a1 5f       	subi	r26, 0xF1	; 241
    1c72:	be 4f       	sbci	r27, 0xFE	; 254
    1c74:	fe 01       	movw	r30, r28
    1c76:	e1 5f       	subi	r30, 0xF1	; 241
    1c78:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	9c 93       	st	X, r25
    1c84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	fe 01       	movw	r30, r28
    1c88:	e1 5f       	subi	r30, 0xF1	; 241
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	d1 f6       	brne	.-76     	; 0x1c48 <STEPPER_voidOn+0x834>
    1c94:	27 c0       	rjmp	.+78     	; 0x1ce4 <STEPPER_voidOn+0x8d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	8e 01       	movw	r16, r28
    1c98:	01 5f       	subi	r16, 0xF1	; 241
    1c9a:	1e 4f       	sbci	r17, 0xFE	; 254
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ef 5e       	subi	r30, 0xEF	; 239
    1ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	de 01       	movw	r26, r28
    1cba:	a5 5f       	subi	r26, 0xF5	; 245
    1cbc:	be 4f       	sbci	r27, 0xFE	; 254
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e1 5f       	subi	r30, 0xF1	; 241
    1cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	8d 93       	st	X+, r24
    1cca:	9c 93       	st	X, r25
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e5 5f       	subi	r30, 0xF5	; 245
    1cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <STEPPER_voidOn+0x8c2>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e5 5f       	subi	r30, 0xF5	; 245
    1cde:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP2
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	63 e0       	ldi	r22, 0x03	; 3
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e9 5f       	subi	r30, 0xF9	; 249
    1d10:	fe 4f       	sbci	r31, 0xFE	; 254
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 ea       	ldi	r26, 0xA0	; 160
    1d18:	b1 e4       	ldi	r27, 0x41	; 65
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	8e 01       	movw	r16, r28
    1d24:	0d 5f       	subi	r16, 0xFD	; 253
    1d26:	1e 4f       	sbci	r17, 0xFE	; 254
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5f       	subi	r30, 0xF9	; 249
    1d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a ef       	ldi	r20, 0xFA	; 250
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 83       	st	Z, r24
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d50:	fe 01       	movw	r30, r28
    1d52:	ed 5f       	subi	r30, 0xFD	; 253
    1d54:	fe 4f       	sbci	r31, 0xFE	; 254
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	44 f4       	brge	.+16     	; 0x1d7e <STEPPER_voidOn+0x96a>
		__ticks = 1;
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ef 5f       	subi	r30, 0xFF	; 255
    1d72:	fe 4f       	sbci	r31, 0xFE	; 254
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	64 c0       	rjmp	.+200    	; 0x1e46 <STEPPER_voidOn+0xa32>
	else if (__tmp > 65535)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ed 5f       	subi	r30, 0xFD	; 253
    1d82:	fe 4f       	sbci	r31, 0xFE	; 254
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <STEPPER_voidOn+0x98a>
    1d9c:	43 c0       	rjmp	.+134    	; 0x1e24 <STEPPER_voidOn+0xa10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e9 5f       	subi	r30, 0xF9	; 249
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	0f 5f       	subi	r16, 0xFF	; 255
    1dc0:	1e 4f       	sbci	r17, 0xFE	; 254
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	1f c0       	rjmp	.+62     	; 0x1e14 <STEPPER_voidOn+0xa00>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e1 50       	subi	r30, 0x01	; 1
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    1de4:	fe 01       	movw	r30, r28
    1de6:	e1 50       	subi	r30, 0x01	; 1
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <STEPPER_voidOn+0x9da>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e1 50       	subi	r30, 0x01	; 1
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	de 01       	movw	r26, r28
    1dfe:	af 5f       	subi	r26, 0xFF	; 255
    1e00:	be 4f       	sbci	r27, 0xFE	; 254
    1e02:	fe 01       	movw	r30, r28
    1e04:	ef 5f       	subi	r30, 0xFF	; 255
    1e06:	fe 4f       	sbci	r31, 0xFE	; 254
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	9c 93       	st	X, r25
    1e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	fe 01       	movw	r30, r28
    1e16:	ef 5f       	subi	r30, 0xFF	; 255
    1e18:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	d1 f6       	brne	.-76     	; 0x1dd6 <STEPPER_voidOn+0x9c2>
    1e22:	27 c0       	rjmp	.+78     	; 0x1e72 <STEPPER_voidOn+0xa5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	8e 01       	movw	r16, r28
    1e26:	0f 5f       	subi	r16, 0xFF	; 255
    1e28:	1e 4f       	sbci	r17, 0xFE	; 254
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ed 5f       	subi	r30, 0xFD	; 253
    1e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	de 01       	movw	r26, r28
    1e48:	a3 50       	subi	r26, 0x03	; 3
    1e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ef 5f       	subi	r30, 0xFF	; 255
    1e50:	fe 4f       	sbci	r31, 0xFE	; 254
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	8d 93       	st	X+, r24
    1e58:	9c 93       	st	X, r25
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e3 50       	subi	r30, 0x03	; 3
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	91 81       	ldd	r25, Z+1	; 0x01
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <STEPPER_voidOn+0xa50>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e3 50       	subi	r30, 0x03	; 3
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP3
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	63 e0       	ldi	r22, 0x03	; 3
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e7 50       	subi	r30, 0x07	; 7
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea6:	b1 e4       	ldi	r27, 0x41	; 65
    1ea8:	80 83       	st	Z, r24
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	a2 83       	std	Z+2, r26	; 0x02
    1eae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	8e 01       	movw	r16, r28
    1eb2:	0b 50       	subi	r16, 0x0B	; 11
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 50       	subi	r30, 0x07	; 7
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	80 83       	st	Z, r24
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	a2 83       	std	Z+2, r26	; 0x02
    1edc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ede:	fe 01       	movw	r30, r28
    1ee0:	eb 50       	subi	r30, 0x0B	; 11
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	44 f4       	brge	.+16     	; 0x1f0c <STEPPER_voidOn+0xaf8>
		__ticks = 1;
    1efc:	fe 01       	movw	r30, r28
    1efe:	ed 50       	subi	r30, 0x0D	; 13
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	64 c0       	rjmp	.+200    	; 0x1fd4 <STEPPER_voidOn+0xbc0>
	else if (__tmp > 65535)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	eb 50       	subi	r30, 0x0B	; 11
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	0c f0       	brlt	.+2      	; 0x1f2c <STEPPER_voidOn+0xb18>
    1f2a:	43 c0       	rjmp	.+134    	; 0x1fb2 <STEPPER_voidOn+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e7 50       	subi	r30, 0x07	; 7
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8e 01       	movw	r16, r28
    1f4c:	0d 50       	subi	r16, 0x0D	; 13
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	1f c0       	rjmp	.+62     	; 0x1fa2 <STEPPER_voidOn+0xb8e>
    1f64:	fe 01       	movw	r30, r28
    1f66:	ef 50       	subi	r30, 0x0F	; 15
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	88 ec       	ldi	r24, 0xC8	; 200
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	fe 01       	movw	r30, r28
    1f74:	ef 50       	subi	r30, 0x0F	; 15
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <STEPPER_voidOn+0xb68>
    1f80:	fe 01       	movw	r30, r28
    1f82:	ef 50       	subi	r30, 0x0F	; 15
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	de 01       	movw	r26, r28
    1f8c:	ad 50       	subi	r26, 0x0D	; 13
    1f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f90:	fe 01       	movw	r30, r28
    1f92:	ed 50       	subi	r30, 0x0D	; 13
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	11 96       	adiw	r26, 0x01	; 1
    1f9e:	9c 93       	st	X, r25
    1fa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ed 50       	subi	r30, 0x0D	; 13
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	d1 f6       	brne	.-76     	; 0x1f64 <STEPPER_voidOn+0xb50>
    1fb0:	27 c0       	rjmp	.+78     	; 0x2000 <STEPPER_voidOn+0xbec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	8e 01       	movw	r16, r28
    1fb4:	0d 50       	subi	r16, 0x0D	; 13
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	eb 50       	subi	r30, 0x0B	; 11
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	f8 01       	movw	r30, r16
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	de 01       	movw	r26, r28
    1fd6:	a1 51       	subi	r26, 0x11	; 17
    1fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ed 50       	subi	r30, 0x0D	; 13
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	8d 93       	st	X+, r24
    1fe6:	9c 93       	st	X, r25
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e1 51       	subi	r30, 0x11	; 17
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <STEPPER_voidOn+0xbde>
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e1 51       	subi	r30, 0x11	; 17
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP4
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    2000:	82 e0       	ldi	r24, 0x02	; 2
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	62 e0       	ldi	r22, 0x02	; 2
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	63 e0       	ldi	r22, 0x03	; 3
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2028:	fe 01       	movw	r30, r28
    202a:	e5 51       	subi	r30, 0x15	; 21
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 ea       	ldi	r26, 0xA0	; 160
    2034:	b1 e4       	ldi	r27, 0x41	; 65
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	8e 01       	movw	r16, r28
    2040:	09 51       	subi	r16, 0x19	; 25
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	e5 51       	subi	r30, 0x15	; 21
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a ef       	ldi	r20, 0xFA	; 250
    2058:	54 e4       	ldi	r21, 0x44	; 68
    205a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	f8 01       	movw	r30, r16
    2064:	80 83       	st	Z, r24
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	a2 83       	std	Z+2, r26	; 0x02
    206a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206c:	fe 01       	movw	r30, r28
    206e:	e9 51       	subi	r30, 0x19	; 25
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	44 f4       	brge	.+16     	; 0x209a <STEPPER_voidOn+0xc86>
		__ticks = 1;
    208a:	fe 01       	movw	r30, r28
    208c:	eb 51       	subi	r30, 0x1B	; 27
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
    2098:	64 c0       	rjmp	.+200    	; 0x2162 <STEPPER_voidOn+0xd4e>
	else if (__tmp > 65535)
    209a:	fe 01       	movw	r30, r28
    209c:	e9 51       	subi	r30, 0x19	; 25
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	0c f0       	brlt	.+2      	; 0x20ba <STEPPER_voidOn+0xca6>
    20b8:	43 c0       	rjmp	.+134    	; 0x2140 <STEPPER_voidOn+0xd2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	fe 01       	movw	r30, r28
    20bc:	e5 51       	subi	r30, 0x15	; 21
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8e 01       	movw	r16, r28
    20da:	0b 51       	subi	r16, 0x1B	; 27
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	f8 01       	movw	r30, r16
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	1f c0       	rjmp	.+62     	; 0x2130 <STEPPER_voidOn+0xd1c>
    20f2:	fe 01       	movw	r30, r28
    20f4:	ed 51       	subi	r30, 0x1D	; 29
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	88 ec       	ldi	r24, 0xC8	; 200
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	fe 01       	movw	r30, r28
    2102:	ed 51       	subi	r30, 0x1D	; 29
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <STEPPER_voidOn+0xcf6>
    210e:	fe 01       	movw	r30, r28
    2110:	ed 51       	subi	r30, 0x1D	; 29
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	de 01       	movw	r26, r28
    211a:	ab 51       	subi	r26, 0x1B	; 27
    211c:	bf 4f       	sbci	r27, 0xFF	; 255
    211e:	fe 01       	movw	r30, r28
    2120:	eb 51       	subi	r30, 0x1B	; 27
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	9c 93       	st	X, r25
    212e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	fe 01       	movw	r30, r28
    2132:	eb 51       	subi	r30, 0x1B	; 27
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	d1 f6       	brne	.-76     	; 0x20f2 <STEPPER_voidOn+0xcde>
    213e:	27 c0       	rjmp	.+78     	; 0x218e <STEPPER_voidOn+0xd7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	8e 01       	movw	r16, r28
    2142:	0b 51       	subi	r16, 0x1B	; 27
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	fe 01       	movw	r30, r28
    2148:	e9 51       	subi	r30, 0x19	; 25
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	f8 01       	movw	r30, r16
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	de 01       	movw	r26, r28
    2164:	af 51       	subi	r26, 0x1F	; 31
    2166:	bf 4f       	sbci	r27, 0xFF	; 255
    2168:	fe 01       	movw	r30, r28
    216a:	eb 51       	subi	r30, 0x1B	; 27
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	8d 93       	st	X+, r24
    2174:	9c 93       	st	X, r25
    2176:	fe 01       	movw	r30, r28
    2178:	ef 51       	subi	r30, 0x1F	; 31
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <STEPPER_voidOn+0xd6c>
    2184:	fe 01       	movw	r30, r28
    2186:	ef 51       	subi	r30, 0x1F	; 31
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
				_delay_ms(20);
			}
		}
		else if(Copy_u8Direction == STEPPER_COUNTER_CLOCK_WISE)
		{
			for (Local_u16Counter=0 ; Local_u16Counter< ((64*Copy_u16Degree)/45) ; Local_u16Counter++)
    218e:	de 01       	movw	r26, r28
    2190:	a9 5a       	subi	r26, 0xA9	; 169
    2192:	be 4f       	sbci	r27, 0xFE	; 254
    2194:	fe 01       	movw	r30, r28
    2196:	e9 5a       	subi	r30, 0xA9	; 169
    2198:	fe 4f       	sbci	r31, 0xFE	; 254
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	11 96       	adiw	r26, 0x01	; 1
    21a2:	9c 93       	st	X, r25
    21a4:	8e 93       	st	-X, r24
    21a6:	fe 01       	movw	r30, r28
    21a8:	e5 5a       	subi	r30, 0xA5	; 165
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	00 24       	eor	r0, r0
    21b2:	96 95       	lsr	r25
    21b4:	87 95       	ror	r24
    21b6:	07 94       	ror	r0
    21b8:	96 95       	lsr	r25
    21ba:	87 95       	ror	r24
    21bc:	07 94       	ror	r0
    21be:	98 2f       	mov	r25, r24
    21c0:	80 2d       	mov	r24, r0
    21c2:	2d e2       	ldi	r18, 0x2D	; 45
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	b9 01       	movw	r22, r18
    21c8:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <__udivmodhi4>
    21cc:	cb 01       	movw	r24, r22
    21ce:	9c 01       	movw	r18, r24
    21d0:	fe 01       	movw	r30, r28
    21d2:	e9 5a       	subi	r30, 0xA9	; 169
    21d4:	fe 4f       	sbci	r31, 0xFE	; 254
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	82 17       	cp	r24, r18
    21dc:	93 07       	cpc	r25, r19
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <STEPPER_voidOn+0xdce>
    21e0:	ba cc       	rjmp	.-1676   	; 0x1b56 <STEPPER_voidOn+0x742>
    21e2:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <STEPPER_voidOn+0x2542>
				_delay_ms(20);
			}
		}
	}

	else if(Copy_u8StepType == STEPPER_HALF_STEP)
    21e6:	fe 01       	movw	r30, r28
    21e8:	e7 5a       	subi	r30, 0xA7	; 167
    21ea:	fe 4f       	sbci	r31, 0xFE	; 254
    21ec:	80 81       	ld	r24, Z
    21ee:	88 23       	and	r24, r24
    21f0:	11 f0       	breq	.+4      	; 0x21f6 <STEPPER_voidOn+0xde2>
    21f2:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <STEPPER_voidOn+0x2542>
	{
		u16 Local_u16Counter=0;
    21f6:	fe 01       	movw	r30, r28
    21f8:	ef 5a       	subi	r30, 0xAF	; 175
    21fa:	fe 4f       	sbci	r31, 0xFE	; 254
    21fc:	11 82       	std	Z+1, r1	; 0x01
    21fe:	10 82       	st	Z, r1
		if (Copy_u8Direction == STEPPER_CLOCK_WISE)
    2200:	fe 01       	movw	r30, r28
    2202:	e6 5a       	subi	r30, 0xA6	; 166
    2204:	fe 4f       	sbci	r31, 0xFE	; 254
    2206:	80 81       	ld	r24, Z
    2208:	88 23       	and	r24, r24
    220a:	09 f0       	breq	.+2      	; 0x220e <STEPPER_voidOn+0xdfa>
    220c:	68 c6       	rjmp	.+3280   	; 0x2ede <STEPPER_voidOn+0x1aca>
		{
			for (Local_u16Counter =0; Local_u16Counter< ((32*Copy_u16Degree)/45) ; Local_u16Counter++)
    220e:	fe 01       	movw	r30, r28
    2210:	ef 5a       	subi	r30, 0xAF	; 175
    2212:	fe 4f       	sbci	r31, 0xFE	; 254
    2214:	11 82       	std	Z+1, r1	; 0x01
    2216:	10 82       	st	Z, r1
    2218:	44 c6       	rjmp	.+3208   	; 0x2ea2 <STEPPER_voidOn+0x1a8e>
			{
				//STEP1 : ACTIVATE COIL1 ONLY
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	41 e0       	ldi	r20, 0x01	; 1
    222a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	62 e0       	ldi	r22, 0x02	; 2
    2232:	41 e0       	ldi	r20, 0x01	; 1
    2234:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	63 e0       	ldi	r22, 0x03	; 3
    223c:	41 e0       	ldi	r20, 0x01	; 1
    223e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2242:	fe 01       	movw	r30, r28
    2244:	e3 52       	subi	r30, 0x23	; 35
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 ea       	ldi	r26, 0xA0	; 160
    224e:	b1 e4       	ldi	r27, 0x41	; 65
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	8e 01       	movw	r16, r28
    225a:	07 52       	subi	r16, 0x27	; 39
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	e3 52       	subi	r30, 0x23	; 35
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a ef       	ldi	r20, 0xFA	; 250
    2272:	54 e4       	ldi	r21, 0x44	; 68
    2274:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	f8 01       	movw	r30, r16
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2286:	fe 01       	movw	r30, r28
    2288:	e7 52       	subi	r30, 0x27	; 39
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	44 f4       	brge	.+16     	; 0x22b4 <STEPPER_voidOn+0xea0>
		__ticks = 1;
    22a4:	fe 01       	movw	r30, r28
    22a6:	e9 52       	subi	r30, 0x29	; 41
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
    22b2:	64 c0       	rjmp	.+200    	; 0x237c <STEPPER_voidOn+0xf68>
	else if (__tmp > 65535)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e7 52       	subi	r30, 0x27	; 39
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	0c f0       	brlt	.+2      	; 0x22d4 <STEPPER_voidOn+0xec0>
    22d2:	43 c0       	rjmp	.+134    	; 0x235a <STEPPER_voidOn+0xf46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	fe 01       	movw	r30, r28
    22d6:	e3 52       	subi	r30, 0x23	; 35
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8e 01       	movw	r16, r28
    22f4:	09 52       	subi	r16, 0x29	; 41
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	1f c0       	rjmp	.+62     	; 0x234a <STEPPER_voidOn+0xf36>
    230c:	fe 01       	movw	r30, r28
    230e:	eb 52       	subi	r30, 0x2B	; 43
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	88 ec       	ldi	r24, 0xC8	; 200
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	80 83       	st	Z, r24
    231a:	fe 01       	movw	r30, r28
    231c:	eb 52       	subi	r30, 0x2B	; 43
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <STEPPER_voidOn+0xf10>
    2328:	fe 01       	movw	r30, r28
    232a:	eb 52       	subi	r30, 0x2B	; 43
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	de 01       	movw	r26, r28
    2334:	a9 52       	subi	r26, 0x29	; 41
    2336:	bf 4f       	sbci	r27, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	e9 52       	subi	r30, 0x29	; 41
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	9c 93       	st	X, r25
    2348:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	fe 01       	movw	r30, r28
    234c:	e9 52       	subi	r30, 0x29	; 41
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	d1 f6       	brne	.-76     	; 0x230c <STEPPER_voidOn+0xef8>
    2358:	27 c0       	rjmp	.+78     	; 0x23a8 <STEPPER_voidOn+0xf94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	8e 01       	movw	r16, r28
    235c:	09 52       	subi	r16, 0x29	; 41
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	fe 01       	movw	r30, r28
    2362:	e7 52       	subi	r30, 0x27	; 39
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	f8 01       	movw	r30, r16
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
    237c:	de 01       	movw	r26, r28
    237e:	ad 52       	subi	r26, 0x2D	; 45
    2380:	bf 4f       	sbci	r27, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e9 52       	subi	r30, 0x29	; 41
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	8d 93       	st	X+, r24
    238e:	9c 93       	st	X, r25
    2390:	fe 01       	movw	r30, r28
    2392:	ed 52       	subi	r30, 0x2D	; 45
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <STEPPER_voidOn+0xf86>
    239e:	fe 01       	movw	r30, r28
    23a0:	ed 52       	subi	r30, 0x2D	; 45
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP2 ACTIVATE COIL 1 AND COIL2
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	62 e0       	ldi	r22, 0x02	; 2
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	63 e0       	ldi	r22, 0x03	; 3
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e1 53       	subi	r30, 0x31	; 49
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a0 ea       	ldi	r26, 0xA0	; 160
    23dc:	b1 e4       	ldi	r27, 0x41	; 65
    23de:	80 83       	st	Z, r24
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	a2 83       	std	Z+2, r26	; 0x02
    23e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	8e 01       	movw	r16, r28
    23e8:	05 53       	subi	r16, 0x35	; 53
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	fe 01       	movw	r30, r28
    23ee:	e1 53       	subi	r30, 0x31	; 49
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	4a ef       	ldi	r20, 0xFA	; 250
    2400:	54 e4       	ldi	r21, 0x44	; 68
    2402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	f8 01       	movw	r30, r16
    240c:	80 83       	st	Z, r24
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	a2 83       	std	Z+2, r26	; 0x02
    2412:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2414:	fe 01       	movw	r30, r28
    2416:	e5 53       	subi	r30, 0x35	; 53
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	44 f4       	brge	.+16     	; 0x2442 <STEPPER_voidOn+0x102e>
		__ticks = 1;
    2432:	fe 01       	movw	r30, r28
    2434:	e7 53       	subi	r30, 0x37	; 55
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	80 83       	st	Z, r24
    2440:	64 c0       	rjmp	.+200    	; 0x250a <STEPPER_voidOn+0x10f6>
	else if (__tmp > 65535)
    2442:	fe 01       	movw	r30, r28
    2444:	e5 53       	subi	r30, 0x35	; 53
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	0c f0       	brlt	.+2      	; 0x2462 <STEPPER_voidOn+0x104e>
    2460:	43 c0       	rjmp	.+134    	; 0x24e8 <STEPPER_voidOn+0x10d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	fe 01       	movw	r30, r28
    2464:	e1 53       	subi	r30, 0x31	; 49
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8e 01       	movw	r16, r28
    2482:	07 53       	subi	r16, 0x37	; 55
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	f8 01       	movw	r30, r16
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	1f c0       	rjmp	.+62     	; 0x24d8 <STEPPER_voidOn+0x10c4>
    249a:	fe 01       	movw	r30, r28
    249c:	e9 53       	subi	r30, 0x39	; 57
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	88 ec       	ldi	r24, 0xC8	; 200
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	fe 01       	movw	r30, r28
    24aa:	e9 53       	subi	r30, 0x39	; 57
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <STEPPER_voidOn+0x109e>
    24b6:	fe 01       	movw	r30, r28
    24b8:	e9 53       	subi	r30, 0x39	; 57
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	de 01       	movw	r26, r28
    24c2:	a7 53       	subi	r26, 0x37	; 55
    24c4:	bf 4f       	sbci	r27, 0xFF	; 255
    24c6:	fe 01       	movw	r30, r28
    24c8:	e7 53       	subi	r30, 0x37	; 55
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	11 96       	adiw	r26, 0x01	; 1
    24d4:	9c 93       	st	X, r25
    24d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	fe 01       	movw	r30, r28
    24da:	e7 53       	subi	r30, 0x37	; 55
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	d1 f6       	brne	.-76     	; 0x249a <STEPPER_voidOn+0x1086>
    24e6:	27 c0       	rjmp	.+78     	; 0x2536 <STEPPER_voidOn+0x1122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	8e 01       	movw	r16, r28
    24ea:	07 53       	subi	r16, 0x37	; 55
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	e5 53       	subi	r30, 0x35	; 53
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	f8 01       	movw	r30, r16
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	de 01       	movw	r26, r28
    250c:	ab 53       	subi	r26, 0x3B	; 59
    250e:	bf 4f       	sbci	r27, 0xFF	; 255
    2510:	fe 01       	movw	r30, r28
    2512:	e7 53       	subi	r30, 0x37	; 55
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	8d 93       	st	X+, r24
    251c:	9c 93       	st	X, r25
    251e:	fe 01       	movw	r30, r28
    2520:	eb 53       	subi	r30, 0x3B	; 59
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <STEPPER_voidOn+0x1114>
    252c:	fe 01       	movw	r30, r28
    252e:	eb 53       	subi	r30, 0x3B	; 59
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP3 ACTIVATE COIL2 ONLY
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	61 e0       	ldi	r22, 0x01	; 1
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	62 e0       	ldi	r22, 0x02	; 2
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	63 e0       	ldi	r22, 0x03	; 3
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    255e:	fe 01       	movw	r30, r28
    2560:	ef 53       	subi	r30, 0x3F	; 63
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 ea       	ldi	r26, 0xA0	; 160
    256a:	b1 e4       	ldi	r27, 0x41	; 65
    256c:	80 83       	st	Z, r24
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	a2 83       	std	Z+2, r26	; 0x02
    2572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	8e 01       	movw	r16, r28
    2576:	03 54       	subi	r16, 0x43	; 67
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	ef 53       	subi	r30, 0x3F	; 63
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a ef       	ldi	r20, 0xFA	; 250
    258e:	54 e4       	ldi	r21, 0x44	; 68
    2590:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	f8 01       	movw	r30, r16
    259a:	80 83       	st	Z, r24
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	a2 83       	std	Z+2, r26	; 0x02
    25a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a2:	fe 01       	movw	r30, r28
    25a4:	e3 54       	subi	r30, 0x43	; 67
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	44 f4       	brge	.+16     	; 0x25d0 <STEPPER_voidOn+0x11bc>
		__ticks = 1;
    25c0:	fe 01       	movw	r30, r28
    25c2:	e5 54       	subi	r30, 0x45	; 69
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	64 c0       	rjmp	.+200    	; 0x2698 <STEPPER_voidOn+0x1284>
	else if (__tmp > 65535)
    25d0:	fe 01       	movw	r30, r28
    25d2:	e3 54       	subi	r30, 0x43	; 67
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	60 81       	ld	r22, Z
    25d8:	71 81       	ldd	r23, Z+1	; 0x01
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	0c f0       	brlt	.+2      	; 0x25f0 <STEPPER_voidOn+0x11dc>
    25ee:	43 c0       	rjmp	.+134    	; 0x2676 <STEPPER_voidOn+0x1262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	fe 01       	movw	r30, r28
    25f2:	ef 53       	subi	r30, 0x3F	; 63
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	93 81       	ldd	r25, Z+3	; 0x03
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8e 01       	movw	r16, r28
    2610:	05 54       	subi	r16, 0x45	; 69
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	f8 01       	movw	r30, r16
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	1f c0       	rjmp	.+62     	; 0x2666 <STEPPER_voidOn+0x1252>
    2628:	fe 01       	movw	r30, r28
    262a:	e7 54       	subi	r30, 0x47	; 71
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	fe 01       	movw	r30, r28
    2638:	e7 54       	subi	r30, 0x47	; 71
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <STEPPER_voidOn+0x122c>
    2644:	fe 01       	movw	r30, r28
    2646:	e7 54       	subi	r30, 0x47	; 71
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	de 01       	movw	r26, r28
    2650:	a5 54       	subi	r26, 0x45	; 69
    2652:	bf 4f       	sbci	r27, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	e5 54       	subi	r30, 0x45	; 69
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	9c 93       	st	X, r25
    2664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	fe 01       	movw	r30, r28
    2668:	e5 54       	subi	r30, 0x45	; 69
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	d1 f6       	brne	.-76     	; 0x2628 <STEPPER_voidOn+0x1214>
    2674:	27 c0       	rjmp	.+78     	; 0x26c4 <STEPPER_voidOn+0x12b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	8e 01       	movw	r16, r28
    2678:	05 54       	subi	r16, 0x45	; 69
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	fe 01       	movw	r30, r28
    267e:	e3 54       	subi	r30, 0x43	; 67
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	f8 01       	movw	r30, r16
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	de 01       	movw	r26, r28
    269a:	a9 54       	subi	r26, 0x49	; 73
    269c:	bf 4f       	sbci	r27, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	e5 54       	subi	r30, 0x45	; 69
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	8d 93       	st	X+, r24
    26aa:	9c 93       	st	X, r25
    26ac:	fe 01       	movw	r30, r28
    26ae:	e9 54       	subi	r30, 0x49	; 73
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <STEPPER_voidOn+0x12a2>
    26ba:	fe 01       	movw	r30, r28
    26bc:	e9 54       	subi	r30, 0x49	; 73
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP4 : ACTIVATE COIL2 AND COIL3
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	62 e0       	ldi	r22, 0x02	; 2
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	63 e0       	ldi	r22, 0x03	; 3
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    26ec:	fe 01       	movw	r30, r28
    26ee:	ed 54       	subi	r30, 0x4D	; 77
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 ea       	ldi	r26, 0xA0	; 160
    26f8:	b1 e4       	ldi	r27, 0x41	; 65
    26fa:	80 83       	st	Z, r24
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	a2 83       	std	Z+2, r26	; 0x02
    2700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	8e 01       	movw	r16, r28
    2704:	01 55       	subi	r16, 0x51	; 81
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	fe 01       	movw	r30, r28
    270a:	ed 54       	subi	r30, 0x4D	; 77
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a ef       	ldi	r20, 0xFA	; 250
    271c:	54 e4       	ldi	r21, 0x44	; 68
    271e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	f8 01       	movw	r30, r16
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2730:	fe 01       	movw	r30, r28
    2732:	e1 55       	subi	r30, 0x51	; 81
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	44 f4       	brge	.+16     	; 0x275e <STEPPER_voidOn+0x134a>
		__ticks = 1;
    274e:	fe 01       	movw	r30, r28
    2750:	e3 55       	subi	r30, 0x53	; 83
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	64 c0       	rjmp	.+200    	; 0x2826 <STEPPER_voidOn+0x1412>
	else if (__tmp > 65535)
    275e:	fe 01       	movw	r30, r28
    2760:	e1 55       	subi	r30, 0x51	; 81
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	0c f0       	brlt	.+2      	; 0x277e <STEPPER_voidOn+0x136a>
    277c:	43 c0       	rjmp	.+134    	; 0x2804 <STEPPER_voidOn+0x13f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277e:	fe 01       	movw	r30, r28
    2780:	ed 54       	subi	r30, 0x4D	; 77
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	8e 01       	movw	r16, r28
    279e:	03 55       	subi	r16, 0x53	; 83
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	f8 01       	movw	r30, r16
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	1f c0       	rjmp	.+62     	; 0x27f4 <STEPPER_voidOn+0x13e0>
    27b6:	fe 01       	movw	r30, r28
    27b8:	e5 55       	subi	r30, 0x55	; 85
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	88 ec       	ldi	r24, 0xC8	; 200
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	fe 01       	movw	r30, r28
    27c6:	e5 55       	subi	r30, 0x55	; 85
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <STEPPER_voidOn+0x13ba>
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 55       	subi	r30, 0x55	; 85
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	de 01       	movw	r26, r28
    27de:	a3 55       	subi	r26, 0x53	; 83
    27e0:	bf 4f       	sbci	r27, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 55       	subi	r30, 0x53	; 83
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	9c 93       	st	X, r25
    27f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	fe 01       	movw	r30, r28
    27f6:	e3 55       	subi	r30, 0x53	; 83
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	d1 f6       	brne	.-76     	; 0x27b6 <STEPPER_voidOn+0x13a2>
    2802:	27 c0       	rjmp	.+78     	; 0x2852 <STEPPER_voidOn+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	8e 01       	movw	r16, r28
    2806:	03 55       	subi	r16, 0x53	; 83
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e1 55       	subi	r30, 0x51	; 81
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	f8 01       	movw	r30, r16
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
    2826:	de 01       	movw	r26, r28
    2828:	a7 55       	subi	r26, 0x57	; 87
    282a:	bf 4f       	sbci	r27, 0xFF	; 255
    282c:	fe 01       	movw	r30, r28
    282e:	e3 55       	subi	r30, 0x53	; 83
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	8d 93       	st	X+, r24
    2838:	9c 93       	st	X, r25
    283a:	fe 01       	movw	r30, r28
    283c:	e7 55       	subi	r30, 0x57	; 87
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <STEPPER_voidOn+0x1430>
    2848:	fe 01       	movw	r30, r28
    284a:	e7 55       	subi	r30, 0x57	; 87
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP5 : ACTIVATE COIL3 ONLY:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    2870:	82 e0       	ldi	r24, 0x02	; 2
    2872:	63 e0       	ldi	r22, 0x03	; 3
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    287a:	fe 01       	movw	r30, r28
    287c:	eb 55       	subi	r30, 0x5B	; 91
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 ea       	ldi	r26, 0xA0	; 160
    2886:	b1 e4       	ldi	r27, 0x41	; 65
    2888:	80 83       	st	Z, r24
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	a2 83       	std	Z+2, r26	; 0x02
    288e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	8e 01       	movw	r16, r28
    2892:	0f 55       	subi	r16, 0x5F	; 95
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	eb 55       	subi	r30, 0x5B	; 91
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a ef       	ldi	r20, 0xFA	; 250
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	f8 01       	movw	r30, r16
    28b6:	80 83       	st	Z, r24
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	a2 83       	std	Z+2, r26	; 0x02
    28bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28be:	fe 01       	movw	r30, r28
    28c0:	ef 55       	subi	r30, 0x5F	; 95
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e8       	ldi	r20, 0x80	; 128
    28d2:	5f e3       	ldi	r21, 0x3F	; 63
    28d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28d8:	88 23       	and	r24, r24
    28da:	44 f4       	brge	.+16     	; 0x28ec <STEPPER_voidOn+0x14d8>
		__ticks = 1;
    28dc:	fe 01       	movw	r30, r28
    28de:	e1 56       	subi	r30, 0x61	; 97
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
    28ea:	64 c0       	rjmp	.+200    	; 0x29b4 <STEPPER_voidOn+0x15a0>
	else if (__tmp > 65535)
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 55       	subi	r30, 0x5F	; 95
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	3f ef       	ldi	r19, 0xFF	; 255
    28fe:	4f e7       	ldi	r20, 0x7F	; 127
    2900:	57 e4       	ldi	r21, 0x47	; 71
    2902:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2906:	18 16       	cp	r1, r24
    2908:	0c f0       	brlt	.+2      	; 0x290c <STEPPER_voidOn+0x14f8>
    290a:	43 c0       	rjmp	.+134    	; 0x2992 <STEPPER_voidOn+0x157e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290c:	fe 01       	movw	r30, r28
    290e:	eb 55       	subi	r30, 0x5B	; 91
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8e 01       	movw	r16, r28
    292c:	01 56       	subi	r16, 0x61	; 97
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	f8 01       	movw	r30, r16
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	1f c0       	rjmp	.+62     	; 0x2982 <STEPPER_voidOn+0x156e>
    2944:	fe 01       	movw	r30, r28
    2946:	e3 56       	subi	r30, 0x63	; 99
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	88 ec       	ldi	r24, 0xC8	; 200
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	fe 01       	movw	r30, r28
    2954:	e3 56       	subi	r30, 0x63	; 99
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <STEPPER_voidOn+0x1548>
    2960:	fe 01       	movw	r30, r28
    2962:	e3 56       	subi	r30, 0x63	; 99
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296a:	de 01       	movw	r26, r28
    296c:	a1 56       	subi	r26, 0x61	; 97
    296e:	bf 4f       	sbci	r27, 0xFF	; 255
    2970:	fe 01       	movw	r30, r28
    2972:	e1 56       	subi	r30, 0x61	; 97
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	11 96       	adiw	r26, 0x01	; 1
    297e:	9c 93       	st	X, r25
    2980:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2982:	fe 01       	movw	r30, r28
    2984:	e1 56       	subi	r30, 0x61	; 97
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	d1 f6       	brne	.-76     	; 0x2944 <STEPPER_voidOn+0x1530>
    2990:	27 c0       	rjmp	.+78     	; 0x29e0 <STEPPER_voidOn+0x15cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2992:	8e 01       	movw	r16, r28
    2994:	01 56       	subi	r16, 0x61	; 97
    2996:	1f 4f       	sbci	r17, 0xFF	; 255
    2998:	fe 01       	movw	r30, r28
    299a:	ef 55       	subi	r30, 0x5F	; 95
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	f8 01       	movw	r30, r16
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	de 01       	movw	r26, r28
    29b6:	a5 56       	subi	r26, 0x65	; 101
    29b8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ba:	fe 01       	movw	r30, r28
    29bc:	e1 56       	subi	r30, 0x61	; 97
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	8d 93       	st	X+, r24
    29c6:	9c 93       	st	X, r25
    29c8:	fe 01       	movw	r30, r28
    29ca:	e5 56       	subi	r30, 0x65	; 101
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <STEPPER_voidOn+0x15be>
    29d6:	fe 01       	movw	r30, r28
    29d8:	e5 56       	subi	r30, 0x65	; 101
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP6 :ACTIVATE COIL3 AND COIL4:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	62 e0       	ldi	r22, 0x02	; 2
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	63 e0       	ldi	r22, 0x03	; 3
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e9 56       	subi	r30, 0x69	; 105
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 ea       	ldi	r26, 0xA0	; 160
    2a14:	b1 e4       	ldi	r27, 0x41	; 65
    2a16:	80 83       	st	Z, r24
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	a2 83       	std	Z+2, r26	; 0x02
    2a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	8e 01       	movw	r16, r28
    2a20:	0d 56       	subi	r16, 0x6D	; 109
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	e9 56       	subi	r30, 0x69	; 105
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a ef       	ldi	r20, 0xFA	; 250
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ed 56       	subi	r30, 0x6D	; 109
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e8       	ldi	r20, 0x80	; 128
    2a60:	5f e3       	ldi	r21, 0x3F	; 63
    2a62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a66:	88 23       	and	r24, r24
    2a68:	44 f4       	brge	.+16     	; 0x2a7a <STEPPER_voidOn+0x1666>
		__ticks = 1;
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ef 56       	subi	r30, 0x6F	; 111
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
    2a78:	64 c0       	rjmp	.+200    	; 0x2b42 <STEPPER_voidOn+0x172e>
	else if (__tmp > 65535)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ed 56       	subi	r30, 0x6D	; 109
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	3f ef       	ldi	r19, 0xFF	; 255
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	57 e4       	ldi	r21, 0x47	; 71
    2a90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a94:	18 16       	cp	r1, r24
    2a96:	0c f0       	brlt	.+2      	; 0x2a9a <STEPPER_voidOn+0x1686>
    2a98:	43 c0       	rjmp	.+134    	; 0x2b20 <STEPPER_voidOn+0x170c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e9 56       	subi	r30, 0x69	; 105
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	8e 01       	movw	r16, r28
    2aba:	0f 56       	subi	r16, 0x6F	; 111
    2abc:	1f 4f       	sbci	r17, 0xFF	; 255
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	f8 01       	movw	r30, r16
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
    2ad0:	1f c0       	rjmp	.+62     	; 0x2b10 <STEPPER_voidOn+0x16fc>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e1 57       	subi	r30, 0x71	; 113
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	88 ec       	ldi	r24, 0xC8	; 200
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e1 57       	subi	r30, 0x71	; 113
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <STEPPER_voidOn+0x16d6>
    2aee:	fe 01       	movw	r30, r28
    2af0:	e1 57       	subi	r30, 0x71	; 113
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	de 01       	movw	r26, r28
    2afa:	af 56       	subi	r26, 0x6F	; 111
    2afc:	bf 4f       	sbci	r27, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	ef 56       	subi	r30, 0x6F	; 111
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	11 96       	adiw	r26, 0x01	; 1
    2b0c:	9c 93       	st	X, r25
    2b0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	fe 01       	movw	r30, r28
    2b12:	ef 56       	subi	r30, 0x6F	; 111
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	d1 f6       	brne	.-76     	; 0x2ad2 <STEPPER_voidOn+0x16be>
    2b1e:	27 c0       	rjmp	.+78     	; 0x2b6e <STEPPER_voidOn+0x175a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b20:	8e 01       	movw	r16, r28
    2b22:	0f 56       	subi	r16, 0x6F	; 111
    2b24:	1f 4f       	sbci	r17, 0xFF	; 255
    2b26:	fe 01       	movw	r30, r28
    2b28:	ed 56       	subi	r30, 0x6D	; 109
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	de 01       	movw	r26, r28
    2b44:	a3 57       	subi	r26, 0x73	; 115
    2b46:	bf 4f       	sbci	r27, 0xFF	; 255
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ef 56       	subi	r30, 0x6F	; 111
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	91 81       	ldd	r25, Z+1	; 0x01
    2b52:	8d 93       	st	X+, r24
    2b54:	9c 93       	st	X, r25
    2b56:	fe 01       	movw	r30, r28
    2b58:	e3 57       	subi	r30, 0x73	; 115
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <STEPPER_voidOn+0x174c>
    2b64:	fe 01       	movw	r30, r28
    2b66:	e3 57       	subi	r30, 0x73	; 115
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP7: ACTIVATE COIL4 ONLY:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	61 e0       	ldi	r22, 0x01	; 1
    2b7c:	41 e0       	ldi	r20, 0x01	; 1
    2b7e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	62 e0       	ldi	r22, 0x02	; 2
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	63 e0       	ldi	r22, 0x03	; 3
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 57       	subi	r30, 0x77	; 119
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 ea       	ldi	r26, 0xA0	; 160
    2ba2:	b1 e4       	ldi	r27, 0x41	; 65
    2ba4:	80 83       	st	Z, r24
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	a2 83       	std	Z+2, r26	; 0x02
    2baa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bac:	8e 01       	movw	r16, r28
    2bae:	0b 57       	subi	r16, 0x7B	; 123
    2bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e7 57       	subi	r30, 0x77	; 119
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a ef       	ldi	r20, 0xFA	; 250
    2bc6:	54 e4       	ldi	r21, 0x44	; 68
    2bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	80 83       	st	Z, r24
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	a2 83       	std	Z+2, r26	; 0x02
    2bd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bda:	fe 01       	movw	r30, r28
    2bdc:	eb 57       	subi	r30, 0x7B	; 123
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	44 f4       	brge	.+16     	; 0x2c08 <STEPPER_voidOn+0x17f4>
		__ticks = 1;
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ed 57       	subi	r30, 0x7D	; 125
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	64 c0       	rjmp	.+200    	; 0x2cd0 <STEPPER_voidOn+0x18bc>
	else if (__tmp > 65535)
    2c08:	fe 01       	movw	r30, r28
    2c0a:	eb 57       	subi	r30, 0x7B	; 123
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	0c f0       	brlt	.+2      	; 0x2c28 <STEPPER_voidOn+0x1814>
    2c26:	43 c0       	rjmp	.+134    	; 0x2cae <STEPPER_voidOn+0x189a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e7 57       	subi	r30, 0x77	; 119
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
    2c34:	93 81       	ldd	r25, Z+3	; 0x03
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e2       	ldi	r20, 0x20	; 32
    2c3c:	51 e4       	ldi	r21, 0x41	; 65
    2c3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8e 01       	movw	r16, r28
    2c48:	0d 57       	subi	r16, 0x7D	; 125
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	f8 01       	movw	r30, r16
    2c5a:	91 83       	std	Z+1, r25	; 0x01
    2c5c:	80 83       	st	Z, r24
    2c5e:	1f c0       	rjmp	.+62     	; 0x2c9e <STEPPER_voidOn+0x188a>
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 57       	subi	r30, 0x7F	; 127
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ef 57       	subi	r30, 0x7F	; 127
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <STEPPER_voidOn+0x1864>
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ef 57       	subi	r30, 0x7F	; 127
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	de 01       	movw	r26, r28
    2c88:	ad 57       	subi	r26, 0x7D	; 125
    2c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 57       	subi	r30, 0x7D	; 125
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	11 96       	adiw	r26, 0x01	; 1
    2c9a:	9c 93       	st	X, r25
    2c9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ed 57       	subi	r30, 0x7D	; 125
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	d1 f6       	brne	.-76     	; 0x2c60 <STEPPER_voidOn+0x184c>
    2cac:	27 c0       	rjmp	.+78     	; 0x2cfc <STEPPER_voidOn+0x18e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	8e 01       	movw	r16, r28
    2cb0:	0d 57       	subi	r16, 0x7D	; 125
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	eb 57       	subi	r30, 0x7B	; 123
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	f8 01       	movw	r30, r16
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	de 01       	movw	r26, r28
    2cd2:	a1 58       	subi	r26, 0x81	; 129
    2cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 57       	subi	r30, 0x7D	; 125
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	8d 93       	st	X+, r24
    2ce2:	9c 93       	st	X, r25
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e1 58       	subi	r30, 0x81	; 129
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	91 81       	ldd	r25, Z+1	; 0x01
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <STEPPER_voidOn+0x18da>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e1 58       	subi	r30, 0x81	; 129
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP8: ACTIVATE COIL4 AND COIL1:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    2d06:	82 e0       	ldi	r24, 0x02	; 2
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    2d10:	82 e0       	ldi	r24, 0x02	; 2
    2d12:	62 e0       	ldi	r22, 0x02	; 2
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	63 e0       	ldi	r22, 0x03	; 3
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2d24:	fe 01       	movw	r30, r28
    2d26:	e5 58       	subi	r30, 0x85	; 133
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	a0 ea       	ldi	r26, 0xA0	; 160
    2d30:	b1 e4       	ldi	r27, 0x41	; 65
    2d32:	80 83       	st	Z, r24
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	a2 83       	std	Z+2, r26	; 0x02
    2d38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3a:	8e 01       	movw	r16, r28
    2d3c:	09 58       	subi	r16, 0x89	; 137
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	e5 58       	subi	r30, 0x85	; 133
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a ef       	ldi	r20, 0xFA	; 250
    2d54:	54 e4       	ldi	r21, 0x44	; 68
    2d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	f8 01       	movw	r30, r16
    2d60:	80 83       	st	Z, r24
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	a2 83       	std	Z+2, r26	; 0x02
    2d66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e9 58       	subi	r30, 0x89	; 137
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	82 81       	ldd	r24, Z+2	; 0x02
    2d74:	93 81       	ldd	r25, Z+3	; 0x03
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d82:	88 23       	and	r24, r24
    2d84:	44 f4       	brge	.+16     	; 0x2d96 <STEPPER_voidOn+0x1982>
		__ticks = 1;
    2d86:	fe 01       	movw	r30, r28
    2d88:	eb 58       	subi	r30, 0x8B	; 139
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	64 c0       	rjmp	.+200    	; 0x2e5e <STEPPER_voidOn+0x1a4a>
	else if (__tmp > 65535)
    2d96:	fe 01       	movw	r30, r28
    2d98:	e9 58       	subi	r30, 0x89	; 137
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	0c f0       	brlt	.+2      	; 0x2db6 <STEPPER_voidOn+0x19a2>
    2db4:	43 c0       	rjmp	.+134    	; 0x2e3c <STEPPER_voidOn+0x1a28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db6:	fe 01       	movw	r30, r28
    2db8:	e5 58       	subi	r30, 0x85	; 133
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e2       	ldi	r20, 0x20	; 32
    2dca:	51 e4       	ldi	r21, 0x41	; 65
    2dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	8e 01       	movw	r16, r28
    2dd6:	0b 58       	subi	r16, 0x8B	; 139
    2dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	f8 01       	movw	r30, r16
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
    2dec:	1f c0       	rjmp	.+62     	; 0x2e2c <STEPPER_voidOn+0x1a18>
    2dee:	fe 01       	movw	r30, r28
    2df0:	ed 58       	subi	r30, 0x8D	; 141
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	88 ec       	ldi	r24, 0xC8	; 200
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ed 58       	subi	r30, 0x8D	; 141
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <STEPPER_voidOn+0x19f2>
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ed 58       	subi	r30, 0x8D	; 141
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	de 01       	movw	r26, r28
    2e16:	ab 58       	subi	r26, 0x8B	; 139
    2e18:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	eb 58       	subi	r30, 0x8B	; 139
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	91 81       	ldd	r25, Z+1	; 0x01
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	11 96       	adiw	r26, 0x01	; 1
    2e28:	9c 93       	st	X, r25
    2e2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	eb 58       	subi	r30, 0x8B	; 139
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 81       	ld	r24, Z
    2e34:	91 81       	ldd	r25, Z+1	; 0x01
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	d1 f6       	brne	.-76     	; 0x2dee <STEPPER_voidOn+0x19da>
    2e3a:	27 c0       	rjmp	.+78     	; 0x2e8a <STEPPER_voidOn+0x1a76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3c:	8e 01       	movw	r16, r28
    2e3e:	0b 58       	subi	r16, 0x8B	; 139
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	fe 01       	movw	r30, r28
    2e44:	e9 58       	subi	r30, 0x89	; 137
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	f8 01       	movw	r30, r16
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
    2e5e:	de 01       	movw	r26, r28
    2e60:	af 58       	subi	r26, 0x8F	; 143
    2e62:	bf 4f       	sbci	r27, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	eb 58       	subi	r30, 0x8B	; 139
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	8d 93       	st	X+, r24
    2e70:	9c 93       	st	X, r25
    2e72:	fe 01       	movw	r30, r28
    2e74:	ef 58       	subi	r30, 0x8F	; 143
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <STEPPER_voidOn+0x1a68>
    2e80:	fe 01       	movw	r30, r28
    2e82:	ef 58       	subi	r30, 0x8F	; 143
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	80 83       	st	Z, r24
	else if(Copy_u8StepType == STEPPER_HALF_STEP)
	{
		u16 Local_u16Counter=0;
		if (Copy_u8Direction == STEPPER_CLOCK_WISE)
		{
			for (Local_u16Counter =0; Local_u16Counter< ((32*Copy_u16Degree)/45) ; Local_u16Counter++)
    2e8a:	de 01       	movw	r26, r28
    2e8c:	af 5a       	subi	r26, 0xAF	; 175
    2e8e:	be 4f       	sbci	r27, 0xFE	; 254
    2e90:	fe 01       	movw	r30, r28
    2e92:	ef 5a       	subi	r30, 0xAF	; 175
    2e94:	fe 4f       	sbci	r31, 0xFE	; 254
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	11 96       	adiw	r26, 0x01	; 1
    2e9e:	9c 93       	st	X, r25
    2ea0:	8e 93       	st	-X, r24
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e5 5a       	subi	r30, 0xA5	; 165
    2ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	82 95       	swap	r24
    2eb2:	92 95       	swap	r25
    2eb4:	90 7f       	andi	r25, 0xF0	; 240
    2eb6:	98 27       	eor	r25, r24
    2eb8:	80 7f       	andi	r24, 0xF0	; 240
    2eba:	98 27       	eor	r25, r24
    2ebc:	2d e2       	ldi	r18, 0x2D	; 45
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	b9 01       	movw	r22, r18
    2ec2:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <__udivmodhi4>
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	9c 01       	movw	r18, r24
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ef 5a       	subi	r30, 0xAF	; 175
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	82 17       	cp	r24, r18
    2ed6:	93 07       	cpc	r25, r19
    2ed8:	08 f4       	brcc	.+2      	; 0x2edc <STEPPER_voidOn+0x1ac8>
    2eda:	9f c9       	rjmp	.-3266   	; 0x221a <STEPPER_voidOn+0xe06>
    2edc:	3c c5       	rjmp	.+2680   	; 0x3956 <STEPPER_voidOn+0x2542>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
				_delay_ms(20);
			}

		}
		else if(Copy_u8Direction == STEPPER_COUNTER_CLOCK_WISE)
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e6 5a       	subi	r30, 0xA6	; 166
    2ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee4:	80 81       	ld	r24, Z
    2ee6:	81 30       	cpi	r24, 0x01	; 1
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <STEPPER_voidOn+0x1ad8>
    2eea:	35 c5       	rjmp	.+2666   	; 0x3956 <STEPPER_voidOn+0x2542>
		{
			for (Local_u16Counter =0; Local_u16Counter< ((32*Copy_u16Degree)/45) ; Local_u16Counter++)
    2eec:	fe 01       	movw	r30, r28
    2eee:	ef 5a       	subi	r30, 0xAF	; 175
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	11 82       	std	Z+1, r1	; 0x01
    2ef4:	10 82       	st	Z, r1
    2ef6:	12 c5       	rjmp	.+2596   	; 0x391c <STEPPER_voidOn+0x2508>
			{
				//STEP1: ACTIVATE COIL4 AND COIL1:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	61 e0       	ldi	r22, 0x01	; 1
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	62 e0       	ldi	r22, 0x02	; 2
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	63 e0       	ldi	r22, 0x03	; 3
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    2f20:	fe 01       	movw	r30, r28
    2f22:	e3 59       	subi	r30, 0x93	; 147
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	a0 ea       	ldi	r26, 0xA0	; 160
    2f2c:	b1 e4       	ldi	r27, 0x41	; 65
    2f2e:	80 83       	st	Z, r24
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	a2 83       	std	Z+2, r26	; 0x02
    2f34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f36:	8e 01       	movw	r16, r28
    2f38:	07 59       	subi	r16, 0x97	; 151
    2f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e3 59       	subi	r30, 0x93	; 147
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	60 81       	ld	r22, Z
    2f44:	71 81       	ldd	r23, Z+1	; 0x01
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a ef       	ldi	r20, 0xFA	; 250
    2f50:	54 e4       	ldi	r21, 0x44	; 68
    2f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f64:	fe 01       	movw	r30, r28
    2f66:	e7 59       	subi	r30, 0x97	; 151
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e8       	ldi	r20, 0x80	; 128
    2f78:	5f e3       	ldi	r21, 0x3F	; 63
    2f7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	44 f4       	brge	.+16     	; 0x2f92 <STEPPER_voidOn+0x1b7e>
		__ticks = 1;
    2f82:	fe 01       	movw	r30, r28
    2f84:	e9 59       	subi	r30, 0x99	; 153
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
    2f90:	64 c0       	rjmp	.+200    	; 0x305a <STEPPER_voidOn+0x1c46>
	else if (__tmp > 65535)
    2f92:	fe 01       	movw	r30, r28
    2f94:	e7 59       	subi	r30, 0x97	; 151
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	0c f0       	brlt	.+2      	; 0x2fb2 <STEPPER_voidOn+0x1b9e>
    2fb0:	43 c0       	rjmp	.+134    	; 0x3038 <STEPPER_voidOn+0x1c24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e3 59       	subi	r30, 0x93	; 147
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	60 81       	ld	r22, Z
    2fba:	71 81       	ldd	r23, Z+1	; 0x01
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	8e 01       	movw	r16, r28
    2fd2:	09 59       	subi	r16, 0x99	; 153
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	1f c0       	rjmp	.+62     	; 0x3028 <STEPPER_voidOn+0x1c14>
    2fea:	fe 01       	movw	r30, r28
    2fec:	eb 59       	subi	r30, 0x9B	; 155
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	88 ec       	ldi	r24, 0xC8	; 200
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	eb 59       	subi	r30, 0x9B	; 155
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <STEPPER_voidOn+0x1bee>
    3006:	fe 01       	movw	r30, r28
    3008:	eb 59       	subi	r30, 0x9B	; 155
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3010:	de 01       	movw	r26, r28
    3012:	a9 59       	subi	r26, 0x99	; 153
    3014:	bf 4f       	sbci	r27, 0xFF	; 255
    3016:	fe 01       	movw	r30, r28
    3018:	e9 59       	subi	r30, 0x99	; 153
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	11 96       	adiw	r26, 0x01	; 1
    3024:	9c 93       	st	X, r25
    3026:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3028:	fe 01       	movw	r30, r28
    302a:	e9 59       	subi	r30, 0x99	; 153
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	d1 f6       	brne	.-76     	; 0x2fea <STEPPER_voidOn+0x1bd6>
    3036:	27 c0       	rjmp	.+78     	; 0x3086 <STEPPER_voidOn+0x1c72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3038:	8e 01       	movw	r16, r28
    303a:	09 59       	subi	r16, 0x99	; 153
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	fe 01       	movw	r30, r28
    3040:	e7 59       	subi	r30, 0x97	; 151
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	f8 01       	movw	r30, r16
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
    305a:	de 01       	movw	r26, r28
    305c:	ad 59       	subi	r26, 0x9D	; 157
    305e:	bf 4f       	sbci	r27, 0xFF	; 255
    3060:	fe 01       	movw	r30, r28
    3062:	e9 59       	subi	r30, 0x99	; 153
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	8d 93       	st	X+, r24
    306c:	9c 93       	st	X, r25
    306e:	fe 01       	movw	r30, r28
    3070:	ed 59       	subi	r30, 0x9D	; 157
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <STEPPER_voidOn+0x1c64>
    307c:	fe 01       	movw	r30, r28
    307e:	ed 59       	subi	r30, 0x9D	; 157
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP2: ACTIVATE COIL4 ONLY:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	61 e0       	ldi	r22, 0x01	; 1
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	62 e0       	ldi	r22, 0x02	; 2
    309e:	41 e0       	ldi	r20, 0x01	; 1
    30a0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    30a4:	82 e0       	ldi	r24, 0x02	; 2
    30a6:	63 e0       	ldi	r22, 0x03	; 3
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    30ae:	fe 01       	movw	r30, r28
    30b0:	e1 5a       	subi	r30, 0xA1	; 161
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a0 ea       	ldi	r26, 0xA0	; 160
    30ba:	b1 e4       	ldi	r27, 0x41	; 65
    30bc:	80 83       	st	Z, r24
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	a2 83       	std	Z+2, r26	; 0x02
    30c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	8e 01       	movw	r16, r28
    30c6:	05 5a       	subi	r16, 0xA5	; 165
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	e1 5a       	subi	r30, 0xA1	; 161
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	4a ef       	ldi	r20, 0xFA	; 250
    30de:	54 e4       	ldi	r21, 0x44	; 68
    30e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	f8 01       	movw	r30, r16
    30ea:	80 83       	st	Z, r24
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	a2 83       	std	Z+2, r26	; 0x02
    30f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30f2:	fe 01       	movw	r30, r28
    30f4:	e5 5a       	subi	r30, 0xA5	; 165
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	60 81       	ld	r22, Z
    30fa:	71 81       	ldd	r23, Z+1	; 0x01
    30fc:	82 81       	ldd	r24, Z+2	; 0x02
    30fe:	93 81       	ldd	r25, Z+3	; 0x03
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e8       	ldi	r20, 0x80	; 128
    3106:	5f e3       	ldi	r21, 0x3F	; 63
    3108:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    310c:	88 23       	and	r24, r24
    310e:	44 f4       	brge	.+16     	; 0x3120 <STEPPER_voidOn+0x1d0c>
		__ticks = 1;
    3110:	fe 01       	movw	r30, r28
    3112:	e7 5a       	subi	r30, 0xA7	; 167
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
    311e:	64 c0       	rjmp	.+200    	; 0x31e8 <STEPPER_voidOn+0x1dd4>
	else if (__tmp > 65535)
    3120:	fe 01       	movw	r30, r28
    3122:	e5 5a       	subi	r30, 0xA5	; 165
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	60 81       	ld	r22, Z
    3128:	71 81       	ldd	r23, Z+1	; 0x01
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	93 81       	ldd	r25, Z+3	; 0x03
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	3f ef       	ldi	r19, 0xFF	; 255
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	57 e4       	ldi	r21, 0x47	; 71
    3136:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	0c f0       	brlt	.+2      	; 0x3140 <STEPPER_voidOn+0x1d2c>
    313e:	43 c0       	rjmp	.+134    	; 0x31c6 <STEPPER_voidOn+0x1db2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3140:	fe 01       	movw	r30, r28
    3142:	e1 5a       	subi	r30, 0xA1	; 161
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e2       	ldi	r20, 0x20	; 32
    3154:	51 e4       	ldi	r21, 0x41	; 65
    3156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	8e 01       	movw	r16, r28
    3160:	07 5a       	subi	r16, 0xA7	; 167
    3162:	1f 4f       	sbci	r17, 0xFF	; 255
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	f8 01       	movw	r30, r16
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	80 83       	st	Z, r24
    3176:	1f c0       	rjmp	.+62     	; 0x31b6 <STEPPER_voidOn+0x1da2>
    3178:	fe 01       	movw	r30, r28
    317a:	e9 5a       	subi	r30, 0xA9	; 169
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	88 ec       	ldi	r24, 0xC8	; 200
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	fe 01       	movw	r30, r28
    3188:	e9 5a       	subi	r30, 0xA9	; 169
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <STEPPER_voidOn+0x1d7c>
    3194:	fe 01       	movw	r30, r28
    3196:	e9 5a       	subi	r30, 0xA9	; 169
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319e:	de 01       	movw	r26, r28
    31a0:	a7 5a       	subi	r26, 0xA7	; 167
    31a2:	bf 4f       	sbci	r27, 0xFF	; 255
    31a4:	fe 01       	movw	r30, r28
    31a6:	e7 5a       	subi	r30, 0xA7	; 167
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	11 96       	adiw	r26, 0x01	; 1
    31b2:	9c 93       	st	X, r25
    31b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b6:	fe 01       	movw	r30, r28
    31b8:	e7 5a       	subi	r30, 0xA7	; 167
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	d1 f6       	brne	.-76     	; 0x3178 <STEPPER_voidOn+0x1d64>
    31c4:	27 c0       	rjmp	.+78     	; 0x3214 <STEPPER_voidOn+0x1e00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c6:	8e 01       	movw	r16, r28
    31c8:	07 5a       	subi	r16, 0xA7	; 167
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	fe 01       	movw	r30, r28
    31ce:	e5 5a       	subi	r30, 0xA5	; 165
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	f8 01       	movw	r30, r16
    31e4:	91 83       	std	Z+1, r25	; 0x01
    31e6:	80 83       	st	Z, r24
    31e8:	de 01       	movw	r26, r28
    31ea:	ab 5a       	subi	r26, 0xAB	; 171
    31ec:	bf 4f       	sbci	r27, 0xFF	; 255
    31ee:	fe 01       	movw	r30, r28
    31f0:	e7 5a       	subi	r30, 0xA7	; 167
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	8d 93       	st	X+, r24
    31fa:	9c 93       	st	X, r25
    31fc:	fe 01       	movw	r30, r28
    31fe:	eb 5a       	subi	r30, 0xAB	; 171
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <STEPPER_voidOn+0x1df2>
    320a:	fe 01       	movw	r30, r28
    320c:	eb 5a       	subi	r30, 0xAB	; 171
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP3 :ACTIVATE COIL3 AND COIL4:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	41 e0       	ldi	r20, 0x01	; 1
    321a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    321e:	82 e0       	ldi	r24, 0x02	; 2
    3220:	61 e0       	ldi	r22, 0x01	; 1
    3222:	41 e0       	ldi	r20, 0x01	; 1
    3224:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    3228:	82 e0       	ldi	r24, 0x02	; 2
    322a:	62 e0       	ldi	r22, 0x02	; 2
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_LOW);
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	63 e0       	ldi	r22, 0x03	; 3
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    323c:	fe 01       	movw	r30, r28
    323e:	ef 5a       	subi	r30, 0xAF	; 175
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 ea       	ldi	r26, 0xA0	; 160
    3248:	b1 e4       	ldi	r27, 0x41	; 65
    324a:	80 83       	st	Z, r24
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	a2 83       	std	Z+2, r26	; 0x02
    3250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	8e 01       	movw	r16, r28
    3254:	03 5b       	subi	r16, 0xB3	; 179
    3256:	1f 4f       	sbci	r17, 0xFF	; 255
    3258:	fe 01       	movw	r30, r28
    325a:	ef 5a       	subi	r30, 0xAF	; 175
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	60 81       	ld	r22, Z
    3260:	71 81       	ldd	r23, Z+1	; 0x01
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	4a ef       	ldi	r20, 0xFA	; 250
    326c:	54 e4       	ldi	r21, 0x44	; 68
    326e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	f8 01       	movw	r30, r16
    3278:	80 83       	st	Z, r24
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	a2 83       	std	Z+2, r26	; 0x02
    327e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3280:	fe 01       	movw	r30, r28
    3282:	e3 5b       	subi	r30, 0xB3	; 179
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	60 81       	ld	r22, Z
    3288:	71 81       	ldd	r23, Z+1	; 0x01
    328a:	82 81       	ldd	r24, Z+2	; 0x02
    328c:	93 81       	ldd	r25, Z+3	; 0x03
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    329a:	88 23       	and	r24, r24
    329c:	44 f4       	brge	.+16     	; 0x32ae <STEPPER_voidOn+0x1e9a>
		__ticks = 1;
    329e:	fe 01       	movw	r30, r28
    32a0:	e5 5b       	subi	r30, 0xB5	; 181
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	80 83       	st	Z, r24
    32ac:	64 c0       	rjmp	.+200    	; 0x3376 <STEPPER_voidOn+0x1f62>
	else if (__tmp > 65535)
    32ae:	fe 01       	movw	r30, r28
    32b0:	e3 5b       	subi	r30, 0xB3	; 179
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	0c f0       	brlt	.+2      	; 0x32ce <STEPPER_voidOn+0x1eba>
    32cc:	43 c0       	rjmp	.+134    	; 0x3354 <STEPPER_voidOn+0x1f40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ce:	fe 01       	movw	r30, r28
    32d0:	ef 5a       	subi	r30, 0xAF	; 175
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8e 01       	movw	r16, r28
    32ee:	05 5b       	subi	r16, 0xB5	; 181
    32f0:	1f 4f       	sbci	r17, 0xFF	; 255
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	f8 01       	movw	r30, r16
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
    3304:	1f c0       	rjmp	.+62     	; 0x3344 <STEPPER_voidOn+0x1f30>
    3306:	fe 01       	movw	r30, r28
    3308:	e7 5b       	subi	r30, 0xB7	; 183
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	88 ec       	ldi	r24, 0xC8	; 200
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    3314:	fe 01       	movw	r30, r28
    3316:	e7 5b       	subi	r30, 0xB7	; 183
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <STEPPER_voidOn+0x1f0a>
    3322:	fe 01       	movw	r30, r28
    3324:	e7 5b       	subi	r30, 0xB7	; 183
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	de 01       	movw	r26, r28
    332e:	a5 5b       	subi	r26, 0xB5	; 181
    3330:	bf 4f       	sbci	r27, 0xFF	; 255
    3332:	fe 01       	movw	r30, r28
    3334:	e5 5b       	subi	r30, 0xB5	; 181
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	11 96       	adiw	r26, 0x01	; 1
    3340:	9c 93       	st	X, r25
    3342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3344:	fe 01       	movw	r30, r28
    3346:	e5 5b       	subi	r30, 0xB5	; 181
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	d1 f6       	brne	.-76     	; 0x3306 <STEPPER_voidOn+0x1ef2>
    3352:	27 c0       	rjmp	.+78     	; 0x33a2 <STEPPER_voidOn+0x1f8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3354:	8e 01       	movw	r16, r28
    3356:	05 5b       	subi	r16, 0xB5	; 181
    3358:	1f 4f       	sbci	r17, 0xFF	; 255
    335a:	fe 01       	movw	r30, r28
    335c:	e3 5b       	subi	r30, 0xB3	; 179
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	f8 01       	movw	r30, r16
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
    3376:	de 01       	movw	r26, r28
    3378:	a9 5b       	subi	r26, 0xB9	; 185
    337a:	bf 4f       	sbci	r27, 0xFF	; 255
    337c:	fe 01       	movw	r30, r28
    337e:	e5 5b       	subi	r30, 0xB5	; 181
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	8d 93       	st	X+, r24
    3388:	9c 93       	st	X, r25
    338a:	fe 01       	movw	r30, r28
    338c:	e9 5b       	subi	r30, 0xB9	; 185
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	80 81       	ld	r24, Z
    3392:	91 81       	ldd	r25, Z+1	; 0x01
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <STEPPER_voidOn+0x1f80>
    3398:	fe 01       	movw	r30, r28
    339a:	e9 5b       	subi	r30, 0xB9	; 185
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
				_delay_ms(20);

				//STEP4 : ACTIVATE COIL3 ONLY:
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    33ac:	82 e0       	ldi	r24, 0x02	; 2
    33ae:	61 e0       	ldi	r22, 0x01	; 1
    33b0:	41 e0       	ldi	r20, 0x01	; 1
    33b2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    33b6:	82 e0       	ldi	r24, 0x02	; 2
    33b8:	62 e0       	ldi	r22, 0x02	; 2
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	63 e0       	ldi	r22, 0x03	; 3
    33c4:	41 e0       	ldi	r20, 0x01	; 1
    33c6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    33ca:	fe 01       	movw	r30, r28
    33cc:	ed 5b       	subi	r30, 0xBD	; 189
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	a0 ea       	ldi	r26, 0xA0	; 160
    33d6:	b1 e4       	ldi	r27, 0x41	; 65
    33d8:	80 83       	st	Z, r24
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	a2 83       	std	Z+2, r26	; 0x02
    33de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e0:	8e 01       	movw	r16, r28
    33e2:	01 5c       	subi	r16, 0xC1	; 193
    33e4:	1f 4f       	sbci	r17, 0xFF	; 255
    33e6:	fe 01       	movw	r30, r28
    33e8:	ed 5b       	subi	r30, 0xBD	; 189
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	60 81       	ld	r22, Z
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	4a ef       	ldi	r20, 0xFA	; 250
    33fa:	54 e4       	ldi	r21, 0x44	; 68
    33fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	f8 01       	movw	r30, r16
    3406:	80 83       	st	Z, r24
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	a2 83       	std	Z+2, r26	; 0x02
    340c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    340e:	fe 01       	movw	r30, r28
    3410:	ff 96       	adiw	r30, 0x3f	; 63
    3412:	60 81       	ld	r22, Z
    3414:	71 81       	ldd	r23, Z+1	; 0x01
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	5f e3       	ldi	r21, 0x3F	; 63
    3422:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3426:	88 23       	and	r24, r24
    3428:	2c f4       	brge	.+10     	; 0x3434 <STEPPER_voidOn+0x2020>
		__ticks = 1;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	9e af       	std	Y+62, r25	; 0x3e
    3430:	8d af       	std	Y+61, r24	; 0x3d
    3432:	46 c0       	rjmp	.+140    	; 0x34c0 <STEPPER_voidOn+0x20ac>
	else if (__tmp > 65535)
    3434:	fe 01       	movw	r30, r28
    3436:	ff 96       	adiw	r30, 0x3f	; 63
    3438:	60 81       	ld	r22, Z
    343a:	71 81       	ldd	r23, Z+1	; 0x01
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	93 81       	ldd	r25, Z+3	; 0x03
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	64 f5       	brge	.+88     	; 0x34a8 <STEPPER_voidOn+0x2094>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3450:	fe 01       	movw	r30, r28
    3452:	ed 5b       	subi	r30, 0xBD	; 189
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	60 81       	ld	r22, Z
    3458:	71 81       	ldd	r23, Z+1	; 0x01
    345a:	82 81       	ldd	r24, Z+2	; 0x02
    345c:	93 81       	ldd	r25, Z+3	; 0x03
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e2       	ldi	r20, 0x20	; 32
    3464:	51 e4       	ldi	r21, 0x41	; 65
    3466:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	9e af       	std	Y+62, r25	; 0x3e
    347c:	8d af       	std	Y+61, r24	; 0x3d
    347e:	0f c0       	rjmp	.+30     	; 0x349e <STEPPER_voidOn+0x208a>
    3480:	88 ec       	ldi	r24, 0xC8	; 200
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	9c af       	std	Y+60, r25	; 0x3c
    3486:	8b af       	std	Y+59, r24	; 0x3b
    3488:	8b ad       	ldd	r24, Y+59	; 0x3b
    348a:	9c ad       	ldd	r25, Y+60	; 0x3c
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <STEPPER_voidOn+0x2078>
    3490:	9c af       	std	Y+60, r25	; 0x3c
    3492:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3494:	8d ad       	ldd	r24, Y+61	; 0x3d
    3496:	9e ad       	ldd	r25, Y+62	; 0x3e
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	9e af       	std	Y+62, r25	; 0x3e
    349c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349e:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	69 f7       	brne	.-38     	; 0x3480 <STEPPER_voidOn+0x206c>
    34a6:	16 c0       	rjmp	.+44     	; 0x34d4 <STEPPER_voidOn+0x20c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a8:	fe 01       	movw	r30, r28
    34aa:	ff 96       	adiw	r30, 0x3f	; 63
    34ac:	60 81       	ld	r22, Z
    34ae:	71 81       	ldd	r23, Z+1	; 0x01
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	93 81       	ldd	r25, Z+3	; 0x03
    34b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e af       	std	Y+62, r25	; 0x3e
    34be:	8d af       	std	Y+61, r24	; 0x3d
    34c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    34c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    34c4:	9a af       	std	Y+58, r25	; 0x3a
    34c6:	89 af       	std	Y+57, r24	; 0x39
    34c8:	89 ad       	ldd	r24, Y+57	; 0x39
    34ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <STEPPER_voidOn+0x20b8>
    34d0:	9a af       	std	Y+58, r25	; 0x3a
    34d2:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(20);

				//STEP5 : ACTIVATE COIL2 AND COIL3
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    34d4:	82 e0       	ldi	r24, 0x02	; 2
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	40 e0       	ldi	r20, 0x00	; 0
    34e4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_LOW);
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	62 e0       	ldi	r22, 0x02	; 2
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    34f2:	82 e0       	ldi	r24, 0x02	; 2
    34f4:	63 e0       	ldi	r22, 0x03	; 3
    34f6:	41 e0       	ldi	r20, 0x01	; 1
    34f8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	a0 ea       	ldi	r26, 0xA0	; 160
    3502:	b1 e4       	ldi	r27, 0x41	; 65
    3504:	8d ab       	std	Y+53, r24	; 0x35
    3506:	9e ab       	std	Y+54, r25	; 0x36
    3508:	af ab       	std	Y+55, r26	; 0x37
    350a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350c:	6d a9       	ldd	r22, Y+53	; 0x35
    350e:	7e a9       	ldd	r23, Y+54	; 0x36
    3510:	8f a9       	ldd	r24, Y+55	; 0x37
    3512:	98 ad       	ldd	r25, Y+56	; 0x38
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	4a ef       	ldi	r20, 0xFA	; 250
    351a:	54 e4       	ldi	r21, 0x44	; 68
    351c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	89 ab       	std	Y+49, r24	; 0x31
    3526:	9a ab       	std	Y+50, r25	; 0x32
    3528:	ab ab       	std	Y+51, r26	; 0x33
    352a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    352c:	69 a9       	ldd	r22, Y+49	; 0x31
    352e:	7a a9       	ldd	r23, Y+50	; 0x32
    3530:	8b a9       	ldd	r24, Y+51	; 0x33
    3532:	9c a9       	ldd	r25, Y+52	; 0x34
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e8       	ldi	r20, 0x80	; 128
    353a:	5f e3       	ldi	r21, 0x3F	; 63
    353c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3540:	88 23       	and	r24, r24
    3542:	2c f4       	brge	.+10     	; 0x354e <STEPPER_voidOn+0x213a>
		__ticks = 1;
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	98 ab       	std	Y+48, r25	; 0x30
    354a:	8f a7       	std	Y+47, r24	; 0x2f
    354c:	3f c0       	rjmp	.+126    	; 0x35cc <STEPPER_voidOn+0x21b8>
	else if (__tmp > 65535)
    354e:	69 a9       	ldd	r22, Y+49	; 0x31
    3550:	7a a9       	ldd	r23, Y+50	; 0x32
    3552:	8b a9       	ldd	r24, Y+51	; 0x33
    3554:	9c a9       	ldd	r25, Y+52	; 0x34
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	3f ef       	ldi	r19, 0xFF	; 255
    355a:	4f e7       	ldi	r20, 0x7F	; 127
    355c:	57 e4       	ldi	r21, 0x47	; 71
    355e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3562:	18 16       	cp	r1, r24
    3564:	4c f5       	brge	.+82     	; 0x35b8 <STEPPER_voidOn+0x21a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3566:	6d a9       	ldd	r22, Y+53	; 0x35
    3568:	7e a9       	ldd	r23, Y+54	; 0x36
    356a:	8f a9       	ldd	r24, Y+55	; 0x37
    356c:	98 ad       	ldd	r25, Y+56	; 0x38
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e2       	ldi	r20, 0x20	; 32
    3574:	51 e4       	ldi	r21, 0x41	; 65
    3576:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	98 ab       	std	Y+48, r25	; 0x30
    358c:	8f a7       	std	Y+47, r24	; 0x2f
    358e:	0f c0       	rjmp	.+30     	; 0x35ae <STEPPER_voidOn+0x219a>
    3590:	88 ec       	ldi	r24, 0xC8	; 200
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9e a7       	std	Y+46, r25	; 0x2e
    3596:	8d a7       	std	Y+45, r24	; 0x2d
    3598:	8d a5       	ldd	r24, Y+45	; 0x2d
    359a:	9e a5       	ldd	r25, Y+46	; 0x2e
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <STEPPER_voidOn+0x2188>
    35a0:	9e a7       	std	Y+46, r25	; 0x2e
    35a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a6:	98 a9       	ldd	r25, Y+48	; 0x30
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	98 ab       	std	Y+48, r25	; 0x30
    35ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b0:	98 a9       	ldd	r25, Y+48	; 0x30
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	69 f7       	brne	.-38     	; 0x3590 <STEPPER_voidOn+0x217c>
    35b6:	14 c0       	rjmp	.+40     	; 0x35e0 <STEPPER_voidOn+0x21cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b8:	69 a9       	ldd	r22, Y+49	; 0x31
    35ba:	7a a9       	ldd	r23, Y+50	; 0x32
    35bc:	8b a9       	ldd	r24, Y+51	; 0x33
    35be:	9c a9       	ldd	r25, Y+52	; 0x34
    35c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	98 ab       	std	Y+48, r25	; 0x30
    35ca:	8f a7       	std	Y+47, r24	; 0x2f
    35cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ce:	98 a9       	ldd	r25, Y+48	; 0x30
    35d0:	9c a7       	std	Y+44, r25	; 0x2c
    35d2:	8b a7       	std	Y+43, r24	; 0x2b
    35d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    35d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <STEPPER_voidOn+0x21c4>
    35dc:	9c a7       	std	Y+44, r25	; 0x2c
    35de:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);

				//STEP6 ACTIVATE COIL2 ONLY
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	60 e0       	ldi	r22, 0x00	; 0
    35e4:	41 e0       	ldi	r20, 0x01	; 1
    35e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	61 e0       	ldi	r22, 0x01	; 1
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	62 e0       	ldi	r22, 0x02	; 2
    35f8:	41 e0       	ldi	r20, 0x01	; 1
    35fa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	63 e0       	ldi	r22, 0x03	; 3
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 ea       	ldi	r26, 0xA0	; 160
    360e:	b1 e4       	ldi	r27, 0x41	; 65
    3610:	8f a3       	std	Y+39, r24	; 0x27
    3612:	98 a7       	std	Y+40, r25	; 0x28
    3614:	a9 a7       	std	Y+41, r26	; 0x29
    3616:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	6f a1       	ldd	r22, Y+39	; 0x27
    361a:	78 a5       	ldd	r23, Y+40	; 0x28
    361c:	89 a5       	ldd	r24, Y+41	; 0x29
    361e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a ef       	ldi	r20, 0xFA	; 250
    3626:	54 e4       	ldi	r21, 0x44	; 68
    3628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	8b a3       	std	Y+35, r24	; 0x23
    3632:	9c a3       	std	Y+36, r25	; 0x24
    3634:	ad a3       	std	Y+37, r26	; 0x25
    3636:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3638:	6b a1       	ldd	r22, Y+35	; 0x23
    363a:	7c a1       	ldd	r23, Y+36	; 0x24
    363c:	8d a1       	ldd	r24, Y+37	; 0x25
    363e:	9e a1       	ldd	r25, Y+38	; 0x26
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <STEPPER_voidOn+0x2246>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9a a3       	std	Y+34, r25	; 0x22
    3656:	89 a3       	std	Y+33, r24	; 0x21
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <STEPPER_voidOn+0x22c4>
	else if (__tmp > 65535)
    365a:	6b a1       	ldd	r22, Y+35	; 0x23
    365c:	7c a1       	ldd	r23, Y+36	; 0x24
    365e:	8d a1       	ldd	r24, Y+37	; 0x25
    3660:	9e a1       	ldd	r25, Y+38	; 0x26
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <STEPPER_voidOn+0x22b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	6f a1       	ldd	r22, Y+39	; 0x27
    3674:	78 a5       	ldd	r23, Y+40	; 0x28
    3676:	89 a5       	ldd	r24, Y+41	; 0x29
    3678:	9a a5       	ldd	r25, Y+42	; 0x2a
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9a a3       	std	Y+34, r25	; 0x22
    3698:	89 a3       	std	Y+33, r24	; 0x21
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <STEPPER_voidOn+0x22a6>
    369c:	88 ec       	ldi	r24, 0xC8	; 200
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	98 a3       	std	Y+32, r25	; 0x20
    36a2:	8f 8f       	std	Y+31, r24	; 0x1f
    36a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36a6:	98 a1       	ldd	r25, Y+32	; 0x20
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <STEPPER_voidOn+0x2294>
    36ac:	98 a3       	std	Y+32, r25	; 0x20
    36ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	89 a1       	ldd	r24, Y+33	; 0x21
    36b2:	9a a1       	ldd	r25, Y+34	; 0x22
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	9a a3       	std	Y+34, r25	; 0x22
    36b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	89 a1       	ldd	r24, Y+33	; 0x21
    36bc:	9a a1       	ldd	r25, Y+34	; 0x22
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <STEPPER_voidOn+0x2288>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <STEPPER_voidOn+0x22d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	6b a1       	ldd	r22, Y+35	; 0x23
    36c6:	7c a1       	ldd	r23, Y+36	; 0x24
    36c8:	8d a1       	ldd	r24, Y+37	; 0x25
    36ca:	9e a1       	ldd	r25, Y+38	; 0x26
    36cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9a a3       	std	Y+34, r25	; 0x22
    36d6:	89 a3       	std	Y+33, r24	; 0x21
    36d8:	89 a1       	ldd	r24, Y+33	; 0x21
    36da:	9a a1       	ldd	r25, Y+34	; 0x22
    36dc:	9e 8f       	std	Y+30, r25	; 0x1e
    36de:	8d 8f       	std	Y+29, r24	; 0x1d
    36e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <STEPPER_voidOn+0x22d0>
    36e8:	9e 8f       	std	Y+30, r25	; 0x1e
    36ea:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(20);

				//STEP7 ACTIVATE COIL 1 AND COIL2
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_LOW);
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	62 e0       	ldi	r22, 0x02	; 2
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	63 e0       	ldi	r22, 0x03	; 3
    370e:	41 e0       	ldi	r20, 0x01	; 1
    3710:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	a0 ea       	ldi	r26, 0xA0	; 160
    371a:	b1 e4       	ldi	r27, 0x41	; 65
    371c:	89 8f       	std	Y+25, r24	; 0x19
    371e:	9a 8f       	std	Y+26, r25	; 0x1a
    3720:	ab 8f       	std	Y+27, r26	; 0x1b
    3722:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3724:	69 8d       	ldd	r22, Y+25	; 0x19
    3726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	4a ef       	ldi	r20, 0xFA	; 250
    3732:	54 e4       	ldi	r21, 0x44	; 68
    3734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	8d 8b       	std	Y+21, r24	; 0x15
    373e:	9e 8b       	std	Y+22, r25	; 0x16
    3740:	af 8b       	std	Y+23, r26	; 0x17
    3742:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3744:	6d 89       	ldd	r22, Y+21	; 0x15
    3746:	7e 89       	ldd	r23, Y+22	; 0x16
    3748:	8f 89       	ldd	r24, Y+23	; 0x17
    374a:	98 8d       	ldd	r25, Y+24	; 0x18
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3758:	88 23       	and	r24, r24
    375a:	2c f4       	brge	.+10     	; 0x3766 <STEPPER_voidOn+0x2352>
		__ticks = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9c 8b       	std	Y+20, r25	; 0x14
    3762:	8b 8b       	std	Y+19, r24	; 0x13
    3764:	3f c0       	rjmp	.+126    	; 0x37e4 <STEPPER_voidOn+0x23d0>
	else if (__tmp > 65535)
    3766:	6d 89       	ldd	r22, Y+21	; 0x15
    3768:	7e 89       	ldd	r23, Y+22	; 0x16
    376a:	8f 89       	ldd	r24, Y+23	; 0x17
    376c:	98 8d       	ldd	r25, Y+24	; 0x18
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	3f ef       	ldi	r19, 0xFF	; 255
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	57 e4       	ldi	r21, 0x47	; 71
    3776:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    377a:	18 16       	cp	r1, r24
    377c:	4c f5       	brge	.+82     	; 0x37d0 <STEPPER_voidOn+0x23bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377e:	69 8d       	ldd	r22, Y+25	; 0x19
    3780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e2       	ldi	r20, 0x20	; 32
    378c:	51 e4       	ldi	r21, 0x41	; 65
    378e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	9c 8b       	std	Y+20, r25	; 0x14
    37a4:	8b 8b       	std	Y+19, r24	; 0x13
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <STEPPER_voidOn+0x23b2>
    37a8:	88 ec       	ldi	r24, 0xC8	; 200
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	9a 8b       	std	Y+18, r25	; 0x12
    37ae:	89 8b       	std	Y+17, r24	; 0x11
    37b0:	89 89       	ldd	r24, Y+17	; 0x11
    37b2:	9a 89       	ldd	r25, Y+18	; 0x12
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <STEPPER_voidOn+0x23a0>
    37b8:	9a 8b       	std	Y+18, r25	; 0x12
    37ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37bc:	8b 89       	ldd	r24, Y+19	; 0x13
    37be:	9c 89       	ldd	r25, Y+20	; 0x14
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	9c 8b       	std	Y+20, r25	; 0x14
    37c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c6:	8b 89       	ldd	r24, Y+19	; 0x13
    37c8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	69 f7       	brne	.-38     	; 0x37a8 <STEPPER_voidOn+0x2394>
    37ce:	14 c0       	rjmp	.+40     	; 0x37f8 <STEPPER_voidOn+0x23e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d0:	6d 89       	ldd	r22, Y+21	; 0x15
    37d2:	7e 89       	ldd	r23, Y+22	; 0x16
    37d4:	8f 89       	ldd	r24, Y+23	; 0x17
    37d6:	98 8d       	ldd	r25, Y+24	; 0x18
    37d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9c 8b       	std	Y+20, r25	; 0x14
    37e2:	8b 8b       	std	Y+19, r24	; 0x13
    37e4:	8b 89       	ldd	r24, Y+19	; 0x13
    37e6:	9c 89       	ldd	r25, Y+20	; 0x14
    37e8:	98 8b       	std	Y+16, r25	; 0x10
    37ea:	8f 87       	std	Y+15, r24	; 0x0f
    37ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ee:	98 89       	ldd	r25, Y+16	; 0x10
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <STEPPER_voidOn+0x23dc>
    37f4:	98 8b       	std	Y+16, r25	; 0x10
    37f6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);

				//STEP1 : ACTIVATE COIL1 ONLY
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_LOW);
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	40 e0       	ldi	r20, 0x00	; 0
    37fe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	61 e0       	ldi	r22, 0x01	; 1
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	62 e0       	ldi	r22, 0x02	; 2
    3810:	41 e0       	ldi	r20, 0x01	; 1
    3812:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	63 e0       	ldi	r22, 0x03	; 3
    381a:	41 e0       	ldi	r20, 0x01	; 1
    381c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 ea       	ldi	r26, 0xA0	; 160
    3826:	b1 e4       	ldi	r27, 0x41	; 65
    3828:	8b 87       	std	Y+11, r24	; 0x0b
    382a:	9c 87       	std	Y+12, r25	; 0x0c
    382c:	ad 87       	std	Y+13, r26	; 0x0d
    382e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	4a ef       	ldi	r20, 0xFA	; 250
    383e:	54 e4       	ldi	r21, 0x44	; 68
    3840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	8f 83       	std	Y+7, r24	; 0x07
    384a:	98 87       	std	Y+8, r25	; 0x08
    384c:	a9 87       	std	Y+9, r26	; 0x09
    384e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3850:	6f 81       	ldd	r22, Y+7	; 0x07
    3852:	78 85       	ldd	r23, Y+8	; 0x08
    3854:	89 85       	ldd	r24, Y+9	; 0x09
    3856:	9a 85       	ldd	r25, Y+10	; 0x0a
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e8       	ldi	r20, 0x80	; 128
    385e:	5f e3       	ldi	r21, 0x3F	; 63
    3860:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3864:	88 23       	and	r24, r24
    3866:	2c f4       	brge	.+10     	; 0x3872 <STEPPER_voidOn+0x245e>
		__ticks = 1;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9e 83       	std	Y+6, r25	; 0x06
    386e:	8d 83       	std	Y+5, r24	; 0x05
    3870:	3f c0       	rjmp	.+126    	; 0x38f0 <STEPPER_voidOn+0x24dc>
	else if (__tmp > 65535)
    3872:	6f 81       	ldd	r22, Y+7	; 0x07
    3874:	78 85       	ldd	r23, Y+8	; 0x08
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	3f ef       	ldi	r19, 0xFF	; 255
    387e:	4f e7       	ldi	r20, 0x7F	; 127
    3880:	57 e4       	ldi	r21, 0x47	; 71
    3882:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3886:	18 16       	cp	r1, r24
    3888:	4c f5       	brge	.+82     	; 0x38dc <STEPPER_voidOn+0x24c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388a:	6b 85       	ldd	r22, Y+11	; 0x0b
    388c:	7c 85       	ldd	r23, Y+12	; 0x0c
    388e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3890:	9e 85       	ldd	r25, Y+14	; 0x0e
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e2       	ldi	r20, 0x20	; 32
    3898:	51 e4       	ldi	r21, 0x41	; 65
    389a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	bc 01       	movw	r22, r24
    38a4:	cd 01       	movw	r24, r26
    38a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9e 83       	std	Y+6, r25	; 0x06
    38b0:	8d 83       	std	Y+5, r24	; 0x05
    38b2:	0f c0       	rjmp	.+30     	; 0x38d2 <STEPPER_voidOn+0x24be>
    38b4:	88 ec       	ldi	r24, 0xC8	; 200
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	9c 83       	std	Y+4, r25	; 0x04
    38ba:	8b 83       	std	Y+3, r24	; 0x03
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	9c 81       	ldd	r25, Y+4	; 0x04
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <STEPPER_voidOn+0x24ac>
    38c4:	9c 83       	std	Y+4, r25	; 0x04
    38c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	9e 83       	std	Y+6, r25	; 0x06
    38d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	69 f7       	brne	.-38     	; 0x38b4 <STEPPER_voidOn+0x24a0>
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <STEPPER_voidOn+0x24f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38dc:	6f 81       	ldd	r22, Y+7	; 0x07
    38de:	78 85       	ldd	r23, Y+8	; 0x08
    38e0:	89 85       	ldd	r24, Y+9	; 0x09
    38e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9e 83       	std	Y+6, r25	; 0x06
    38ee:	8d 83       	std	Y+5, r24	; 0x05
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	9e 81       	ldd	r25, Y+6	; 0x06
    38f4:	9a 83       	std	Y+2, r25	; 0x02
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <STEPPER_voidOn+0x24e8>
    3900:	9a 83       	std	Y+2, r25	; 0x02
    3902:	89 83       	std	Y+1, r24	; 0x01
			}

		}
		else if(Copy_u8Direction == STEPPER_COUNTER_CLOCK_WISE)
		{
			for (Local_u16Counter =0; Local_u16Counter< ((32*Copy_u16Degree)/45) ; Local_u16Counter++)
    3904:	de 01       	movw	r26, r28
    3906:	af 5a       	subi	r26, 0xAF	; 175
    3908:	be 4f       	sbci	r27, 0xFE	; 254
    390a:	fe 01       	movw	r30, r28
    390c:	ef 5a       	subi	r30, 0xAF	; 175
    390e:	fe 4f       	sbci	r31, 0xFE	; 254
    3910:	80 81       	ld	r24, Z
    3912:	91 81       	ldd	r25, Z+1	; 0x01
    3914:	01 96       	adiw	r24, 0x01	; 1
    3916:	11 96       	adiw	r26, 0x01	; 1
    3918:	9c 93       	st	X, r25
    391a:	8e 93       	st	-X, r24
    391c:	fe 01       	movw	r30, r28
    391e:	e5 5a       	subi	r30, 0xA5	; 165
    3920:	fe 4f       	sbci	r31, 0xFE	; 254
    3922:	80 81       	ld	r24, Z
    3924:	91 81       	ldd	r25, Z+1	; 0x01
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	82 95       	swap	r24
    392c:	92 95       	swap	r25
    392e:	90 7f       	andi	r25, 0xF0	; 240
    3930:	98 27       	eor	r25, r24
    3932:	80 7f       	andi	r24, 0xF0	; 240
    3934:	98 27       	eor	r25, r24
    3936:	2d e2       	ldi	r18, 0x2D	; 45
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	b9 01       	movw	r22, r18
    393c:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <__udivmodhi4>
    3940:	cb 01       	movw	r24, r22
    3942:	9c 01       	movw	r18, r24
    3944:	fe 01       	movw	r30, r28
    3946:	ef 5a       	subi	r30, 0xAF	; 175
    3948:	fe 4f       	sbci	r31, 0xFE	; 254
    394a:	80 81       	ld	r24, Z
    394c:	91 81       	ldd	r25, Z+1	; 0x01
    394e:	82 17       	cp	r24, r18
    3950:	93 07       	cpc	r25, r19
    3952:	08 f4       	brcc	.+2      	; 0x3956 <STEPPER_voidOn+0x2542>
    3954:	d1 ca       	rjmp	.-2654   	; 0x2ef8 <STEPPER_voidOn+0x1ae4>
				DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
				_delay_ms(20);
			}
		}
	}
}
    3956:	c4 5a       	subi	r28, 0xA4	; 164
    3958:	de 4f       	sbci	r29, 0xFE	; 254
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	1f 91       	pop	r17
    396a:	0f 91       	pop	r16
    396c:	08 95       	ret

0000396e <STEPPER_voidOff>:

void STEPPER_voidOff( void )
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_BLUE_PIN,   DIO_HIGH);
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	41 e0       	ldi	r20, 0x01	; 1
    397c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_PINK_PIN,   DIO_HIGH);
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	41 e0       	ldi	r20, 0x01	; 1
    3986:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_YELLOW_PIN, DIO_HIGH);
    398a:	82 e0       	ldi	r24, 0x02	; 2
    398c:	62 e0       	ldi	r22, 0x02	; 2
    398e:	41 e0       	ldi	r20, 0x01	; 1
    3990:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, STEPPER_ORANGE_PIN, DIO_HIGH);
    3994:	82 e0       	ldi	r24, 0x02	; 2
    3996:	63 e0       	ldi	r22, 0x03	; 3
    3998:	41 e0       	ldi	r20, 0x01	; 1
    399a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
}
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <STEPPER_voidRotate>:

void STEPPER_voidRotate ( u8 Copy_u8Direction ){
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	cf 57       	subi	r28, 0x7F	; 127
    39b2:	d0 40       	sbci	r29, 0x00	; 0
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	fe 01       	movw	r30, r28
    39c0:	e1 58       	subi	r30, 0x81	; 129
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 83       	st	Z, r24
	if (Copy_u8Direction == STEPPER_COUNTER_CLOCK_WISE)
    39c6:	fe 01       	movw	r30, r28
    39c8:	e1 58       	subi	r30, 0x81	; 129
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	80 81       	ld	r24, Z
    39ce:	81 30       	cpi	r24, 0x01	; 1
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <STEPPER_voidRotate+0x30>
    39d2:	ce c2       	rjmp	.+1436   	; 0x3f70 <STEPPER_voidRotate+0x5cc>
    39d4:	fe 01       	movw	r30, r28
    39d6:	e5 58       	subi	r30, 0x85	; 133
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	aa ef       	ldi	r26, 0xFA	; 250
    39e0:	b4 e4       	ldi	r27, 0x44	; 68
    39e2:	80 83       	st	Z, r24
    39e4:	91 83       	std	Z+1, r25	; 0x01
    39e6:	a2 83       	std	Z+2, r26	; 0x02
    39e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ea:	8e 01       	movw	r16, r28
    39ec:	09 58       	subi	r16, 0x89	; 137
    39ee:	1f 4f       	sbci	r17, 0xFF	; 255
    39f0:	fe 01       	movw	r30, r28
    39f2:	e5 58       	subi	r30, 0x85	; 133
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	4a ef       	ldi	r20, 0xFA	; 250
    3a04:	54 e4       	ldi	r21, 0x44	; 68
    3a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	f8 01       	movw	r30, r16
    3a10:	80 83       	st	Z, r24
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	a2 83       	std	Z+2, r26	; 0x02
    3a16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e9 58       	subi	r30, 0x89	; 137
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	60 81       	ld	r22, Z
    3a20:	71 81       	ldd	r23, Z+1	; 0x01
    3a22:	82 81       	ldd	r24, Z+2	; 0x02
    3a24:	93 81       	ldd	r25, Z+3	; 0x03
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e8       	ldi	r20, 0x80	; 128
    3a2c:	5f e3       	ldi	r21, 0x3F	; 63
    3a2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a32:	88 23       	and	r24, r24
    3a34:	44 f4       	brge	.+16     	; 0x3a46 <STEPPER_voidRotate+0xa2>
		__ticks = 1;
    3a36:	fe 01       	movw	r30, r28
    3a38:	eb 58       	subi	r30, 0x8B	; 139
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	91 83       	std	Z+1, r25	; 0x01
    3a42:	80 83       	st	Z, r24
    3a44:	64 c0       	rjmp	.+200    	; 0x3b0e <STEPPER_voidRotate+0x16a>
	else if (__tmp > 65535)
    3a46:	fe 01       	movw	r30, r28
    3a48:	e9 58       	subi	r30, 0x89	; 137
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	60 81       	ld	r22, Z
    3a4e:	71 81       	ldd	r23, Z+1	; 0x01
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	3f ef       	ldi	r19, 0xFF	; 255
    3a58:	4f e7       	ldi	r20, 0x7F	; 127
    3a5a:	57 e4       	ldi	r21, 0x47	; 71
    3a5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a60:	18 16       	cp	r1, r24
    3a62:	0c f0       	brlt	.+2      	; 0x3a66 <STEPPER_voidRotate+0xc2>
    3a64:	43 c0       	rjmp	.+134    	; 0x3aec <STEPPER_voidRotate+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a66:	fe 01       	movw	r30, r28
    3a68:	e5 58       	subi	r30, 0x85	; 133
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e2       	ldi	r20, 0x20	; 32
    3a7a:	51 e4       	ldi	r21, 0x41	; 65
    3a7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	8e 01       	movw	r16, r28
    3a86:	0b 58       	subi	r16, 0x8B	; 139
    3a88:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	f8 01       	movw	r30, r16
    3a98:	91 83       	std	Z+1, r25	; 0x01
    3a9a:	80 83       	st	Z, r24
    3a9c:	1f c0       	rjmp	.+62     	; 0x3adc <STEPPER_voidRotate+0x138>
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	ed 58       	subi	r30, 0x8D	; 141
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	88 ec       	ldi	r24, 0xC8	; 200
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	80 83       	st	Z, r24
    3aac:	fe 01       	movw	r30, r28
    3aae:	ed 58       	subi	r30, 0x8D	; 141
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <STEPPER_voidRotate+0x112>
    3aba:	fe 01       	movw	r30, r28
    3abc:	ed 58       	subi	r30, 0x8D	; 141
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac4:	de 01       	movw	r26, r28
    3ac6:	ab 58       	subi	r26, 0x8B	; 139
    3ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aca:	fe 01       	movw	r30, r28
    3acc:	eb 58       	subi	r30, 0x8B	; 139
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	11 96       	adiw	r26, 0x01	; 1
    3ad8:	9c 93       	st	X, r25
    3ada:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3adc:	fe 01       	movw	r30, r28
    3ade:	eb 58       	subi	r30, 0x8B	; 139
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 81       	ld	r24, Z
    3ae4:	91 81       	ldd	r25, Z+1	; 0x01
    3ae6:	00 97       	sbiw	r24, 0x00	; 0
    3ae8:	d1 f6       	brne	.-76     	; 0x3a9e <STEPPER_voidRotate+0xfa>
    3aea:	27 c0       	rjmp	.+78     	; 0x3b3a <STEPPER_voidRotate+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aec:	8e 01       	movw	r16, r28
    3aee:	0b 58       	subi	r16, 0x8B	; 139
    3af0:	1f 4f       	sbci	r17, 0xFF	; 255
    3af2:	fe 01       	movw	r30, r28
    3af4:	e9 58       	subi	r30, 0x89	; 137
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	82 81       	ldd	r24, Z+2	; 0x02
    3afe:	93 81       	ldd	r25, Z+3	; 0x03
    3b00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	f8 01       	movw	r30, r16
    3b0a:	91 83       	std	Z+1, r25	; 0x01
    3b0c:	80 83       	st	Z, r24
    3b0e:	de 01       	movw	r26, r28
    3b10:	af 58       	subi	r26, 0x8F	; 143
    3b12:	bf 4f       	sbci	r27, 0xFF	; 255
    3b14:	fe 01       	movw	r30, r28
    3b16:	eb 58       	subi	r30, 0x8B	; 139
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	80 81       	ld	r24, Z
    3b1c:	91 81       	ldd	r25, Z+1	; 0x01
    3b1e:	8d 93       	st	X+, r24
    3b20:	9c 93       	st	X, r25
    3b22:	fe 01       	movw	r30, r28
    3b24:	ef 58       	subi	r30, 0x8F	; 143
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	80 81       	ld	r24, Z
    3b2a:	91 81       	ldd	r25, Z+1	; 0x01
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	f1 f7       	brne	.-4      	; 0x3b2c <STEPPER_voidRotate+0x188>
    3b30:	fe 01       	movw	r30, r28
    3b32:	ef 58       	subi	r30, 0x8F	; 143
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e3 59       	subi	r30, 0x93	; 147
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	aa ef       	ldi	r26, 0xFA	; 250
    3b46:	b4 e4       	ldi	r27, 0x44	; 68
    3b48:	80 83       	st	Z, r24
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	a2 83       	std	Z+2, r26	; 0x02
    3b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b50:	8e 01       	movw	r16, r28
    3b52:	07 59       	subi	r16, 0x97	; 151
    3b54:	1f 4f       	sbci	r17, 0xFF	; 255
    3b56:	fe 01       	movw	r30, r28
    3b58:	e3 59       	subi	r30, 0x93	; 147
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a ef       	ldi	r20, 0xFA	; 250
    3b6a:	54 e4       	ldi	r21, 0x44	; 68
    3b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	f8 01       	movw	r30, r16
    3b76:	80 83       	st	Z, r24
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	a2 83       	std	Z+2, r26	; 0x02
    3b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e7 59       	subi	r30, 0x97	; 151
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e8       	ldi	r20, 0x80	; 128
    3b92:	5f e3       	ldi	r21, 0x3F	; 63
    3b94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b98:	88 23       	and	r24, r24
    3b9a:	44 f4       	brge	.+16     	; 0x3bac <STEPPER_voidRotate+0x208>
		__ticks = 1;
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 59       	subi	r30, 0x99	; 153
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	64 c0       	rjmp	.+200    	; 0x3c74 <STEPPER_voidRotate+0x2d0>
	else if (__tmp > 65535)
    3bac:	fe 01       	movw	r30, r28
    3bae:	e7 59       	subi	r30, 0x97	; 151
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f ef       	ldi	r19, 0xFF	; 255
    3bbe:	4f e7       	ldi	r20, 0x7F	; 127
    3bc0:	57 e4       	ldi	r21, 0x47	; 71
    3bc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3bc6:	18 16       	cp	r1, r24
    3bc8:	0c f0       	brlt	.+2      	; 0x3bcc <STEPPER_voidRotate+0x228>
    3bca:	43 c0       	rjmp	.+134    	; 0x3c52 <STEPPER_voidRotate+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e3 59       	subi	r30, 0x93	; 147
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	8e 01       	movw	r16, r28
    3bec:	09 59       	subi	r16, 0x99	; 153
    3bee:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	1f c0       	rjmp	.+62     	; 0x3c42 <STEPPER_voidRotate+0x29e>
    3c04:	fe 01       	movw	r30, r28
    3c06:	eb 59       	subi	r30, 0x9B	; 155
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	88 ec       	ldi	r24, 0xC8	; 200
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	fe 01       	movw	r30, r28
    3c14:	eb 59       	subi	r30, 0x9B	; 155
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <STEPPER_voidRotate+0x278>
    3c20:	fe 01       	movw	r30, r28
    3c22:	eb 59       	subi	r30, 0x9B	; 155
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	de 01       	movw	r26, r28
    3c2c:	a9 59       	subi	r26, 0x99	; 153
    3c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	e9 59       	subi	r30, 0x99	; 153
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	11 96       	adiw	r26, 0x01	; 1
    3c3e:	9c 93       	st	X, r25
    3c40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c42:	fe 01       	movw	r30, r28
    3c44:	e9 59       	subi	r30, 0x99	; 153
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	d1 f6       	brne	.-76     	; 0x3c04 <STEPPER_voidRotate+0x260>
    3c50:	27 c0       	rjmp	.+78     	; 0x3ca0 <STEPPER_voidRotate+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c52:	8e 01       	movw	r16, r28
    3c54:	09 59       	subi	r16, 0x99	; 153
    3c56:	1f 4f       	sbci	r17, 0xFF	; 255
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e7 59       	subi	r30, 0x97	; 151
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	f8 01       	movw	r30, r16
    3c70:	91 83       	std	Z+1, r25	; 0x01
    3c72:	80 83       	st	Z, r24
    3c74:	de 01       	movw	r26, r28
    3c76:	ad 59       	subi	r26, 0x9D	; 157
    3c78:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	e9 59       	subi	r30, 0x99	; 153
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	80 81       	ld	r24, Z
    3c82:	91 81       	ldd	r25, Z+1	; 0x01
    3c84:	8d 93       	st	X+, r24
    3c86:	9c 93       	st	X, r25
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ed 59       	subi	r30, 0x9D	; 157
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <STEPPER_voidRotate+0x2ee>
    3c96:	fe 01       	movw	r30, r28
    3c98:	ed 59       	subi	r30, 0x9D	; 157
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e1 5a       	subi	r30, 0xA1	; 161
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	aa ef       	ldi	r26, 0xFA	; 250
    3cac:	b4 e4       	ldi	r27, 0x44	; 68
    3cae:	80 83       	st	Z, r24
    3cb0:	91 83       	std	Z+1, r25	; 0x01
    3cb2:	a2 83       	std	Z+2, r26	; 0x02
    3cb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb6:	8e 01       	movw	r16, r28
    3cb8:	05 5a       	subi	r16, 0xA5	; 165
    3cba:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	e1 5a       	subi	r30, 0xA1	; 161
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	60 81       	ld	r22, Z
    3cc4:	71 81       	ldd	r23, Z+1	; 0x01
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a ef       	ldi	r20, 0xFA	; 250
    3cd0:	54 e4       	ldi	r21, 0x44	; 68
    3cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	f8 01       	movw	r30, r16
    3cdc:	80 83       	st	Z, r24
    3cde:	91 83       	std	Z+1, r25	; 0x01
    3ce0:	a2 83       	std	Z+2, r26	; 0x02
    3ce2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e5 5a       	subi	r30, 0xA5	; 165
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e8       	ldi	r20, 0x80	; 128
    3cf8:	5f e3       	ldi	r21, 0x3F	; 63
    3cfa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3cfe:	88 23       	and	r24, r24
    3d00:	44 f4       	brge	.+16     	; 0x3d12 <STEPPER_voidRotate+0x36e>
		__ticks = 1;
    3d02:	fe 01       	movw	r30, r28
    3d04:	e7 5a       	subi	r30, 0xA7	; 167
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	91 83       	std	Z+1, r25	; 0x01
    3d0e:	80 83       	st	Z, r24
    3d10:	64 c0       	rjmp	.+200    	; 0x3dda <STEPPER_voidRotate+0x436>
	else if (__tmp > 65535)
    3d12:	fe 01       	movw	r30, r28
    3d14:	e5 5a       	subi	r30, 0xA5	; 165
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	3f ef       	ldi	r19, 0xFF	; 255
    3d24:	4f e7       	ldi	r20, 0x7F	; 127
    3d26:	57 e4       	ldi	r21, 0x47	; 71
    3d28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <STEPPER_voidRotate+0x38e>
    3d30:	43 c0       	rjmp	.+134    	; 0x3db8 <STEPPER_voidRotate+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d32:	fe 01       	movw	r30, r28
    3d34:	e1 5a       	subi	r30, 0xA1	; 161
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	60 81       	ld	r22, Z
    3d3a:	71 81       	ldd	r23, Z+1	; 0x01
    3d3c:	82 81       	ldd	r24, Z+2	; 0x02
    3d3e:	93 81       	ldd	r25, Z+3	; 0x03
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e2       	ldi	r20, 0x20	; 32
    3d46:	51 e4       	ldi	r21, 0x41	; 65
    3d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	8e 01       	movw	r16, r28
    3d52:	07 5a       	subi	r16, 0xA7	; 167
    3d54:	1f 4f       	sbci	r17, 0xFF	; 255
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	f8 01       	movw	r30, r16
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
    3d68:	1f c0       	rjmp	.+62     	; 0x3da8 <STEPPER_voidRotate+0x404>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e9 5a       	subi	r30, 0xA9	; 169
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	88 ec       	ldi	r24, 0xC8	; 200
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e9 5a       	subi	r30, 0xA9	; 169
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	80 81       	ld	r24, Z
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <STEPPER_voidRotate+0x3de>
    3d86:	fe 01       	movw	r30, r28
    3d88:	e9 5a       	subi	r30, 0xA9	; 169
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	91 83       	std	Z+1, r25	; 0x01
    3d8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d90:	de 01       	movw	r26, r28
    3d92:	a7 5a       	subi	r26, 0xA7	; 167
    3d94:	bf 4f       	sbci	r27, 0xFF	; 255
    3d96:	fe 01       	movw	r30, r28
    3d98:	e7 5a       	subi	r30, 0xA7	; 167
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	11 96       	adiw	r26, 0x01	; 1
    3da4:	9c 93       	st	X, r25
    3da6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da8:	fe 01       	movw	r30, r28
    3daa:	e7 5a       	subi	r30, 0xA7	; 167
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	80 81       	ld	r24, Z
    3db0:	91 81       	ldd	r25, Z+1	; 0x01
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	d1 f6       	brne	.-76     	; 0x3d6a <STEPPER_voidRotate+0x3c6>
    3db6:	27 c0       	rjmp	.+78     	; 0x3e06 <STEPPER_voidRotate+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db8:	8e 01       	movw	r16, r28
    3dba:	07 5a       	subi	r16, 0xA7	; 167
    3dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e5 5a       	subi	r30, 0xA5	; 165
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	60 81       	ld	r22, Z
    3dc6:	71 81       	ldd	r23, Z+1	; 0x01
    3dc8:	82 81       	ldd	r24, Z+2	; 0x02
    3dca:	93 81       	ldd	r25, Z+3	; 0x03
    3dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	80 83       	st	Z, r24
    3dda:	de 01       	movw	r26, r28
    3ddc:	ab 5a       	subi	r26, 0xAB	; 171
    3dde:	bf 4f       	sbci	r27, 0xFF	; 255
    3de0:	fe 01       	movw	r30, r28
    3de2:	e7 5a       	subi	r30, 0xA7	; 167
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	8d 93       	st	X+, r24
    3dec:	9c 93       	st	X, r25
    3dee:	fe 01       	movw	r30, r28
    3df0:	eb 5a       	subi	r30, 0xAB	; 171
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <STEPPER_voidRotate+0x454>
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	eb 5a       	subi	r30, 0xAB	; 171
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	fe 01       	movw	r30, r28
    3e08:	ef 5a       	subi	r30, 0xAF	; 175
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	aa ef       	ldi	r26, 0xFA	; 250
    3e12:	b4 e4       	ldi	r27, 0x44	; 68
    3e14:	80 83       	st	Z, r24
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	a2 83       	std	Z+2, r26	; 0x02
    3e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	03 5b       	subi	r16, 0xB3	; 179
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	fe 01       	movw	r30, r28
    3e24:	ef 5a       	subi	r30, 0xAF	; 175
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	4a ef       	ldi	r20, 0xFA	; 250
    3e36:	54 e4       	ldi	r21, 0x44	; 68
    3e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	f8 01       	movw	r30, r16
    3e42:	80 83       	st	Z, r24
    3e44:	91 83       	std	Z+1, r25	; 0x01
    3e46:	a2 83       	std	Z+2, r26	; 0x02
    3e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e3 5b       	subi	r30, 0xB3	; 179
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	60 81       	ld	r22, Z
    3e52:	71 81       	ldd	r23, Z+1	; 0x01
    3e54:	82 81       	ldd	r24, Z+2	; 0x02
    3e56:	93 81       	ldd	r25, Z+3	; 0x03
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e8       	ldi	r20, 0x80	; 128
    3e5e:	5f e3       	ldi	r21, 0x3F	; 63
    3e60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3e64:	88 23       	and	r24, r24
    3e66:	44 f4       	brge	.+16     	; 0x3e78 <STEPPER_voidRotate+0x4d4>
		__ticks = 1;
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e5 5b       	subi	r30, 0xB5	; 181
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
    3e76:	64 c0       	rjmp	.+200    	; 0x3f40 <STEPPER_voidRotate+0x59c>
	else if (__tmp > 65535)
    3e78:	fe 01       	movw	r30, r28
    3e7a:	e3 5b       	subi	r30, 0xB3	; 179
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	60 81       	ld	r22, Z
    3e80:	71 81       	ldd	r23, Z+1	; 0x01
    3e82:	82 81       	ldd	r24, Z+2	; 0x02
    3e84:	93 81       	ldd	r25, Z+3	; 0x03
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	3f ef       	ldi	r19, 0xFF	; 255
    3e8a:	4f e7       	ldi	r20, 0x7F	; 127
    3e8c:	57 e4       	ldi	r21, 0x47	; 71
    3e8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3e92:	18 16       	cp	r1, r24
    3e94:	0c f0       	brlt	.+2      	; 0x3e98 <STEPPER_voidRotate+0x4f4>
    3e96:	43 c0       	rjmp	.+134    	; 0x3f1e <STEPPER_voidRotate+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e98:	fe 01       	movw	r30, r28
    3e9a:	ef 5a       	subi	r30, 0xAF	; 175
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	60 81       	ld	r22, Z
    3ea0:	71 81       	ldd	r23, Z+1	; 0x01
    3ea2:	82 81       	ldd	r24, Z+2	; 0x02
    3ea4:	93 81       	ldd	r25, Z+3	; 0x03
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e2       	ldi	r20, 0x20	; 32
    3eac:	51 e4       	ldi	r21, 0x41	; 65
    3eae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	8e 01       	movw	r16, r28
    3eb8:	05 5b       	subi	r16, 0xB5	; 181
    3eba:	1f 4f       	sbci	r17, 0xFF	; 255
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	f8 01       	movw	r30, r16
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
    3ece:	1f c0       	rjmp	.+62     	; 0x3f0e <STEPPER_voidRotate+0x56a>
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	e7 5b       	subi	r30, 0xB7	; 183
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	88 ec       	ldi	r24, 0xC8	; 200
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
    3ede:	fe 01       	movw	r30, r28
    3ee0:	e7 5b       	subi	r30, 0xB7	; 183
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	80 81       	ld	r24, Z
    3ee6:	91 81       	ldd	r25, Z+1	; 0x01
    3ee8:	01 97       	sbiw	r24, 0x01	; 1
    3eea:	f1 f7       	brne	.-4      	; 0x3ee8 <STEPPER_voidRotate+0x544>
    3eec:	fe 01       	movw	r30, r28
    3eee:	e7 5b       	subi	r30, 0xB7	; 183
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	91 83       	std	Z+1, r25	; 0x01
    3ef4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef6:	de 01       	movw	r26, r28
    3ef8:	a5 5b       	subi	r26, 0xB5	; 181
    3efa:	bf 4f       	sbci	r27, 0xFF	; 255
    3efc:	fe 01       	movw	r30, r28
    3efe:	e5 5b       	subi	r30, 0xB5	; 181
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	80 81       	ld	r24, Z
    3f04:	91 81       	ldd	r25, Z+1	; 0x01
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	11 96       	adiw	r26, 0x01	; 1
    3f0a:	9c 93       	st	X, r25
    3f0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f0e:	fe 01       	movw	r30, r28
    3f10:	e5 5b       	subi	r30, 0xB5	; 181
    3f12:	ff 4f       	sbci	r31, 0xFF	; 255
    3f14:	80 81       	ld	r24, Z
    3f16:	91 81       	ldd	r25, Z+1	; 0x01
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	d1 f6       	brne	.-76     	; 0x3ed0 <STEPPER_voidRotate+0x52c>
    3f1c:	7d c2       	rjmp	.+1274   	; 0x4418 <STEPPER_voidRotate+0xa74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f1e:	8e 01       	movw	r16, r28
    3f20:	05 5b       	subi	r16, 0xB5	; 181
    3f22:	1f 4f       	sbci	r17, 0xFF	; 255
    3f24:	fe 01       	movw	r30, r28
    3f26:	e3 5b       	subi	r30, 0xB3	; 179
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	60 81       	ld	r22, Z
    3f2c:	71 81       	ldd	r23, Z+1	; 0x01
    3f2e:	82 81       	ldd	r24, Z+2	; 0x02
    3f30:	93 81       	ldd	r25, Z+3	; 0x03
    3f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	80 83       	st	Z, r24
    3f40:	de 01       	movw	r26, r28
    3f42:	a9 5b       	subi	r26, 0xB9	; 185
    3f44:	bf 4f       	sbci	r27, 0xFF	; 255
    3f46:	fe 01       	movw	r30, r28
    3f48:	e5 5b       	subi	r30, 0xB5	; 181
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	11 96       	adiw	r26, 0x01	; 1
    3f52:	9c 93       	st	X, r25
    3f54:	8e 93       	st	-X, r24
    3f56:	fe 01       	movw	r30, r28
    3f58:	e9 5b       	subi	r30, 0xB9	; 185
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	f1 f7       	brne	.-4      	; 0x3f60 <STEPPER_voidRotate+0x5bc>
    3f64:	fe 01       	movw	r30, r28
    3f66:	e9 5b       	subi	r30, 0xB9	; 185
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
    3f6e:	54 c2       	rjmp	.+1192   	; 0x4418 <STEPPER_voidRotate+0xa74>
		//STEP1
		ASSIGN_REG(PORTC_REG,0x09);
		_delay_ms(2000);

	}
	else if(Copy_u8Direction == STEPPER_CLOCK_WISE)
    3f70:	fe 01       	movw	r30, r28
    3f72:	e1 58       	subi	r30, 0x81	; 129
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	88 23       	and	r24, r24
    3f7a:	09 f0       	breq	.+2      	; 0x3f7e <STEPPER_voidRotate+0x5da>
    3f7c:	4d c2       	rjmp	.+1178   	; 0x4418 <STEPPER_voidRotate+0xa74>
    3f7e:	fe 01       	movw	r30, r28
    3f80:	ed 5b       	subi	r30, 0xBD	; 189
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	aa ef       	ldi	r26, 0xFA	; 250
    3f8a:	b4 e4       	ldi	r27, 0x44	; 68
    3f8c:	80 83       	st	Z, r24
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	a2 83       	std	Z+2, r26	; 0x02
    3f92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f94:	8e 01       	movw	r16, r28
    3f96:	01 5c       	subi	r16, 0xC1	; 193
    3f98:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	ed 5b       	subi	r30, 0xBD	; 189
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	60 81       	ld	r22, Z
    3fa2:	71 81       	ldd	r23, Z+1	; 0x01
    3fa4:	82 81       	ldd	r24, Z+2	; 0x02
    3fa6:	93 81       	ldd	r25, Z+3	; 0x03
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	4a ef       	ldi	r20, 0xFA	; 250
    3fae:	54 e4       	ldi	r21, 0x44	; 68
    3fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	f8 01       	movw	r30, r16
    3fba:	80 83       	st	Z, r24
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	a2 83       	std	Z+2, r26	; 0x02
    3fc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ff 96       	adiw	r30, 0x3f	; 63
    3fc6:	60 81       	ld	r22, Z
    3fc8:	71 81       	ldd	r23, Z+1	; 0x01
    3fca:	82 81       	ldd	r24, Z+2	; 0x02
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3fda:	88 23       	and	r24, r24
    3fdc:	2c f4       	brge	.+10     	; 0x3fe8 <STEPPER_voidRotate+0x644>
		__ticks = 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9e af       	std	Y+62, r25	; 0x3e
    3fe4:	8d af       	std	Y+61, r24	; 0x3d
    3fe6:	46 c0       	rjmp	.+140    	; 0x4074 <STEPPER_voidRotate+0x6d0>
	else if (__tmp > 65535)
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ff 96       	adiw	r30, 0x3f	; 63
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	3f ef       	ldi	r19, 0xFF	; 255
    3ff8:	4f e7       	ldi	r20, 0x7F	; 127
    3ffa:	57 e4       	ldi	r21, 0x47	; 71
    3ffc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4000:	18 16       	cp	r1, r24
    4002:	64 f5       	brge	.+88     	; 0x405c <STEPPER_voidRotate+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4004:	fe 01       	movw	r30, r28
    4006:	ed 5b       	subi	r30, 0xBD	; 189
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	60 81       	ld	r22, Z
    400c:	71 81       	ldd	r23, Z+1	; 0x01
    400e:	82 81       	ldd	r24, Z+2	; 0x02
    4010:	93 81       	ldd	r25, Z+3	; 0x03
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e2       	ldi	r20, 0x20	; 32
    4018:	51 e4       	ldi	r21, 0x41	; 65
    401a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	9e af       	std	Y+62, r25	; 0x3e
    4030:	8d af       	std	Y+61, r24	; 0x3d
    4032:	0f c0       	rjmp	.+30     	; 0x4052 <STEPPER_voidRotate+0x6ae>
    4034:	88 ec       	ldi	r24, 0xC8	; 200
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9c af       	std	Y+60, r25	; 0x3c
    403a:	8b af       	std	Y+59, r24	; 0x3b
    403c:	8b ad       	ldd	r24, Y+59	; 0x3b
    403e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <STEPPER_voidRotate+0x69c>
    4044:	9c af       	std	Y+60, r25	; 0x3c
    4046:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4048:	8d ad       	ldd	r24, Y+61	; 0x3d
    404a:	9e ad       	ldd	r25, Y+62	; 0x3e
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	9e af       	std	Y+62, r25	; 0x3e
    4050:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4052:	8d ad       	ldd	r24, Y+61	; 0x3d
    4054:	9e ad       	ldd	r25, Y+62	; 0x3e
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	69 f7       	brne	.-38     	; 0x4034 <STEPPER_voidRotate+0x690>
    405a:	16 c0       	rjmp	.+44     	; 0x4088 <STEPPER_voidRotate+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405c:	fe 01       	movw	r30, r28
    405e:	ff 96       	adiw	r30, 0x3f	; 63
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9e af       	std	Y+62, r25	; 0x3e
    4072:	8d af       	std	Y+61, r24	; 0x3d
    4074:	8d ad       	ldd	r24, Y+61	; 0x3d
    4076:	9e ad       	ldd	r25, Y+62	; 0x3e
    4078:	9a af       	std	Y+58, r25	; 0x3a
    407a:	89 af       	std	Y+57, r24	; 0x39
    407c:	89 ad       	ldd	r24, Y+57	; 0x39
    407e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <STEPPER_voidRotate+0x6dc>
    4084:	9a af       	std	Y+58, r25	; 0x3a
    4086:	89 af       	std	Y+57, r24	; 0x39
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	aa ef       	ldi	r26, 0xFA	; 250
    408e:	b4 e4       	ldi	r27, 0x44	; 68
    4090:	8d ab       	std	Y+53, r24	; 0x35
    4092:	9e ab       	std	Y+54, r25	; 0x36
    4094:	af ab       	std	Y+55, r26	; 0x37
    4096:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4098:	6d a9       	ldd	r22, Y+53	; 0x35
    409a:	7e a9       	ldd	r23, Y+54	; 0x36
    409c:	8f a9       	ldd	r24, Y+55	; 0x37
    409e:	98 ad       	ldd	r25, Y+56	; 0x38
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	4a ef       	ldi	r20, 0xFA	; 250
    40a6:	54 e4       	ldi	r21, 0x44	; 68
    40a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	89 ab       	std	Y+49, r24	; 0x31
    40b2:	9a ab       	std	Y+50, r25	; 0x32
    40b4:	ab ab       	std	Y+51, r26	; 0x33
    40b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40b8:	69 a9       	ldd	r22, Y+49	; 0x31
    40ba:	7a a9       	ldd	r23, Y+50	; 0x32
    40bc:	8b a9       	ldd	r24, Y+51	; 0x33
    40be:	9c a9       	ldd	r25, Y+52	; 0x34
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e8       	ldi	r20, 0x80	; 128
    40c6:	5f e3       	ldi	r21, 0x3F	; 63
    40c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    40cc:	88 23       	and	r24, r24
    40ce:	2c f4       	brge	.+10     	; 0x40da <STEPPER_voidRotate+0x736>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	98 ab       	std	Y+48, r25	; 0x30
    40d6:	8f a7       	std	Y+47, r24	; 0x2f
    40d8:	3f c0       	rjmp	.+126    	; 0x4158 <STEPPER_voidRotate+0x7b4>
	else if (__tmp > 65535)
    40da:	69 a9       	ldd	r22, Y+49	; 0x31
    40dc:	7a a9       	ldd	r23, Y+50	; 0x32
    40de:	8b a9       	ldd	r24, Y+51	; 0x33
    40e0:	9c a9       	ldd	r25, Y+52	; 0x34
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	3f ef       	ldi	r19, 0xFF	; 255
    40e6:	4f e7       	ldi	r20, 0x7F	; 127
    40e8:	57 e4       	ldi	r21, 0x47	; 71
    40ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    40ee:	18 16       	cp	r1, r24
    40f0:	4c f5       	brge	.+82     	; 0x4144 <STEPPER_voidRotate+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f2:	6d a9       	ldd	r22, Y+53	; 0x35
    40f4:	7e a9       	ldd	r23, Y+54	; 0x36
    40f6:	8f a9       	ldd	r24, Y+55	; 0x37
    40f8:	98 ad       	ldd	r25, Y+56	; 0x38
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e2       	ldi	r20, 0x20	; 32
    4100:	51 e4       	ldi	r21, 0x41	; 65
    4102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	bc 01       	movw	r22, r24
    410c:	cd 01       	movw	r24, r26
    410e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	98 ab       	std	Y+48, r25	; 0x30
    4118:	8f a7       	std	Y+47, r24	; 0x2f
    411a:	0f c0       	rjmp	.+30     	; 0x413a <STEPPER_voidRotate+0x796>
    411c:	88 ec       	ldi	r24, 0xC8	; 200
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	9e a7       	std	Y+46, r25	; 0x2e
    4122:	8d a7       	std	Y+45, r24	; 0x2d
    4124:	8d a5       	ldd	r24, Y+45	; 0x2d
    4126:	9e a5       	ldd	r25, Y+46	; 0x2e
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <STEPPER_voidRotate+0x784>
    412c:	9e a7       	std	Y+46, r25	; 0x2e
    412e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4130:	8f a5       	ldd	r24, Y+47	; 0x2f
    4132:	98 a9       	ldd	r25, Y+48	; 0x30
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	98 ab       	std	Y+48, r25	; 0x30
    4138:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413a:	8f a5       	ldd	r24, Y+47	; 0x2f
    413c:	98 a9       	ldd	r25, Y+48	; 0x30
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	69 f7       	brne	.-38     	; 0x411c <STEPPER_voidRotate+0x778>
    4142:	14 c0       	rjmp	.+40     	; 0x416c <STEPPER_voidRotate+0x7c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4144:	69 a9       	ldd	r22, Y+49	; 0x31
    4146:	7a a9       	ldd	r23, Y+50	; 0x32
    4148:	8b a9       	ldd	r24, Y+51	; 0x33
    414a:	9c a9       	ldd	r25, Y+52	; 0x34
    414c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	98 ab       	std	Y+48, r25	; 0x30
    4156:	8f a7       	std	Y+47, r24	; 0x2f
    4158:	8f a5       	ldd	r24, Y+47	; 0x2f
    415a:	98 a9       	ldd	r25, Y+48	; 0x30
    415c:	9c a7       	std	Y+44, r25	; 0x2c
    415e:	8b a7       	std	Y+43, r24	; 0x2b
    4160:	8b a5       	ldd	r24, Y+43	; 0x2b
    4162:	9c a5       	ldd	r25, Y+44	; 0x2c
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <STEPPER_voidRotate+0x7c0>
    4168:	9c a7       	std	Y+44, r25	; 0x2c
    416a:	8b a7       	std	Y+43, r24	; 0x2b
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	aa ef       	ldi	r26, 0xFA	; 250
    4172:	b4 e4       	ldi	r27, 0x44	; 68
    4174:	8f a3       	std	Y+39, r24	; 0x27
    4176:	98 a7       	std	Y+40, r25	; 0x28
    4178:	a9 a7       	std	Y+41, r26	; 0x29
    417a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417c:	6f a1       	ldd	r22, Y+39	; 0x27
    417e:	78 a5       	ldd	r23, Y+40	; 0x28
    4180:	89 a5       	ldd	r24, Y+41	; 0x29
    4182:	9a a5       	ldd	r25, Y+42	; 0x2a
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	4a ef       	ldi	r20, 0xFA	; 250
    418a:	54 e4       	ldi	r21, 0x44	; 68
    418c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	8b a3       	std	Y+35, r24	; 0x23
    4196:	9c a3       	std	Y+36, r25	; 0x24
    4198:	ad a3       	std	Y+37, r26	; 0x25
    419a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    419c:	6b a1       	ldd	r22, Y+35	; 0x23
    419e:	7c a1       	ldd	r23, Y+36	; 0x24
    41a0:	8d a1       	ldd	r24, Y+37	; 0x25
    41a2:	9e a1       	ldd	r25, Y+38	; 0x26
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e8       	ldi	r20, 0x80	; 128
    41aa:	5f e3       	ldi	r21, 0x3F	; 63
    41ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    41b0:	88 23       	and	r24, r24
    41b2:	2c f4       	brge	.+10     	; 0x41be <STEPPER_voidRotate+0x81a>
		__ticks = 1;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	9a a3       	std	Y+34, r25	; 0x22
    41ba:	89 a3       	std	Y+33, r24	; 0x21
    41bc:	3f c0       	rjmp	.+126    	; 0x423c <STEPPER_voidRotate+0x898>
	else if (__tmp > 65535)
    41be:	6b a1       	ldd	r22, Y+35	; 0x23
    41c0:	7c a1       	ldd	r23, Y+36	; 0x24
    41c2:	8d a1       	ldd	r24, Y+37	; 0x25
    41c4:	9e a1       	ldd	r25, Y+38	; 0x26
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	3f ef       	ldi	r19, 0xFF	; 255
    41ca:	4f e7       	ldi	r20, 0x7F	; 127
    41cc:	57 e4       	ldi	r21, 0x47	; 71
    41ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    41d2:	18 16       	cp	r1, r24
    41d4:	4c f5       	brge	.+82     	; 0x4228 <STEPPER_voidRotate+0x884>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41d6:	6f a1       	ldd	r22, Y+39	; 0x27
    41d8:	78 a5       	ldd	r23, Y+40	; 0x28
    41da:	89 a5       	ldd	r24, Y+41	; 0x29
    41dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	40 e2       	ldi	r20, 0x20	; 32
    41e4:	51 e4       	ldi	r21, 0x41	; 65
    41e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	bc 01       	movw	r22, r24
    41f0:	cd 01       	movw	r24, r26
    41f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	9a a3       	std	Y+34, r25	; 0x22
    41fc:	89 a3       	std	Y+33, r24	; 0x21
    41fe:	0f c0       	rjmp	.+30     	; 0x421e <STEPPER_voidRotate+0x87a>
    4200:	88 ec       	ldi	r24, 0xC8	; 200
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	98 a3       	std	Y+32, r25	; 0x20
    4206:	8f 8f       	std	Y+31, r24	; 0x1f
    4208:	8f 8d       	ldd	r24, Y+31	; 0x1f
    420a:	98 a1       	ldd	r25, Y+32	; 0x20
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	f1 f7       	brne	.-4      	; 0x420c <STEPPER_voidRotate+0x868>
    4210:	98 a3       	std	Y+32, r25	; 0x20
    4212:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4214:	89 a1       	ldd	r24, Y+33	; 0x21
    4216:	9a a1       	ldd	r25, Y+34	; 0x22
    4218:	01 97       	sbiw	r24, 0x01	; 1
    421a:	9a a3       	std	Y+34, r25	; 0x22
    421c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    421e:	89 a1       	ldd	r24, Y+33	; 0x21
    4220:	9a a1       	ldd	r25, Y+34	; 0x22
    4222:	00 97       	sbiw	r24, 0x00	; 0
    4224:	69 f7       	brne	.-38     	; 0x4200 <STEPPER_voidRotate+0x85c>
    4226:	14 c0       	rjmp	.+40     	; 0x4250 <STEPPER_voidRotate+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4228:	6b a1       	ldd	r22, Y+35	; 0x23
    422a:	7c a1       	ldd	r23, Y+36	; 0x24
    422c:	8d a1       	ldd	r24, Y+37	; 0x25
    422e:	9e a1       	ldd	r25, Y+38	; 0x26
    4230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	9a a3       	std	Y+34, r25	; 0x22
    423a:	89 a3       	std	Y+33, r24	; 0x21
    423c:	89 a1       	ldd	r24, Y+33	; 0x21
    423e:	9a a1       	ldd	r25, Y+34	; 0x22
    4240:	9e 8f       	std	Y+30, r25	; 0x1e
    4242:	8d 8f       	std	Y+29, r24	; 0x1d
    4244:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4246:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	f1 f7       	brne	.-4      	; 0x4248 <STEPPER_voidRotate+0x8a4>
    424c:	9e 8f       	std	Y+30, r25	; 0x1e
    424e:	8d 8f       	std	Y+29, r24	; 0x1d
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	aa ef       	ldi	r26, 0xFA	; 250
    4256:	b4 e4       	ldi	r27, 0x44	; 68
    4258:	89 8f       	std	Y+25, r24	; 0x19
    425a:	9a 8f       	std	Y+26, r25	; 0x1a
    425c:	ab 8f       	std	Y+27, r26	; 0x1b
    425e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4260:	69 8d       	ldd	r22, Y+25	; 0x19
    4262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	4a ef       	ldi	r20, 0xFA	; 250
    426e:	54 e4       	ldi	r21, 0x44	; 68
    4270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	8d 8b       	std	Y+21, r24	; 0x15
    427a:	9e 8b       	std	Y+22, r25	; 0x16
    427c:	af 8b       	std	Y+23, r26	; 0x17
    427e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4280:	6d 89       	ldd	r22, Y+21	; 0x15
    4282:	7e 89       	ldd	r23, Y+22	; 0x16
    4284:	8f 89       	ldd	r24, Y+23	; 0x17
    4286:	98 8d       	ldd	r25, Y+24	; 0x18
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e8       	ldi	r20, 0x80	; 128
    428e:	5f e3       	ldi	r21, 0x3F	; 63
    4290:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4294:	88 23       	and	r24, r24
    4296:	2c f4       	brge	.+10     	; 0x42a2 <STEPPER_voidRotate+0x8fe>
		__ticks = 1;
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	9c 8b       	std	Y+20, r25	; 0x14
    429e:	8b 8b       	std	Y+19, r24	; 0x13
    42a0:	3f c0       	rjmp	.+126    	; 0x4320 <STEPPER_voidRotate+0x97c>
	else if (__tmp > 65535)
    42a2:	6d 89       	ldd	r22, Y+21	; 0x15
    42a4:	7e 89       	ldd	r23, Y+22	; 0x16
    42a6:	8f 89       	ldd	r24, Y+23	; 0x17
    42a8:	98 8d       	ldd	r25, Y+24	; 0x18
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	3f ef       	ldi	r19, 0xFF	; 255
    42ae:	4f e7       	ldi	r20, 0x7F	; 127
    42b0:	57 e4       	ldi	r21, 0x47	; 71
    42b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    42b6:	18 16       	cp	r1, r24
    42b8:	4c f5       	brge	.+82     	; 0x430c <STEPPER_voidRotate+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ba:	69 8d       	ldd	r22, Y+25	; 0x19
    42bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e2       	ldi	r20, 0x20	; 32
    42c8:	51 e4       	ldi	r21, 0x41	; 65
    42ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	bc 01       	movw	r22, r24
    42d4:	cd 01       	movw	r24, r26
    42d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	9c 8b       	std	Y+20, r25	; 0x14
    42e0:	8b 8b       	std	Y+19, r24	; 0x13
    42e2:	0f c0       	rjmp	.+30     	; 0x4302 <STEPPER_voidRotate+0x95e>
    42e4:	88 ec       	ldi	r24, 0xC8	; 200
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	9a 8b       	std	Y+18, r25	; 0x12
    42ea:	89 8b       	std	Y+17, r24	; 0x11
    42ec:	89 89       	ldd	r24, Y+17	; 0x11
    42ee:	9a 89       	ldd	r25, Y+18	; 0x12
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	f1 f7       	brne	.-4      	; 0x42f0 <STEPPER_voidRotate+0x94c>
    42f4:	9a 8b       	std	Y+18, r25	; 0x12
    42f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f8:	8b 89       	ldd	r24, Y+19	; 0x13
    42fa:	9c 89       	ldd	r25, Y+20	; 0x14
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	9c 8b       	std	Y+20, r25	; 0x14
    4300:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4302:	8b 89       	ldd	r24, Y+19	; 0x13
    4304:	9c 89       	ldd	r25, Y+20	; 0x14
    4306:	00 97       	sbiw	r24, 0x00	; 0
    4308:	69 f7       	brne	.-38     	; 0x42e4 <STEPPER_voidRotate+0x940>
    430a:	14 c0       	rjmp	.+40     	; 0x4334 <STEPPER_voidRotate+0x990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    430c:	6d 89       	ldd	r22, Y+21	; 0x15
    430e:	7e 89       	ldd	r23, Y+22	; 0x16
    4310:	8f 89       	ldd	r24, Y+23	; 0x17
    4312:	98 8d       	ldd	r25, Y+24	; 0x18
    4314:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	9c 8b       	std	Y+20, r25	; 0x14
    431e:	8b 8b       	std	Y+19, r24	; 0x13
    4320:	8b 89       	ldd	r24, Y+19	; 0x13
    4322:	9c 89       	ldd	r25, Y+20	; 0x14
    4324:	98 8b       	std	Y+16, r25	; 0x10
    4326:	8f 87       	std	Y+15, r24	; 0x0f
    4328:	8f 85       	ldd	r24, Y+15	; 0x0f
    432a:	98 89       	ldd	r25, Y+16	; 0x10
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <STEPPER_voidRotate+0x988>
    4330:	98 8b       	std	Y+16, r25	; 0x10
    4332:	8f 87       	std	Y+15, r24	; 0x0f
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	aa ef       	ldi	r26, 0xFA	; 250
    433a:	b4 e4       	ldi	r27, 0x44	; 68
    433c:	8b 87       	std	Y+11, r24	; 0x0b
    433e:	9c 87       	std	Y+12, r25	; 0x0c
    4340:	ad 87       	std	Y+13, r26	; 0x0d
    4342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4344:	6b 85       	ldd	r22, Y+11	; 0x0b
    4346:	7c 85       	ldd	r23, Y+12	; 0x0c
    4348:	8d 85       	ldd	r24, Y+13	; 0x0d
    434a:	9e 85       	ldd	r25, Y+14	; 0x0e
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	4a ef       	ldi	r20, 0xFA	; 250
    4352:	54 e4       	ldi	r21, 0x44	; 68
    4354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	8f 83       	std	Y+7, r24	; 0x07
    435e:	98 87       	std	Y+8, r25	; 0x08
    4360:	a9 87       	std	Y+9, r26	; 0x09
    4362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4364:	6f 81       	ldd	r22, Y+7	; 0x07
    4366:	78 85       	ldd	r23, Y+8	; 0x08
    4368:	89 85       	ldd	r24, Y+9	; 0x09
    436a:	9a 85       	ldd	r25, Y+10	; 0x0a
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	40 e8       	ldi	r20, 0x80	; 128
    4372:	5f e3       	ldi	r21, 0x3F	; 63
    4374:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4378:	88 23       	and	r24, r24
    437a:	2c f4       	brge	.+10     	; 0x4386 <STEPPER_voidRotate+0x9e2>
		__ticks = 1;
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
    4384:	3f c0       	rjmp	.+126    	; 0x4404 <STEPPER_voidRotate+0xa60>
	else if (__tmp > 65535)
    4386:	6f 81       	ldd	r22, Y+7	; 0x07
    4388:	78 85       	ldd	r23, Y+8	; 0x08
    438a:	89 85       	ldd	r24, Y+9	; 0x09
    438c:	9a 85       	ldd	r25, Y+10	; 0x0a
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	3f ef       	ldi	r19, 0xFF	; 255
    4392:	4f e7       	ldi	r20, 0x7F	; 127
    4394:	57 e4       	ldi	r21, 0x47	; 71
    4396:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    439a:	18 16       	cp	r1, r24
    439c:	4c f5       	brge	.+82     	; 0x43f0 <STEPPER_voidRotate+0xa4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439e:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e2       	ldi	r20, 0x20	; 32
    43ac:	51 e4       	ldi	r21, 0x41	; 65
    43ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	bc 01       	movw	r22, r24
    43b8:	cd 01       	movw	r24, r26
    43ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	9e 83       	std	Y+6, r25	; 0x06
    43c4:	8d 83       	std	Y+5, r24	; 0x05
    43c6:	0f c0       	rjmp	.+30     	; 0x43e6 <STEPPER_voidRotate+0xa42>
    43c8:	88 ec       	ldi	r24, 0xC8	; 200
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	9c 83       	std	Y+4, r25	; 0x04
    43ce:	8b 83       	std	Y+3, r24	; 0x03
    43d0:	8b 81       	ldd	r24, Y+3	; 0x03
    43d2:	9c 81       	ldd	r25, Y+4	; 0x04
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <STEPPER_voidRotate+0xa30>
    43d8:	9c 83       	std	Y+4, r25	; 0x04
    43da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43dc:	8d 81       	ldd	r24, Y+5	; 0x05
    43de:	9e 81       	ldd	r25, Y+6	; 0x06
    43e0:	01 97       	sbiw	r24, 0x01	; 1
    43e2:	9e 83       	std	Y+6, r25	; 0x06
    43e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e6:	8d 81       	ldd	r24, Y+5	; 0x05
    43e8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ea:	00 97       	sbiw	r24, 0x00	; 0
    43ec:	69 f7       	brne	.-38     	; 0x43c8 <STEPPER_voidRotate+0xa24>
    43ee:	14 c0       	rjmp	.+40     	; 0x4418 <STEPPER_voidRotate+0xa74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f0:	6f 81       	ldd	r22, Y+7	; 0x07
    43f2:	78 85       	ldd	r23, Y+8	; 0x08
    43f4:	89 85       	ldd	r24, Y+9	; 0x09
    43f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	9e 83       	std	Y+6, r25	; 0x06
    4402:	8d 83       	std	Y+5, r24	; 0x05
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	9e 81       	ldd	r25, Y+6	; 0x06
    4408:	9a 83       	std	Y+2, r25	; 0x02
    440a:	89 83       	std	Y+1, r24	; 0x01
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	f1 f7       	brne	.-4      	; 0x4410 <STEPPER_voidRotate+0xa6c>
    4414:	9a 83       	std	Y+2, r25	; 0x02
    4416:	89 83       	std	Y+1, r24	; 0x01


	}


}
    4418:	c1 58       	subi	r28, 0x81	; 129
    441a:	df 4f       	sbci	r29, 0xFF	; 255
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	de bf       	out	0x3e, r29	; 62
    4422:	0f be       	out	0x3f, r0	; 63
    4424:	cd bf       	out	0x3d, r28	; 61
    4426:	cf 91       	pop	r28
    4428:	df 91       	pop	r29
    442a:	1f 91       	pop	r17
    442c:	0f 91       	pop	r16
    442e:	08 95       	ret

00004430 <SSD_voidInit>:

#include "SSD_interface.h"



void SSD_voidInit(SSD_t * SSDPtr){
    4430:	df 93       	push	r29
    4432:	cf 93       	push	r28
    4434:	00 d0       	rcall	.+0      	; 0x4436 <SSD_voidInit+0x6>
    4436:	00 d0       	rcall	.+0      	; 0x4438 <SSD_voidInit+0x8>
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62
    443c:	9a 83       	std	Y+2, r25	; 0x02
    443e:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPortDirection(SSDPtr->Port, DIO_OUTPUT);
    4440:	e9 81       	ldd	r30, Y+1	; 0x01
    4442:	fa 81       	ldd	r31, Y+2	; 0x02
    4444:	80 81       	ld	r24, Z
    4446:	61 e0       	ldi	r22, 0x01	; 1
    4448:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPortDirection>
	switch (SSDPtr->CommonState ){
    444c:	e9 81       	ldd	r30, Y+1	; 0x01
    444e:	fa 81       	ldd	r31, Y+2	; 0x02
    4450:	81 81       	ldd	r24, Z+1	; 0x01
    4452:	28 2f       	mov	r18, r24
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	3c 83       	std	Y+4, r19	; 0x04
    4458:	2b 83       	std	Y+3, r18	; 0x03
    445a:	8b 81       	ldd	r24, Y+3	; 0x03
    445c:	9c 81       	ldd	r25, Y+4	; 0x04
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	31 f0       	breq	.+12     	; 0x446e <SSD_voidInit+0x3e>
    4462:	2b 81       	ldd	r18, Y+3	; 0x03
    4464:	3c 81       	ldd	r19, Y+4	; 0x04
    4466:	21 30       	cpi	r18, 0x01	; 1
    4468:	31 05       	cpc	r19, r1
    446a:	41 f0       	breq	.+16     	; 0x447c <SSD_voidInit+0x4c>
    446c:	0d c0       	rjmp	.+26     	; 0x4488 <SSD_voidInit+0x58>

	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0xff);
    446e:	e9 81       	ldd	r30, Y+1	; 0x01
    4470:	fa 81       	ldd	r31, Y+2	; 0x02
    4472:	80 81       	ld	r24, Z
    4474:	6f ef       	ldi	r22, 0xFF	; 255
    4476:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
    447a:	06 c0       	rjmp	.+12     	; 0x4488 <SSD_voidInit+0x58>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0x00);
    447c:	e9 81       	ldd	r30, Y+1	; 0x01
    447e:	fa 81       	ldd	r31, Y+2	; 0x02
    4480:	80 81       	ld	r24, Z
    4482:	60 e0       	ldi	r22, 0x00	; 0
    4484:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
		break;
	}

}
    4488:	0f 90       	pop	r0
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	cf 91       	pop	r28
    4492:	df 91       	pop	r29
    4494:	08 95       	ret

00004496 <SSD_voidEnable>:

void SSD_voidEnable(SSD_t * SSDPtr, u8 Copy_u8Number){
    4496:	df 93       	push	r29
    4498:	cf 93       	push	r28
    449a:	00 d0       	rcall	.+0      	; 0x449c <SSD_voidEnable+0x6>
    449c:	00 d0       	rcall	.+0      	; 0x449e <SSD_voidEnable+0x8>
    449e:	0f 92       	push	r0
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	9a 83       	std	Y+2, r25	; 0x02
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	6b 83       	std	Y+3, r22	; 0x03
	switch(SSDPtr -> CommonState){
    44aa:	e9 81       	ldd	r30, Y+1	; 0x01
    44ac:	fa 81       	ldd	r31, Y+2	; 0x02
    44ae:	81 81       	ldd	r24, Z+1	; 0x01
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	3d 83       	std	Y+5, r19	; 0x05
    44b6:	2c 83       	std	Y+4, r18	; 0x04
    44b8:	8c 81       	ldd	r24, Y+4	; 0x04
    44ba:	9d 81       	ldd	r25, Y+5	; 0x05
    44bc:	00 97       	sbiw	r24, 0x00	; 0
    44be:	31 f0       	breq	.+12     	; 0x44cc <SSD_voidEnable+0x36>
    44c0:	2c 81       	ldd	r18, Y+4	; 0x04
    44c2:	3d 81       	ldd	r19, Y+5	; 0x05
    44c4:	21 30       	cpi	r18, 0x01	; 1
    44c6:	31 05       	cpc	r19, r1
    44c8:	81 f0       	breq	.+32     	; 0x44ea <SSD_voidEnable+0x54>
    44ca:	1f c0       	rjmp	.+62     	; 0x450a <SSD_voidEnable+0x74>
	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr->Port, array[Copy_u8Number]);
    44cc:	e9 81       	ldd	r30, Y+1	; 0x01
    44ce:	fa 81       	ldd	r31, Y+2	; 0x02
    44d0:	20 81       	ld	r18, Z
    44d2:	8b 81       	ldd	r24, Y+3	; 0x03
    44d4:	88 2f       	mov	r24, r24
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	fc 01       	movw	r30, r24
    44da:	e8 58       	subi	r30, 0x88	; 136
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	90 81       	ld	r25, Z
    44e0:	82 2f       	mov	r24, r18
    44e2:	69 2f       	mov	r22, r25
    44e4:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
    44e8:	10 c0       	rjmp	.+32     	; 0x450a <SSD_voidEnable+0x74>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr->Port, ~array[Copy_u8Number]);
    44ea:	e9 81       	ldd	r30, Y+1	; 0x01
    44ec:	fa 81       	ldd	r31, Y+2	; 0x02
    44ee:	20 81       	ld	r18, Z
    44f0:	8b 81       	ldd	r24, Y+3	; 0x03
    44f2:	88 2f       	mov	r24, r24
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	fc 01       	movw	r30, r24
    44f8:	e8 58       	subi	r30, 0x88	; 136
    44fa:	ff 4f       	sbci	r31, 0xFF	; 255
    44fc:	80 81       	ld	r24, Z
    44fe:	98 2f       	mov	r25, r24
    4500:	90 95       	com	r25
    4502:	82 2f       	mov	r24, r18
    4504:	69 2f       	mov	r22, r25
    4506:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
		break;
	}

}
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	0f 90       	pop	r0
    4510:	0f 90       	pop	r0
    4512:	0f 90       	pop	r0
    4514:	cf 91       	pop	r28
    4516:	df 91       	pop	r29
    4518:	08 95       	ret

0000451a <SSD_voidDisable>:



void SSD_voidDisable(SSD_t * SSDPtr){
    451a:	df 93       	push	r29
    451c:	cf 93       	push	r28
    451e:	00 d0       	rcall	.+0      	; 0x4520 <SSD_voidDisable+0x6>
    4520:	00 d0       	rcall	.+0      	; 0x4522 <SSD_voidDisable+0x8>
    4522:	cd b7       	in	r28, 0x3d	; 61
    4524:	de b7       	in	r29, 0x3e	; 62
    4526:	9a 83       	std	Y+2, r25	; 0x02
    4528:	89 83       	std	Y+1, r24	; 0x01

	switch (SSDPtr->CommonState ){
    452a:	e9 81       	ldd	r30, Y+1	; 0x01
    452c:	fa 81       	ldd	r31, Y+2	; 0x02
    452e:	81 81       	ldd	r24, Z+1	; 0x01
    4530:	28 2f       	mov	r18, r24
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	3c 83       	std	Y+4, r19	; 0x04
    4536:	2b 83       	std	Y+3, r18	; 0x03
    4538:	8b 81       	ldd	r24, Y+3	; 0x03
    453a:	9c 81       	ldd	r25, Y+4	; 0x04
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	31 f0       	breq	.+12     	; 0x454c <SSD_voidDisable+0x32>
    4540:	2b 81       	ldd	r18, Y+3	; 0x03
    4542:	3c 81       	ldd	r19, Y+4	; 0x04
    4544:	21 30       	cpi	r18, 0x01	; 1
    4546:	31 05       	cpc	r19, r1
    4548:	41 f0       	breq	.+16     	; 0x455a <SSD_voidDisable+0x40>
    454a:	0d c0       	rjmp	.+26     	; 0x4566 <SSD_voidDisable+0x4c>

	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0xff);
    454c:	e9 81       	ldd	r30, Y+1	; 0x01
    454e:	fa 81       	ldd	r31, Y+2	; 0x02
    4550:	80 81       	ld	r24, Z
    4552:	6f ef       	ldi	r22, 0xFF	; 255
    4554:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
    4558:	06 c0       	rjmp	.+12     	; 0x4566 <SSD_voidDisable+0x4c>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0x00);
    455a:	e9 81       	ldd	r30, Y+1	; 0x01
    455c:	fa 81       	ldd	r31, Y+2	; 0x02
    455e:	80 81       	ld	r24, Z
    4560:	60 e0       	ldi	r22, 0x00	; 0
    4562:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
		break;
	}
}
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	0f 90       	pop	r0
    456c:	0f 90       	pop	r0
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	08 95       	ret

00004574 <LED_voidInit>:

#include "..\..\MCAL\DIO\DIO_interface.h"

#include "LED_interface.h"

void LED_voidInit(LED_t * ptrLED){
    4574:	df 93       	push	r29
    4576:	cf 93       	push	r28
    4578:	00 d0       	rcall	.+0      	; 0x457a <LED_voidInit+0x6>
    457a:	00 d0       	rcall	.+0      	; 0x457c <LED_voidInit+0x8>
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
    4580:	9a 83       	std	Y+2, r25	; 0x02
    4582:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetupPinDirection( ptrLED->Port,ptrLED->Pin,DIO_OUTPUT);
    4584:	e9 81       	ldd	r30, Y+1	; 0x01
    4586:	fa 81       	ldd	r31, Y+2	; 0x02
    4588:	80 81       	ld	r24, Z
    458a:	e9 81       	ldd	r30, Y+1	; 0x01
    458c:	fa 81       	ldd	r31, Y+2	; 0x02
    458e:	91 81       	ldd	r25, Z+1	; 0x01
    4590:	69 2f       	mov	r22, r25
    4592:	41 e0       	ldi	r20, 0x01	; 1
    4594:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>

	switch( ptrLED -> ActiveState){
    4598:	e9 81       	ldd	r30, Y+1	; 0x01
    459a:	fa 81       	ldd	r31, Y+2	; 0x02
    459c:	82 81       	ldd	r24, Z+2	; 0x02
    459e:	28 2f       	mov	r18, r24
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	3c 83       	std	Y+4, r19	; 0x04
    45a4:	2b 83       	std	Y+3, r18	; 0x03
    45a6:	8b 81       	ldd	r24, Y+3	; 0x03
    45a8:	9c 81       	ldd	r25, Y+4	; 0x04
    45aa:	00 97       	sbiw	r24, 0x00	; 0
    45ac:	81 f0       	breq	.+32     	; 0x45ce <LED_voidInit+0x5a>
    45ae:	2b 81       	ldd	r18, Y+3	; 0x03
    45b0:	3c 81       	ldd	r19, Y+4	; 0x04
    45b2:	21 30       	cpi	r18, 0x01	; 1
    45b4:	31 05       	cpc	r19, r1
    45b6:	a9 f4       	brne	.+42     	; 0x45e2 <LED_voidInit+0x6e>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED->Port, ptrLED->Pin, DIO_LOW);
    45b8:	e9 81       	ldd	r30, Y+1	; 0x01
    45ba:	fa 81       	ldd	r31, Y+2	; 0x02
    45bc:	80 81       	ld	r24, Z
    45be:	e9 81       	ldd	r30, Y+1	; 0x01
    45c0:	fa 81       	ldd	r31, Y+2	; 0x02
    45c2:	91 81       	ldd	r25, Z+1	; 0x01
    45c4:	69 2f       	mov	r22, r25
    45c6:	40 e0       	ldi	r20, 0x00	; 0
    45c8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    45cc:	0a c0       	rjmp	.+20     	; 0x45e2 <LED_voidInit+0x6e>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED->Port, ptrLED->Pin, DIO_HIGH);
    45ce:	e9 81       	ldd	r30, Y+1	; 0x01
    45d0:	fa 81       	ldd	r31, Y+2	; 0x02
    45d2:	80 81       	ld	r24, Z
    45d4:	e9 81       	ldd	r30, Y+1	; 0x01
    45d6:	fa 81       	ldd	r31, Y+2	; 0x02
    45d8:	91 81       	ldd	r25, Z+1	; 0x01
    45da:	69 2f       	mov	r22, r25
    45dc:	41 e0       	ldi	r20, 0x01	; 1
    45de:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;

	}
}
    45e2:	0f 90       	pop	r0
    45e4:	0f 90       	pop	r0
    45e6:	0f 90       	pop	r0
    45e8:	0f 90       	pop	r0
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	08 95       	ret

000045f0 <LED_voidON>:
void LED_voidON(LED_t * ptrLED){
    45f0:	df 93       	push	r29
    45f2:	cf 93       	push	r28
    45f4:	00 d0       	rcall	.+0      	; 0x45f6 <LED_voidON+0x6>
    45f6:	00 d0       	rcall	.+0      	; 0x45f8 <LED_voidON+0x8>
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	9a 83       	std	Y+2, r25	; 0x02
    45fe:	89 83       	std	Y+1, r24	; 0x01
	switch( ptrLED -> ActiveState){
    4600:	e9 81       	ldd	r30, Y+1	; 0x01
    4602:	fa 81       	ldd	r31, Y+2	; 0x02
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	28 2f       	mov	r18, r24
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	3c 83       	std	Y+4, r19	; 0x04
    460c:	2b 83       	std	Y+3, r18	; 0x03
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	9c 81       	ldd	r25, Y+4	; 0x04
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	81 f0       	breq	.+32     	; 0x4636 <LED_voidON+0x46>
    4616:	2b 81       	ldd	r18, Y+3	; 0x03
    4618:	3c 81       	ldd	r19, Y+4	; 0x04
    461a:	21 30       	cpi	r18, 0x01	; 1
    461c:	31 05       	cpc	r19, r1
    461e:	a9 f4       	brne	.+42     	; 0x464a <LED_voidON+0x5a>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_HIGH);
    4620:	e9 81       	ldd	r30, Y+1	; 0x01
    4622:	fa 81       	ldd	r31, Y+2	; 0x02
    4624:	80 81       	ld	r24, Z
    4626:	e9 81       	ldd	r30, Y+1	; 0x01
    4628:	fa 81       	ldd	r31, Y+2	; 0x02
    462a:	91 81       	ldd	r25, Z+1	; 0x01
    462c:	69 2f       	mov	r22, r25
    462e:	41 e0       	ldi	r20, 0x01	; 1
    4630:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    4634:	0a c0       	rjmp	.+20     	; 0x464a <LED_voidON+0x5a>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_LOW);
    4636:	e9 81       	ldd	r30, Y+1	; 0x01
    4638:	fa 81       	ldd	r31, Y+2	; 0x02
    463a:	80 81       	ld	r24, Z
    463c:	e9 81       	ldd	r30, Y+1	; 0x01
    463e:	fa 81       	ldd	r31, Y+2	; 0x02
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	69 2f       	mov	r22, r25
    4644:	40 e0       	ldi	r20, 0x00	; 0
    4646:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;
	}

}
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	0f 90       	pop	r0
    4650:	0f 90       	pop	r0
    4652:	cf 91       	pop	r28
    4654:	df 91       	pop	r29
    4656:	08 95       	ret

00004658 <LED_voidOFF>:
void LED_voidOFF(LED_t * ptrLED){
    4658:	df 93       	push	r29
    465a:	cf 93       	push	r28
    465c:	00 d0       	rcall	.+0      	; 0x465e <LED_voidOFF+0x6>
    465e:	00 d0       	rcall	.+0      	; 0x4660 <LED_voidOFF+0x8>
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	9a 83       	std	Y+2, r25	; 0x02
    4666:	89 83       	std	Y+1, r24	; 0x01
	switch( ptrLED -> ActiveState){
    4668:	e9 81       	ldd	r30, Y+1	; 0x01
    466a:	fa 81       	ldd	r31, Y+2	; 0x02
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	28 2f       	mov	r18, r24
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	3c 83       	std	Y+4, r19	; 0x04
    4674:	2b 83       	std	Y+3, r18	; 0x03
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	9c 81       	ldd	r25, Y+4	; 0x04
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	81 f0       	breq	.+32     	; 0x469e <LED_voidOFF+0x46>
    467e:	2b 81       	ldd	r18, Y+3	; 0x03
    4680:	3c 81       	ldd	r19, Y+4	; 0x04
    4682:	21 30       	cpi	r18, 0x01	; 1
    4684:	31 05       	cpc	r19, r1
    4686:	a9 f4       	brne	.+42     	; 0x46b2 <LED_voidOFF+0x5a>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_LOW);
    4688:	e9 81       	ldd	r30, Y+1	; 0x01
    468a:	fa 81       	ldd	r31, Y+2	; 0x02
    468c:	80 81       	ld	r24, Z
    468e:	e9 81       	ldd	r30, Y+1	; 0x01
    4690:	fa 81       	ldd	r31, Y+2	; 0x02
    4692:	91 81       	ldd	r25, Z+1	; 0x01
    4694:	69 2f       	mov	r22, r25
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    469c:	0a c0       	rjmp	.+20     	; 0x46b2 <LED_voidOFF+0x5a>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_HIGH);
    469e:	e9 81       	ldd	r30, Y+1	; 0x01
    46a0:	fa 81       	ldd	r31, Y+2	; 0x02
    46a2:	80 81       	ld	r24, Z
    46a4:	e9 81       	ldd	r30, Y+1	; 0x01
    46a6:	fa 81       	ldd	r31, Y+2	; 0x02
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	69 2f       	mov	r22, r25
    46ac:	41 e0       	ldi	r20, 0x01	; 1
    46ae:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;


	}
}
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	cf 91       	pop	r28
    46bc:	df 91       	pop	r29
    46be:	08 95       	ret

000046c0 <KPAD_voidInit>:
#include "KPAD_config.h"
#include "KPAD_private.h"


void KPAD_voidInit      (void)
{
    46c0:	df 93       	push	r29
    46c2:	cf 93       	push	r28
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
    /* Set Rows To Input*/
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R0 , DIO_INPUT);
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	60 e0       	ldi	r22, 0x00	; 0
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R1 , DIO_INPUT);
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	61 e0       	ldi	r22, 0x01	; 1
    46d6:	40 e0       	ldi	r20, 0x00	; 0
    46d8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R2 , DIO_INPUT);
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	62 e0       	ldi	r22, 0x02	; 2
    46e0:	40 e0       	ldi	r20, 0x00	; 0
    46e2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R3 , DIO_INPUT);
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	63 e0       	ldi	r22, 0x03	; 3
    46ea:	40 e0       	ldi	r20, 0x00	; 0
    46ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    /* Set Rows as PULL UP*/
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R0 , DIO_HIGH);
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	41 e0       	ldi	r20, 0x01	; 1
    46f6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R1 , DIO_HIGH);
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	61 e0       	ldi	r22, 0x01	; 1
    46fe:	41 e0       	ldi	r20, 0x01	; 1
    4700:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R2 , DIO_HIGH);
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	62 e0       	ldi	r22, 0x02	; 2
    4708:	41 e0       	ldi	r20, 0x01	; 1
    470a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R3 , DIO_HIGH);
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	63 e0       	ldi	r22, 0x03	; 3
    4712:	41 e0       	ldi	r20, 0x01	; 1
    4714:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>

    /*Set Cols to OUTPUT*/
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C0 , DIO_OUTPUT);
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	64 e0       	ldi	r22, 0x04	; 4
    471c:	41 e0       	ldi	r20, 0x01	; 1
    471e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C1 , DIO_OUTPUT);
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	65 e0       	ldi	r22, 0x05	; 5
    4726:	41 e0       	ldi	r20, 0x01	; 1
    4728:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C2 , DIO_OUTPUT);
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	66 e0       	ldi	r22, 0x06	; 6
    4730:	41 e0       	ldi	r20, 0x01	; 1
    4732:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C3 , DIO_OUTPUT);
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	67 e0       	ldi	r22, 0x07	; 7
    473a:	41 e0       	ldi	r20, 0x01	; 1
    473c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
//
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C0 , DIO_HIGH);
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	64 e0       	ldi	r22, 0x04	; 4
    4744:	41 e0       	ldi	r20, 0x01	; 1
    4746:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C1 , DIO_HIGH);
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	65 e0       	ldi	r22, 0x05	; 5
    474e:	41 e0       	ldi	r20, 0x01	; 1
    4750:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C2 , DIO_HIGH);
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	66 e0       	ldi	r22, 0x06	; 6
    4758:	41 e0       	ldi	r20, 0x01	; 1
    475a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C3 , DIO_HIGH);
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	67 e0       	ldi	r22, 0x07	; 7
    4762:	41 e0       	ldi	r20, 0x01	; 1
    4764:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
}
    4768:	cf 91       	pop	r28
    476a:	df 91       	pop	r29
    476c:	08 95       	ret

0000476e <KPAD_u8GetPressed>:

u8 KPAD_u8GetPressed    (void)
{
    476e:	df 93       	push	r29
    4770:	cf 93       	push	r28
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	62 97       	sbiw	r28, 0x12	; 18
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8RetrunedValue = 255 ;
    4782:	8f ef       	ldi	r24, 0xFF	; 255
    4784:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8GetPressed   ;
    u8 Local_u8Col            ;
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    4786:	84 e0       	ldi	r24, 0x04	; 4
    4788:	88 8b       	std	Y+16, r24	; 0x10
    478a:	b7 c0       	rjmp	.+366    	; 0x48fa <KPAD_u8GetPressed+0x18c>
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	68 89       	ldd	r22, Y+16	; 0x10
    4790:	40 e0       	ldi	r20, 0x00	; 0
    4792:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    4796:	1f 86       	std	Y+15, r1	; 0x0f
    4798:	a4 c0       	rjmp	.+328    	; 0x48e2 <KPAD_u8GetPressed+0x174>
        {

           Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	6f 85       	ldd	r22, Y+15	; 0x0f
    479e:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    47a2:	89 8b       	std	Y+17, r24	; 0x11
           if(Local_u8GetPressed == 0)
    47a4:	89 89       	ldd	r24, Y+17	; 0x11
    47a6:	88 23       	and	r24, r24
    47a8:	09 f0       	breq	.+2      	; 0x47ac <KPAD_u8GetPressed+0x3e>
    47aa:	98 c0       	rjmp	.+304    	; 0x48dc <KPAD_u8GetPressed+0x16e>
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	a8 e4       	ldi	r26, 0x48	; 72
    47b2:	b2 e4       	ldi	r27, 0x42	; 66
    47b4:	8b 87       	std	Y+11, r24	; 0x0b
    47b6:	9c 87       	std	Y+12, r25	; 0x0c
    47b8:	ad 87       	std	Y+13, r26	; 0x0d
    47ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    47be:	7c 85       	ldd	r23, Y+12	; 0x0c
    47c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	4a ef       	ldi	r20, 0xFA	; 250
    47ca:	54 e4       	ldi	r21, 0x44	; 68
    47cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47d0:	dc 01       	movw	r26, r24
    47d2:	cb 01       	movw	r24, r22
    47d4:	8f 83       	std	Y+7, r24	; 0x07
    47d6:	98 87       	std	Y+8, r25	; 0x08
    47d8:	a9 87       	std	Y+9, r26	; 0x09
    47da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47dc:	6f 81       	ldd	r22, Y+7	; 0x07
    47de:	78 85       	ldd	r23, Y+8	; 0x08
    47e0:	89 85       	ldd	r24, Y+9	; 0x09
    47e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	40 e8       	ldi	r20, 0x80	; 128
    47ea:	5f e3       	ldi	r21, 0x3F	; 63
    47ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    47f0:	88 23       	and	r24, r24
    47f2:	2c f4       	brge	.+10     	; 0x47fe <KPAD_u8GetPressed+0x90>
		__ticks = 1;
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	9e 83       	std	Y+6, r25	; 0x06
    47fa:	8d 83       	std	Y+5, r24	; 0x05
    47fc:	3f c0       	rjmp	.+126    	; 0x487c <KPAD_u8GetPressed+0x10e>
	else if (__tmp > 65535)
    47fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4800:	78 85       	ldd	r23, Y+8	; 0x08
    4802:	89 85       	ldd	r24, Y+9	; 0x09
    4804:	9a 85       	ldd	r25, Y+10	; 0x0a
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	3f ef       	ldi	r19, 0xFF	; 255
    480a:	4f e7       	ldi	r20, 0x7F	; 127
    480c:	57 e4       	ldi	r21, 0x47	; 71
    480e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4812:	18 16       	cp	r1, r24
    4814:	4c f5       	brge	.+82     	; 0x4868 <KPAD_u8GetPressed+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4816:	6b 85       	ldd	r22, Y+11	; 0x0b
    4818:	7c 85       	ldd	r23, Y+12	; 0x0c
    481a:	8d 85       	ldd	r24, Y+13	; 0x0d
    481c:	9e 85       	ldd	r25, Y+14	; 0x0e
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	40 e2       	ldi	r20, 0x20	; 32
    4824:	51 e4       	ldi	r21, 0x41	; 65
    4826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	bc 01       	movw	r22, r24
    4830:	cd 01       	movw	r24, r26
    4832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	9e 83       	std	Y+6, r25	; 0x06
    483c:	8d 83       	std	Y+5, r24	; 0x05
    483e:	0f c0       	rjmp	.+30     	; 0x485e <KPAD_u8GetPressed+0xf0>
    4840:	88 ec       	ldi	r24, 0xC8	; 200
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	9c 83       	std	Y+4, r25	; 0x04
    4846:	8b 83       	std	Y+3, r24	; 0x03
    4848:	8b 81       	ldd	r24, Y+3	; 0x03
    484a:	9c 81       	ldd	r25, Y+4	; 0x04
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	f1 f7       	brne	.-4      	; 0x484c <KPAD_u8GetPressed+0xde>
    4850:	9c 83       	std	Y+4, r25	; 0x04
    4852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4854:	8d 81       	ldd	r24, Y+5	; 0x05
    4856:	9e 81       	ldd	r25, Y+6	; 0x06
    4858:	01 97       	sbiw	r24, 0x01	; 1
    485a:	9e 83       	std	Y+6, r25	; 0x06
    485c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    485e:	8d 81       	ldd	r24, Y+5	; 0x05
    4860:	9e 81       	ldd	r25, Y+6	; 0x06
    4862:	00 97       	sbiw	r24, 0x00	; 0
    4864:	69 f7       	brne	.-38     	; 0x4840 <KPAD_u8GetPressed+0xd2>
    4866:	14 c0       	rjmp	.+40     	; 0x4890 <KPAD_u8GetPressed+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4868:	6f 81       	ldd	r22, Y+7	; 0x07
    486a:	78 85       	ldd	r23, Y+8	; 0x08
    486c:	89 85       	ldd	r24, Y+9	; 0x09
    486e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4874:	dc 01       	movw	r26, r24
    4876:	cb 01       	movw	r24, r22
    4878:	9e 83       	std	Y+6, r25	; 0x06
    487a:	8d 83       	std	Y+5, r24	; 0x05
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	9e 81       	ldd	r25, Y+6	; 0x06
    4880:	9a 83       	std	Y+2, r25	; 0x02
    4882:	89 83       	std	Y+1, r24	; 0x01
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	9a 81       	ldd	r25, Y+2	; 0x02
    4888:	01 97       	sbiw	r24, 0x01	; 1
    488a:	f1 f7       	brne	.-4      	; 0x4888 <KPAD_u8GetPressed+0x11a>
    488c:	9a 83       	std	Y+2, r25	; 0x02
    488e:	89 83       	std	Y+1, r24	; 0x01
           {
            /*  Debouncing */
            _delay_ms(50);
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	6f 85       	ldd	r22, Y+15	; 0x0f
    4894:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    4898:	89 8b       	std	Y+17, r24	; 0x11
            if(Local_u8GetPressed == 0)
    489a:	89 89       	ldd	r24, Y+17	; 0x11
    489c:	88 23       	and	r24, r24
    489e:	d9 f4       	brne	.+54     	; 0x48d6 <KPAD_u8GetPressed+0x168>
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
    48a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    48a2:	48 2f       	mov	r20, r24
    48a4:	50 e0       	ldi	r21, 0x00	; 0
    48a6:	88 89       	ldd	r24, Y+16	; 0x10
    48a8:	88 2f       	mov	r24, r24
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	9c 01       	movw	r18, r24
    48ae:	24 50       	subi	r18, 0x04	; 4
    48b0:	30 40       	sbci	r19, 0x00	; 0
    48b2:	ca 01       	movw	r24, r20
    48b4:	88 0f       	add	r24, r24
    48b6:	99 1f       	adc	r25, r25
    48b8:	88 0f       	add	r24, r24
    48ba:	99 1f       	adc	r25, r25
    48bc:	82 0f       	add	r24, r18
    48be:	93 1f       	adc	r25, r19
    48c0:	fc 01       	movw	r30, r24
    48c2:	e8 59       	subi	r30, 0x98	; 152
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	80 81       	ld	r24, Z
    48c8:	8a 8b       	std	Y+18, r24	; 0x12
    48ca:	05 c0       	rjmp	.+10     	; 0x48d6 <KPAD_u8GetPressed+0x168>
            }
            while(Local_u8GetPressed ==0 )
            {
                Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    48d0:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    48d4:	89 8b       	std	Y+17, r24	; 0x11
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
            if(Local_u8GetPressed == 0)
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
            }
            while(Local_u8GetPressed ==0 )
    48d6:	89 89       	ldd	r24, Y+17	; 0x11
    48d8:	88 23       	and	r24, r24
    48da:	c1 f3       	breq	.-16     	; 0x48cc <KPAD_u8GetPressed+0x15e>
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    48dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    48de:	8f 5f       	subi	r24, 0xFF	; 255
    48e0:	8f 87       	std	Y+15, r24	; 0x0f
    48e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48e4:	84 30       	cpi	r24, 0x04	; 4
    48e6:	08 f4       	brcc	.+2      	; 0x48ea <KPAD_u8GetPressed+0x17c>
    48e8:	58 cf       	rjmp	.-336    	; 0x479a <KPAD_u8GetPressed+0x2c>

           }

        }

        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    48ea:	81 e0       	ldi	r24, 0x01	; 1
    48ec:	68 89       	ldd	r22, Y+16	; 0x10
    48ee:	41 e0       	ldi	r20, 0x01	; 1
    48f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    u8 Local_u8RetrunedValue = 255 ;
    u8 Local_u8GetPressed   ;
    u8 Local_u8Col            ;
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    48f4:	88 89       	ldd	r24, Y+16	; 0x10
    48f6:	8f 5f       	subi	r24, 0xFF	; 255
    48f8:	88 8b       	std	Y+16, r24	; 0x10
    48fa:	88 89       	ldd	r24, Y+16	; 0x10
    48fc:	88 30       	cpi	r24, 0x08	; 8
    48fe:	08 f4       	brcc	.+2      	; 0x4902 <KPAD_u8GetPressed+0x194>
    4900:	45 cf       	rjmp	.-374    	; 0x478c <KPAD_u8GetPressed+0x1e>

        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    }


    return Local_u8RetrunedValue ;
    4902:	8a 89       	ldd	r24, Y+18	; 0x12
}
    4904:	62 96       	adiw	r28, 0x12	; 18
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	08 95       	ret

00004916 <DCMOTOR_voidInit>:
/*MCAL*/
#include "../../MCAL/DIO/DIO_interface.h"

#include "DCMOTOR_interface.h"

void DCMOTOR_voidInit(){
    4916:	df 93       	push	r29
    4918:	cf 93       	push	r28
    491a:	cd b7       	in	r28, 0x3d	; 61
    491c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetupPinDirection(DCMOTOR_PORT,DCMOTOR_HB_PIN0,DIO_OUTPUT );
    491e:	83 e0       	ldi	r24, 0x03	; 3
    4920:	60 e0       	ldi	r22, 0x00	; 0
    4922:	41 e0       	ldi	r20, 0x01	; 1
    4924:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(DCMOTOR_PORT,DCMOTOR_HB_PIN1,DIO_OUTPUT );
    4928:	83 e0       	ldi	r24, 0x03	; 3
    492a:	61 e0       	ldi	r22, 0x01	; 1
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
}
    4932:	cf 91       	pop	r28
    4934:	df 91       	pop	r29
    4936:	08 95       	ret

00004938 <DCMOTOR_voidCWRotate>:


void DCMOTOR_voidCWRotate(){
    4938:	df 93       	push	r29
    493a:	cf 93       	push	r28
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTD,DCMOTOR_HB_PIN0,DIO_HIGH );
    4940:	83 e0       	ldi	r24, 0x03	; 3
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	41 e0       	ldi	r20, 0x01	; 1
    4946:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DCMOTOR_HB_PIN1,DIO_LOW );
    494a:	83 e0       	ldi	r24, 0x03	; 3
    494c:	61 e0       	ldi	r22, 0x01	; 1
    494e:	40 e0       	ldi	r20, 0x00	; 0
    4950:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>

}
    4954:	cf 91       	pop	r28
    4956:	df 91       	pop	r29
    4958:	08 95       	ret

0000495a <DCMOTOR_voidCCWRotate>:
void DCMOTOR_voidCCWRotate(){
    495a:	df 93       	push	r29
    495c:	cf 93       	push	r28
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTD,DCMOTOR_HB_PIN0,DIO_LOW );
    4962:	83 e0       	ldi	r24, 0x03	; 3
    4964:	60 e0       	ldi	r22, 0x00	; 0
    4966:	40 e0       	ldi	r20, 0x00	; 0
    4968:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DCMOTOR_HB_PIN1,DIO_HIGH );
    496c:	83 e0       	ldi	r24, 0x03	; 3
    496e:	61 e0       	ldi	r22, 0x01	; 1
    4970:	41 e0       	ldi	r20, 0x01	; 1
    4972:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>

}
    4976:	cf 91       	pop	r28
    4978:	df 91       	pop	r29
    497a:	08 95       	ret

0000497c <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(){
    497c:	df 93       	push	r29
    497e:	cf 93       	push	r28
    4980:	cd b7       	in	r28, 0x3d	; 61
    4982:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTD,DCMOTOR_HB_PIN0,DIO_LOW );
    4984:	83 e0       	ldi	r24, 0x03	; 3
    4986:	60 e0       	ldi	r22, 0x00	; 0
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DCMOTOR_HB_PIN1,DIO_LOW );
    498e:	83 e0       	ldi	r24, 0x03	; 3
    4990:	61 e0       	ldi	r22, 0x01	; 1
    4992:	40 e0       	ldi	r20, 0x00	; 0
    4994:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>

}
    4998:	cf 91       	pop	r28
    499a:	df 91       	pop	r29
    499c:	08 95       	ret

0000499e <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include "CLCD_config.h"

void CLCD_voidInit		(	void	)
{
    499e:	0f 93       	push	r16
    49a0:	1f 93       	push	r17
    49a2:	df 93       	push	r29
    49a4:	cf 93       	push	r28
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	cc 54       	subi	r28, 0x4C	; 76
    49ac:	d0 40       	sbci	r29, 0x00	; 0
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	de bf       	out	0x3e, r29	; 62
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	cd bf       	out	0x3d, r28	; 61
	// Data Port --> OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT , DIO_OUTPUT);
    49b8:	80 e0       	ldi	r24, 0x00	; 0
    49ba:	61 e0       	ldi	r22, 0x01	; 1
    49bc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPortDirection>
	// RS , RW , EN --> OUTPUT
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_OUTPUT);
    49c0:	82 e0       	ldi	r24, 0x02	; 2
    49c2:	67 e0       	ldi	r22, 0x07	; 7
    49c4:	41 e0       	ldi	r20, 0x01	; 1
    49c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_OUTPUT);
    49ca:	82 e0       	ldi	r24, 0x02	; 2
    49cc:	66 e0       	ldi	r22, 0x06	; 6
    49ce:	41 e0       	ldi	r20, 0x01	; 1
    49d0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_OUTPUT);
    49d4:	82 e0       	ldi	r24, 0x02	; 2
    49d6:	65 e0       	ldi	r22, 0x05	; 5
    49d8:	41 e0       	ldi	r20, 0x01	; 1
    49da:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetupPinDirection>
    49de:	fe 01       	movw	r30, r28
    49e0:	e7 5b       	subi	r30, 0xB7	; 183
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	a8 e4       	ldi	r26, 0x48	; 72
    49ea:	b2 e4       	ldi	r27, 0x42	; 66
    49ec:	80 83       	st	Z, r24
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	a2 83       	std	Z+2, r26	; 0x02
    49f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f4:	8e 01       	movw	r16, r28
    49f6:	0b 5b       	subi	r16, 0xBB	; 187
    49f8:	1f 4f       	sbci	r17, 0xFF	; 255
    49fa:	fe 01       	movw	r30, r28
    49fc:	e7 5b       	subi	r30, 0xB7	; 183
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	60 81       	ld	r22, Z
    4a02:	71 81       	ldd	r23, Z+1	; 0x01
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	4a ef       	ldi	r20, 0xFA	; 250
    4a0e:	54 e4       	ldi	r21, 0x44	; 68
    4a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	f8 01       	movw	r30, r16
    4a1a:	80 83       	st	Z, r24
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	a2 83       	std	Z+2, r26	; 0x02
    4a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a22:	fe 01       	movw	r30, r28
    4a24:	eb 5b       	subi	r30, 0xBB	; 187
    4a26:	ff 4f       	sbci	r31, 0xFF	; 255
    4a28:	60 81       	ld	r22, Z
    4a2a:	71 81       	ldd	r23, Z+1	; 0x01
    4a2c:	82 81       	ldd	r24, Z+2	; 0x02
    4a2e:	93 81       	ldd	r25, Z+3	; 0x03
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	40 e8       	ldi	r20, 0x80	; 128
    4a36:	5f e3       	ldi	r21, 0x3F	; 63
    4a38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4a3c:	88 23       	and	r24, r24
    4a3e:	44 f4       	brge	.+16     	; 0x4a50 <CLCD_voidInit+0xb2>
		__ticks = 1;
    4a40:	fe 01       	movw	r30, r28
    4a42:	ed 5b       	subi	r30, 0xBD	; 189
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	91 83       	std	Z+1, r25	; 0x01
    4a4c:	80 83       	st	Z, r24
    4a4e:	64 c0       	rjmp	.+200    	; 0x4b18 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    4a50:	fe 01       	movw	r30, r28
    4a52:	eb 5b       	subi	r30, 0xBB	; 187
    4a54:	ff 4f       	sbci	r31, 0xFF	; 255
    4a56:	60 81       	ld	r22, Z
    4a58:	71 81       	ldd	r23, Z+1	; 0x01
    4a5a:	82 81       	ldd	r24, Z+2	; 0x02
    4a5c:	93 81       	ldd	r25, Z+3	; 0x03
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	3f ef       	ldi	r19, 0xFF	; 255
    4a62:	4f e7       	ldi	r20, 0x7F	; 127
    4a64:	57 e4       	ldi	r21, 0x47	; 71
    4a66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4a6a:	18 16       	cp	r1, r24
    4a6c:	0c f0       	brlt	.+2      	; 0x4a70 <CLCD_voidInit+0xd2>
    4a6e:	43 c0       	rjmp	.+134    	; 0x4af6 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a70:	fe 01       	movw	r30, r28
    4a72:	e7 5b       	subi	r30, 0xB7	; 183
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	60 81       	ld	r22, Z
    4a78:	71 81       	ldd	r23, Z+1	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e2       	ldi	r20, 0x20	; 32
    4a84:	51 e4       	ldi	r21, 0x41	; 65
    4a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	8e 01       	movw	r16, r28
    4a90:	0d 5b       	subi	r16, 0xBD	; 189
    4a92:	1f 4f       	sbci	r17, 0xFF	; 255
    4a94:	bc 01       	movw	r22, r24
    4a96:	cd 01       	movw	r24, r26
    4a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a9c:	dc 01       	movw	r26, r24
    4a9e:	cb 01       	movw	r24, r22
    4aa0:	f8 01       	movw	r30, r16
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	80 83       	st	Z, r24
    4aa6:	1f c0       	rjmp	.+62     	; 0x4ae6 <CLCD_voidInit+0x148>
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	ef 5b       	subi	r30, 0xBF	; 191
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	88 ec       	ldi	r24, 0xC8	; 200
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ef 5b       	subi	r30, 0xBF	; 191
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	80 81       	ld	r24, Z
    4abe:	91 81       	ldd	r25, Z+1	; 0x01
    4ac0:	01 97       	sbiw	r24, 0x01	; 1
    4ac2:	f1 f7       	brne	.-4      	; 0x4ac0 <CLCD_voidInit+0x122>
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	ef 5b       	subi	r30, 0xBF	; 191
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	91 83       	std	Z+1, r25	; 0x01
    4acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ace:	de 01       	movw	r26, r28
    4ad0:	ad 5b       	subi	r26, 0xBD	; 189
    4ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	ed 5b       	subi	r30, 0xBD	; 189
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	80 81       	ld	r24, Z
    4adc:	91 81       	ldd	r25, Z+1	; 0x01
    4ade:	01 97       	sbiw	r24, 0x01	; 1
    4ae0:	11 96       	adiw	r26, 0x01	; 1
    4ae2:	9c 93       	st	X, r25
    4ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ae6:	fe 01       	movw	r30, r28
    4ae8:	ed 5b       	subi	r30, 0xBD	; 189
    4aea:	ff 4f       	sbci	r31, 0xFF	; 255
    4aec:	80 81       	ld	r24, Z
    4aee:	91 81       	ldd	r25, Z+1	; 0x01
    4af0:	00 97       	sbiw	r24, 0x00	; 0
    4af2:	d1 f6       	brne	.-76     	; 0x4aa8 <CLCD_voidInit+0x10a>
    4af4:	24 c0       	rjmp	.+72     	; 0x4b3e <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af6:	8e 01       	movw	r16, r28
    4af8:	0d 5b       	subi	r16, 0xBD	; 189
    4afa:	1f 4f       	sbci	r17, 0xFF	; 255
    4afc:	fe 01       	movw	r30, r28
    4afe:	eb 5b       	subi	r30, 0xBB	; 187
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b0e:	dc 01       	movw	r26, r24
    4b10:	cb 01       	movw	r24, r22
    4b12:	f8 01       	movw	r30, r16
    4b14:	91 83       	std	Z+1, r25	; 0x01
    4b16:	80 83       	st	Z, r24
    4b18:	fe 01       	movw	r30, r28
    4b1a:	ed 5b       	subi	r30, 0xBD	; 189
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	80 81       	ld	r24, Z
    4b20:	91 81       	ldd	r25, Z+1	; 0x01
    4b22:	fe 01       	movw	r30, r28
    4b24:	ff 96       	adiw	r30, 0x3f	; 63
    4b26:	91 83       	std	Z+1, r25	; 0x01
    4b28:	80 83       	st	Z, r24
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ff 96       	adiw	r30, 0x3f	; 63
    4b2e:	80 81       	ld	r24, Z
    4b30:	91 81       	ldd	r25, Z+1	; 0x01
    4b32:	01 97       	sbiw	r24, 0x01	; 1
    4b34:	f1 f7       	brne	.-4      	; 0x4b32 <CLCD_voidInit+0x194>
    4b36:	fe 01       	movw	r30, r28
    4b38:	ff 96       	adiw	r30, 0x3f	; 63
    4b3a:	91 83       	std	Z+1, r25	; 0x01
    4b3c:	80 83       	st	Z, r24

	/* Initialization Sequence */
	_delay_ms(50);
	/*Function Set */
	CLCD_voidSendCommand(CLCD_FUNCTIONSET8bit);
    4b3e:	88 e3       	ldi	r24, 0x38	; 56
    4b40:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	a8 e4       	ldi	r26, 0x48	; 72
    4b4a:	b2 e4       	ldi	r27, 0x42	; 66
    4b4c:	8b af       	std	Y+59, r24	; 0x3b
    4b4e:	9c af       	std	Y+60, r25	; 0x3c
    4b50:	ad af       	std	Y+61, r26	; 0x3d
    4b52:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b54:	6b ad       	ldd	r22, Y+59	; 0x3b
    4b56:	7c ad       	ldd	r23, Y+60	; 0x3c
    4b58:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b5c:	2b ea       	ldi	r18, 0xAB	; 171
    4b5e:	3a ea       	ldi	r19, 0xAA	; 170
    4b60:	4a e2       	ldi	r20, 0x2A	; 42
    4b62:	50 e4       	ldi	r21, 0x40	; 64
    4b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	8f ab       	std	Y+55, r24	; 0x37
    4b6e:	98 af       	std	Y+56, r25	; 0x38
    4b70:	a9 af       	std	Y+57, r26	; 0x39
    4b72:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4b74:	6f a9       	ldd	r22, Y+55	; 0x37
    4b76:	78 ad       	ldd	r23, Y+56	; 0x38
    4b78:	89 ad       	ldd	r24, Y+57	; 0x39
    4b7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e8       	ldi	r20, 0x80	; 128
    4b82:	5f e3       	ldi	r21, 0x3F	; 63
    4b84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4b88:	88 23       	and	r24, r24
    4b8a:	1c f4       	brge	.+6      	; 0x4b92 <CLCD_voidInit+0x1f4>
		__ticks = 1;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	8e ab       	std	Y+54, r24	; 0x36
    4b90:	91 c0       	rjmp	.+290    	; 0x4cb4 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    4b92:	6f a9       	ldd	r22, Y+55	; 0x37
    4b94:	78 ad       	ldd	r23, Y+56	; 0x38
    4b96:	89 ad       	ldd	r24, Y+57	; 0x39
    4b98:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	4f e7       	ldi	r20, 0x7F	; 127
    4ba0:	53 e4       	ldi	r21, 0x43	; 67
    4ba2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4ba6:	18 16       	cp	r1, r24
    4ba8:	0c f0       	brlt	.+2      	; 0x4bac <CLCD_voidInit+0x20e>
    4baa:	7b c0       	rjmp	.+246    	; 0x4ca2 <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    4bac:	6b ad       	ldd	r22, Y+59	; 0x3b
    4bae:	7c ad       	ldd	r23, Y+60	; 0x3c
    4bb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	4a e7       	ldi	r20, 0x7A	; 122
    4bba:	54 e4       	ldi	r21, 0x44	; 68
    4bbc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	cb 01       	movw	r24, r22
    4bc4:	8a ab       	std	Y+50, r24	; 0x32
    4bc6:	9b ab       	std	Y+51, r25	; 0x33
    4bc8:	ac ab       	std	Y+52, r26	; 0x34
    4bca:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bcc:	6a a9       	ldd	r22, Y+50	; 0x32
    4bce:	7b a9       	ldd	r23, Y+51	; 0x33
    4bd0:	8c a9       	ldd	r24, Y+52	; 0x34
    4bd2:	9d a9       	ldd	r25, Y+53	; 0x35
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	4a ef       	ldi	r20, 0xFA	; 250
    4bda:	54 e4       	ldi	r21, 0x44	; 68
    4bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4be0:	dc 01       	movw	r26, r24
    4be2:	cb 01       	movw	r24, r22
    4be4:	8e a7       	std	Y+46, r24	; 0x2e
    4be6:	9f a7       	std	Y+47, r25	; 0x2f
    4be8:	a8 ab       	std	Y+48, r26	; 0x30
    4bea:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4bec:	6e a5       	ldd	r22, Y+46	; 0x2e
    4bee:	7f a5       	ldd	r23, Y+47	; 0x2f
    4bf0:	88 a9       	ldd	r24, Y+48	; 0x30
    4bf2:	99 a9       	ldd	r25, Y+49	; 0x31
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	40 e8       	ldi	r20, 0x80	; 128
    4bfa:	5f e3       	ldi	r21, 0x3F	; 63
    4bfc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4c00:	88 23       	and	r24, r24
    4c02:	2c f4       	brge	.+10     	; 0x4c0e <CLCD_voidInit+0x270>
		__ticks = 1;
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	9d a7       	std	Y+45, r25	; 0x2d
    4c0a:	8c a7       	std	Y+44, r24	; 0x2c
    4c0c:	3f c0       	rjmp	.+126    	; 0x4c8c <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    4c0e:	6e a5       	ldd	r22, Y+46	; 0x2e
    4c10:	7f a5       	ldd	r23, Y+47	; 0x2f
    4c12:	88 a9       	ldd	r24, Y+48	; 0x30
    4c14:	99 a9       	ldd	r25, Y+49	; 0x31
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	3f ef       	ldi	r19, 0xFF	; 255
    4c1a:	4f e7       	ldi	r20, 0x7F	; 127
    4c1c:	57 e4       	ldi	r21, 0x47	; 71
    4c1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4c22:	18 16       	cp	r1, r24
    4c24:	4c f5       	brge	.+82     	; 0x4c78 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c26:	6a a9       	ldd	r22, Y+50	; 0x32
    4c28:	7b a9       	ldd	r23, Y+51	; 0x33
    4c2a:	8c a9       	ldd	r24, Y+52	; 0x34
    4c2c:	9d a9       	ldd	r25, Y+53	; 0x35
    4c2e:	20 e0       	ldi	r18, 0x00	; 0
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	40 e2       	ldi	r20, 0x20	; 32
    4c34:	51 e4       	ldi	r21, 0x41	; 65
    4c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c3a:	dc 01       	movw	r26, r24
    4c3c:	cb 01       	movw	r24, r22
    4c3e:	bc 01       	movw	r22, r24
    4c40:	cd 01       	movw	r24, r26
    4c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	9d a7       	std	Y+45, r25	; 0x2d
    4c4c:	8c a7       	std	Y+44, r24	; 0x2c
    4c4e:	0f c0       	rjmp	.+30     	; 0x4c6e <CLCD_voidInit+0x2d0>
    4c50:	88 ec       	ldi	r24, 0xC8	; 200
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	9b a7       	std	Y+43, r25	; 0x2b
    4c56:	8a a7       	std	Y+42, r24	; 0x2a
    4c58:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c5a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	f1 f7       	brne	.-4      	; 0x4c5c <CLCD_voidInit+0x2be>
    4c60:	9b a7       	std	Y+43, r25	; 0x2b
    4c62:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c64:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c66:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c68:	01 97       	sbiw	r24, 0x01	; 1
    4c6a:	9d a7       	std	Y+45, r25	; 0x2d
    4c6c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c70:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c72:	00 97       	sbiw	r24, 0x00	; 0
    4c74:	69 f7       	brne	.-38     	; 0x4c50 <CLCD_voidInit+0x2b2>
    4c76:	24 c0       	rjmp	.+72     	; 0x4cc0 <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c78:	6e a5       	ldd	r22, Y+46	; 0x2e
    4c7a:	7f a5       	ldd	r23, Y+47	; 0x2f
    4c7c:	88 a9       	ldd	r24, Y+48	; 0x30
    4c7e:	99 a9       	ldd	r25, Y+49	; 0x31
    4c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c84:	dc 01       	movw	r26, r24
    4c86:	cb 01       	movw	r24, r22
    4c88:	9d a7       	std	Y+45, r25	; 0x2d
    4c8a:	8c a7       	std	Y+44, r24	; 0x2c
    4c8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c90:	99 a7       	std	Y+41, r25	; 0x29
    4c92:	88 a7       	std	Y+40, r24	; 0x28
    4c94:	88 a5       	ldd	r24, Y+40	; 0x28
    4c96:	99 a5       	ldd	r25, Y+41	; 0x29
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	f1 f7       	brne	.-4      	; 0x4c98 <CLCD_voidInit+0x2fa>
    4c9c:	99 a7       	std	Y+41, r25	; 0x29
    4c9e:	88 a7       	std	Y+40, r24	; 0x28
    4ca0:	0f c0       	rjmp	.+30     	; 0x4cc0 <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ca2:	6f a9       	ldd	r22, Y+55	; 0x37
    4ca4:	78 ad       	ldd	r23, Y+56	; 0x38
    4ca6:	89 ad       	ldd	r24, Y+57	; 0x39
    4ca8:	9a ad       	ldd	r25, Y+58	; 0x3a
    4caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4cae:	dc 01       	movw	r26, r24
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	8e ab       	std	Y+54, r24	; 0x36
    4cb4:	8e a9       	ldd	r24, Y+54	; 0x36
    4cb6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4cb8:	8f a1       	ldd	r24, Y+39	; 0x27
    4cba:	8a 95       	dec	r24
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <CLCD_voidInit+0x31c>
    4cbe:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	/*Display ON/OFF*/
	CLCD_voidSendCommand(CLCD_DISPLAYON_OFF);
    4cc0:	8c e0       	ldi	r24, 0x0C	; 12
    4cc2:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	a8 e4       	ldi	r26, 0x48	; 72
    4ccc:	b2 e4       	ldi	r27, 0x42	; 66
    4cce:	8b a3       	std	Y+35, r24	; 0x23
    4cd0:	9c a3       	std	Y+36, r25	; 0x24
    4cd2:	ad a3       	std	Y+37, r26	; 0x25
    4cd4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    4cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    4cda:	8d a1       	ldd	r24, Y+37	; 0x25
    4cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    4cde:	2b ea       	ldi	r18, 0xAB	; 171
    4ce0:	3a ea       	ldi	r19, 0xAA	; 170
    4ce2:	4a e2       	ldi	r20, 0x2A	; 42
    4ce4:	50 e4       	ldi	r21, 0x40	; 64
    4ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	8f 8f       	std	Y+31, r24	; 0x1f
    4cf0:	98 a3       	std	Y+32, r25	; 0x20
    4cf2:	a9 a3       	std	Y+33, r26	; 0x21
    4cf4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4cf6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4cf8:	78 a1       	ldd	r23, Y+32	; 0x20
    4cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    4cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	40 e8       	ldi	r20, 0x80	; 128
    4d04:	5f e3       	ldi	r21, 0x3F	; 63
    4d06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4d0a:	88 23       	and	r24, r24
    4d0c:	1c f4       	brge	.+6      	; 0x4d14 <CLCD_voidInit+0x376>
		__ticks = 1;
    4d0e:	81 e0       	ldi	r24, 0x01	; 1
    4d10:	8e 8f       	std	Y+30, r24	; 0x1e
    4d12:	91 c0       	rjmp	.+290    	; 0x4e36 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    4d14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4d16:	78 a1       	ldd	r23, Y+32	; 0x20
    4d18:	89 a1       	ldd	r24, Y+33	; 0x21
    4d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	4f e7       	ldi	r20, 0x7F	; 127
    4d22:	53 e4       	ldi	r21, 0x43	; 67
    4d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4d28:	18 16       	cp	r1, r24
    4d2a:	0c f0       	brlt	.+2      	; 0x4d2e <CLCD_voidInit+0x390>
    4d2c:	7b c0       	rjmp	.+246    	; 0x4e24 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    4d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    4d30:	7c a1       	ldd	r23, Y+36	; 0x24
    4d32:	8d a1       	ldd	r24, Y+37	; 0x25
    4d34:	9e a1       	ldd	r25, Y+38	; 0x26
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	4a e7       	ldi	r20, 0x7A	; 122
    4d3c:	54 e4       	ldi	r21, 0x44	; 68
    4d3e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4d42:	dc 01       	movw	r26, r24
    4d44:	cb 01       	movw	r24, r22
    4d46:	8a 8f       	std	Y+26, r24	; 0x1a
    4d48:	9b 8f       	std	Y+27, r25	; 0x1b
    4d4a:	ac 8f       	std	Y+28, r26	; 0x1c
    4d4c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d4e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4d50:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4d52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	4a ef       	ldi	r20, 0xFA	; 250
    4d5c:	54 e4       	ldi	r21, 0x44	; 68
    4d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	8e 8b       	std	Y+22, r24	; 0x16
    4d68:	9f 8b       	std	Y+23, r25	; 0x17
    4d6a:	a8 8f       	std	Y+24, r26	; 0x18
    4d6c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4d6e:	6e 89       	ldd	r22, Y+22	; 0x16
    4d70:	7f 89       	ldd	r23, Y+23	; 0x17
    4d72:	88 8d       	ldd	r24, Y+24	; 0x18
    4d74:	99 8d       	ldd	r25, Y+25	; 0x19
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	40 e8       	ldi	r20, 0x80	; 128
    4d7c:	5f e3       	ldi	r21, 0x3F	; 63
    4d7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4d82:	88 23       	and	r24, r24
    4d84:	2c f4       	brge	.+10     	; 0x4d90 <CLCD_voidInit+0x3f2>
		__ticks = 1;
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	9d 8b       	std	Y+21, r25	; 0x15
    4d8c:	8c 8b       	std	Y+20, r24	; 0x14
    4d8e:	3f c0       	rjmp	.+126    	; 0x4e0e <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    4d90:	6e 89       	ldd	r22, Y+22	; 0x16
    4d92:	7f 89       	ldd	r23, Y+23	; 0x17
    4d94:	88 8d       	ldd	r24, Y+24	; 0x18
    4d96:	99 8d       	ldd	r25, Y+25	; 0x19
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	3f ef       	ldi	r19, 0xFF	; 255
    4d9c:	4f e7       	ldi	r20, 0x7F	; 127
    4d9e:	57 e4       	ldi	r21, 0x47	; 71
    4da0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4da4:	18 16       	cp	r1, r24
    4da6:	4c f5       	brge	.+82     	; 0x4dfa <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4daa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4dac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4dae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	40 e2       	ldi	r20, 0x20	; 32
    4db6:	51 e4       	ldi	r21, 0x41	; 65
    4db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	bc 01       	movw	r22, r24
    4dc2:	cd 01       	movw	r24, r26
    4dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	9d 8b       	std	Y+21, r25	; 0x15
    4dce:	8c 8b       	std	Y+20, r24	; 0x14
    4dd0:	0f c0       	rjmp	.+30     	; 0x4df0 <CLCD_voidInit+0x452>
    4dd2:	88 ec       	ldi	r24, 0xC8	; 200
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	9b 8b       	std	Y+19, r25	; 0x13
    4dd8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4dda:	8a 89       	ldd	r24, Y+18	; 0x12
    4ddc:	9b 89       	ldd	r25, Y+19	; 0x13
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	f1 f7       	brne	.-4      	; 0x4dde <CLCD_voidInit+0x440>
    4de2:	9b 8b       	std	Y+19, r25	; 0x13
    4de4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de6:	8c 89       	ldd	r24, Y+20	; 0x14
    4de8:	9d 89       	ldd	r25, Y+21	; 0x15
    4dea:	01 97       	sbiw	r24, 0x01	; 1
    4dec:	9d 8b       	std	Y+21, r25	; 0x15
    4dee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4df0:	8c 89       	ldd	r24, Y+20	; 0x14
    4df2:	9d 89       	ldd	r25, Y+21	; 0x15
    4df4:	00 97       	sbiw	r24, 0x00	; 0
    4df6:	69 f7       	brne	.-38     	; 0x4dd2 <CLCD_voidInit+0x434>
    4df8:	24 c0       	rjmp	.+72     	; 0x4e42 <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dfa:	6e 89       	ldd	r22, Y+22	; 0x16
    4dfc:	7f 89       	ldd	r23, Y+23	; 0x17
    4dfe:	88 8d       	ldd	r24, Y+24	; 0x18
    4e00:	99 8d       	ldd	r25, Y+25	; 0x19
    4e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	9d 8b       	std	Y+21, r25	; 0x15
    4e0c:	8c 8b       	std	Y+20, r24	; 0x14
    4e0e:	8c 89       	ldd	r24, Y+20	; 0x14
    4e10:	9d 89       	ldd	r25, Y+21	; 0x15
    4e12:	99 8b       	std	Y+17, r25	; 0x11
    4e14:	88 8b       	std	Y+16, r24	; 0x10
    4e16:	88 89       	ldd	r24, Y+16	; 0x10
    4e18:	99 89       	ldd	r25, Y+17	; 0x11
    4e1a:	01 97       	sbiw	r24, 0x01	; 1
    4e1c:	f1 f7       	brne	.-4      	; 0x4e1a <CLCD_voidInit+0x47c>
    4e1e:	99 8b       	std	Y+17, r25	; 0x11
    4e20:	88 8b       	std	Y+16, r24	; 0x10
    4e22:	0f c0       	rjmp	.+30     	; 0x4e42 <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e24:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4e26:	78 a1       	ldd	r23, Y+32	; 0x20
    4e28:	89 a1       	ldd	r24, Y+33	; 0x21
    4e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	8e 8f       	std	Y+30, r24	; 0x1e
    4e36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e38:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e3c:	8a 95       	dec	r24
    4e3e:	f1 f7       	brne	.-4      	; 0x4e3c <CLCD_voidInit+0x49e>
    4e40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	/*Display Clear */
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	a0 e0       	ldi	r26, 0x00	; 0
    4e4e:	b0 e4       	ldi	r27, 0x40	; 64
    4e50:	8b 87       	std	Y+11, r24	; 0x0b
    4e52:	9c 87       	std	Y+12, r25	; 0x0c
    4e54:	ad 87       	std	Y+13, r26	; 0x0d
    4e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	4a ef       	ldi	r20, 0xFA	; 250
    4e66:	54 e4       	ldi	r21, 0x44	; 68
    4e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	cb 01       	movw	r24, r22
    4e70:	8f 83       	std	Y+7, r24	; 0x07
    4e72:	98 87       	std	Y+8, r25	; 0x08
    4e74:	a9 87       	std	Y+9, r26	; 0x09
    4e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e78:	6f 81       	ldd	r22, Y+7	; 0x07
    4e7a:	78 85       	ldd	r23, Y+8	; 0x08
    4e7c:	89 85       	ldd	r24, Y+9	; 0x09
    4e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	40 e8       	ldi	r20, 0x80	; 128
    4e86:	5f e3       	ldi	r21, 0x3F	; 63
    4e88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4e8c:	88 23       	and	r24, r24
    4e8e:	2c f4       	brge	.+10     	; 0x4e9a <CLCD_voidInit+0x4fc>
		__ticks = 1;
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	9e 83       	std	Y+6, r25	; 0x06
    4e96:	8d 83       	std	Y+5, r24	; 0x05
    4e98:	3f c0       	rjmp	.+126    	; 0x4f18 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    4e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9c:	78 85       	ldd	r23, Y+8	; 0x08
    4e9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	3f ef       	ldi	r19, 0xFF	; 255
    4ea6:	4f e7       	ldi	r20, 0x7F	; 127
    4ea8:	57 e4       	ldi	r21, 0x47	; 71
    4eaa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4eae:	18 16       	cp	r1, r24
    4eb0:	4c f5       	brge	.+82     	; 0x4f04 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e2       	ldi	r20, 0x20	; 32
    4ec0:	51 e4       	ldi	r21, 0x41	; 65
    4ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	cb 01       	movw	r24, r22
    4eca:	bc 01       	movw	r22, r24
    4ecc:	cd 01       	movw	r24, r26
    4ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	9e 83       	std	Y+6, r25	; 0x06
    4ed8:	8d 83       	std	Y+5, r24	; 0x05
    4eda:	0f c0       	rjmp	.+30     	; 0x4efa <CLCD_voidInit+0x55c>
    4edc:	88 ec       	ldi	r24, 0xC8	; 200
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	9c 83       	std	Y+4, r25	; 0x04
    4ee2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee8:	01 97       	sbiw	r24, 0x01	; 1
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <CLCD_voidInit+0x54a>
    4eec:	9c 83       	std	Y+4, r25	; 0x04
    4eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	9e 83       	std	Y+6, r25	; 0x06
    4ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efa:	8d 81       	ldd	r24, Y+5	; 0x05
    4efc:	9e 81       	ldd	r25, Y+6	; 0x06
    4efe:	00 97       	sbiw	r24, 0x00	; 0
    4f00:	69 f7       	brne	.-38     	; 0x4edc <CLCD_voidInit+0x53e>
    4f02:	14 c0       	rjmp	.+40     	; 0x4f2c <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f04:	6f 81       	ldd	r22, Y+7	; 0x07
    4f06:	78 85       	ldd	r23, Y+8	; 0x08
    4f08:	89 85       	ldd	r24, Y+9	; 0x09
    4f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	9e 83       	std	Y+6, r25	; 0x06
    4f16:	8d 83       	std	Y+5, r24	; 0x05
    4f18:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1c:	9a 83       	std	Y+2, r25	; 0x02
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	9a 81       	ldd	r25, Y+2	; 0x02
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <CLCD_voidInit+0x586>
    4f28:	9a 83       	std	Y+2, r25	; 0x02
    4f2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Mode Set */
	CLCD_voidSendCommand(CLCD_ENTRYMODE);
    4f2c:	86 e0       	ldi	r24, 0x06	; 6
    4f2e:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>

}
    4f32:	c4 5b       	subi	r28, 0xB4	; 180
    4f34:	df 4f       	sbci	r29, 0xFF	; 255
    4f36:	0f b6       	in	r0, 0x3f	; 63
    4f38:	f8 94       	cli
    4f3a:	de bf       	out	0x3e, r29	; 62
    4f3c:	0f be       	out	0x3f, r0	; 63
    4f3e:	cd bf       	out	0x3d, r28	; 61
    4f40:	cf 91       	pop	r28
    4f42:	df 91       	pop	r29
    4f44:	1f 91       	pop	r17
    4f46:	0f 91       	pop	r16
    4f48:	08 95       	ret

00004f4a <CLCD_voidSendCommand>:

void CLCD_voidSendCommand	(u8 Copy_u8Command	)
{
    4f4a:	df 93       	push	r29
    4f4c:	cf 93       	push	r28
    4f4e:	cd b7       	in	r28, 0x3d	; 61
    4f50:	de b7       	in	r29, 0x3e	; 62
    4f52:	e1 97       	sbiw	r28, 0x31	; 49
    4f54:	0f b6       	in	r0, 0x3f	; 63
    4f56:	f8 94       	cli
    4f58:	de bf       	out	0x3e, r29	; 62
    4f5a:	0f be       	out	0x3f, r0	; 63
    4f5c:	cd bf       	out	0x3d, r28	; 61
    4f5e:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> Low (To Send Command )*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_LOW);
    4f60:	82 e0       	ldi	r24, 0x02	; 2
    4f62:	67 e0       	ldi	r22, 0x07	; 7
    4f64:	40 e0       	ldi	r20, 0x00	; 0
    4f66:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	/*RW -> Low	(To Write)*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    4f6a:	82 e0       	ldi	r24, 0x02	; 2
    4f6c:	66 e0       	ldi	r22, 0x06	; 6
    4f6e:	40 e0       	ldi	r20, 0x00	; 0
    4f70:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	/*	Send Command */
	DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Command);
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	69 a9       	ldd	r22, Y+49	; 0x31
    4f78:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
	/*Enable Sequence */
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	65 e0       	ldi	r22, 0x05	; 5
    4f80:	41 e0       	ldi	r20, 0x01	; 1
    4f82:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	a0 e8       	ldi	r26, 0x80	; 128
    4f8c:	bf e3       	ldi	r27, 0x3F	; 63
    4f8e:	8d a7       	std	Y+45, r24	; 0x2d
    4f90:	9e a7       	std	Y+46, r25	; 0x2e
    4f92:	af a7       	std	Y+47, r26	; 0x2f
    4f94:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f96:	6d a5       	ldd	r22, Y+45	; 0x2d
    4f98:	7e a5       	ldd	r23, Y+46	; 0x2e
    4f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    4f9e:	2b ea       	ldi	r18, 0xAB	; 171
    4fa0:	3a ea       	ldi	r19, 0xAA	; 170
    4fa2:	4a e2       	ldi	r20, 0x2A	; 42
    4fa4:	50 e4       	ldi	r21, 0x40	; 64
    4fa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4faa:	dc 01       	movw	r26, r24
    4fac:	cb 01       	movw	r24, r22
    4fae:	89 a7       	std	Y+41, r24	; 0x29
    4fb0:	9a a7       	std	Y+42, r25	; 0x2a
    4fb2:	ab a7       	std	Y+43, r26	; 0x2b
    4fb4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4fb6:	69 a5       	ldd	r22, Y+41	; 0x29
    4fb8:	7a a5       	ldd	r23, Y+42	; 0x2a
    4fba:	8b a5       	ldd	r24, Y+43	; 0x2b
    4fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e8       	ldi	r20, 0x80	; 128
    4fc4:	5f e3       	ldi	r21, 0x3F	; 63
    4fc6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4fca:	88 23       	and	r24, r24
    4fcc:	1c f4       	brge	.+6      	; 0x4fd4 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	88 a7       	std	Y+40, r24	; 0x28
    4fd2:	91 c0       	rjmp	.+290    	; 0x50f6 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    4fd4:	69 a5       	ldd	r22, Y+41	; 0x29
    4fd6:	7a a5       	ldd	r23, Y+42	; 0x2a
    4fd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4fda:	9c a5       	ldd	r25, Y+44	; 0x2c
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	4f e7       	ldi	r20, 0x7F	; 127
    4fe2:	53 e4       	ldi	r21, 0x43	; 67
    4fe4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4fe8:	18 16       	cp	r1, r24
    4fea:	0c f0       	brlt	.+2      	; 0x4fee <CLCD_voidSendCommand+0xa4>
    4fec:	7b c0       	rjmp	.+246    	; 0x50e4 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    4fee:	6d a5       	ldd	r22, Y+45	; 0x2d
    4ff0:	7e a5       	ldd	r23, Y+46	; 0x2e
    4ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	4a e7       	ldi	r20, 0x7A	; 122
    4ffc:	54 e4       	ldi	r21, 0x44	; 68
    4ffe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	8c a3       	std	Y+36, r24	; 0x24
    5008:	9d a3       	std	Y+37, r25	; 0x25
    500a:	ae a3       	std	Y+38, r26	; 0x26
    500c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    500e:	6c a1       	ldd	r22, Y+36	; 0x24
    5010:	7d a1       	ldd	r23, Y+37	; 0x25
    5012:	8e a1       	ldd	r24, Y+38	; 0x26
    5014:	9f a1       	ldd	r25, Y+39	; 0x27
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	4a ef       	ldi	r20, 0xFA	; 250
    501c:	54 e4       	ldi	r21, 0x44	; 68
    501e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	88 a3       	std	Y+32, r24	; 0x20
    5028:	99 a3       	std	Y+33, r25	; 0x21
    502a:	aa a3       	std	Y+34, r26	; 0x22
    502c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    502e:	68 a1       	ldd	r22, Y+32	; 0x20
    5030:	79 a1       	ldd	r23, Y+33	; 0x21
    5032:	8a a1       	ldd	r24, Y+34	; 0x22
    5034:	9b a1       	ldd	r25, Y+35	; 0x23
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	40 e8       	ldi	r20, 0x80	; 128
    503c:	5f e3       	ldi	r21, 0x3F	; 63
    503e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5042:	88 23       	and	r24, r24
    5044:	2c f4       	brge	.+10     	; 0x5050 <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	9f 8f       	std	Y+31, r25	; 0x1f
    504c:	8e 8f       	std	Y+30, r24	; 0x1e
    504e:	3f c0       	rjmp	.+126    	; 0x50ce <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    5050:	68 a1       	ldd	r22, Y+32	; 0x20
    5052:	79 a1       	ldd	r23, Y+33	; 0x21
    5054:	8a a1       	ldd	r24, Y+34	; 0x22
    5056:	9b a1       	ldd	r25, Y+35	; 0x23
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	3f ef       	ldi	r19, 0xFF	; 255
    505c:	4f e7       	ldi	r20, 0x7F	; 127
    505e:	57 e4       	ldi	r21, 0x47	; 71
    5060:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5064:	18 16       	cp	r1, r24
    5066:	4c f5       	brge	.+82     	; 0x50ba <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5068:	6c a1       	ldd	r22, Y+36	; 0x24
    506a:	7d a1       	ldd	r23, Y+37	; 0x25
    506c:	8e a1       	ldd	r24, Y+38	; 0x26
    506e:	9f a1       	ldd	r25, Y+39	; 0x27
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e2       	ldi	r20, 0x20	; 32
    5076:	51 e4       	ldi	r21, 0x41	; 65
    5078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	bc 01       	movw	r22, r24
    5082:	cd 01       	movw	r24, r26
    5084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5088:	dc 01       	movw	r26, r24
    508a:	cb 01       	movw	r24, r22
    508c:	9f 8f       	std	Y+31, r25	; 0x1f
    508e:	8e 8f       	std	Y+30, r24	; 0x1e
    5090:	0f c0       	rjmp	.+30     	; 0x50b0 <CLCD_voidSendCommand+0x166>
    5092:	88 ec       	ldi	r24, 0xC8	; 200
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	9d 8f       	std	Y+29, r25	; 0x1d
    5098:	8c 8f       	std	Y+28, r24	; 0x1c
    509a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    509c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    509e:	01 97       	sbiw	r24, 0x01	; 1
    50a0:	f1 f7       	brne	.-4      	; 0x509e <CLCD_voidSendCommand+0x154>
    50a2:	9d 8f       	std	Y+29, r25	; 0x1d
    50a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    50a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	9f 8f       	std	Y+31, r25	; 0x1f
    50ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    50b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    50b4:	00 97       	sbiw	r24, 0x00	; 0
    50b6:	69 f7       	brne	.-38     	; 0x5092 <CLCD_voidSendCommand+0x148>
    50b8:	24 c0       	rjmp	.+72     	; 0x5102 <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ba:	68 a1       	ldd	r22, Y+32	; 0x20
    50bc:	79 a1       	ldd	r23, Y+33	; 0x21
    50be:	8a a1       	ldd	r24, Y+34	; 0x22
    50c0:	9b a1       	ldd	r25, Y+35	; 0x23
    50c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50c6:	dc 01       	movw	r26, r24
    50c8:	cb 01       	movw	r24, r22
    50ca:	9f 8f       	std	Y+31, r25	; 0x1f
    50cc:	8e 8f       	std	Y+30, r24	; 0x1e
    50ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    50d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    50d2:	9b 8f       	std	Y+27, r25	; 0x1b
    50d4:	8a 8f       	std	Y+26, r24	; 0x1a
    50d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    50d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    50da:	01 97       	sbiw	r24, 0x01	; 1
    50dc:	f1 f7       	brne	.-4      	; 0x50da <CLCD_voidSendCommand+0x190>
    50de:	9b 8f       	std	Y+27, r25	; 0x1b
    50e0:	8a 8f       	std	Y+26, r24	; 0x1a
    50e2:	0f c0       	rjmp	.+30     	; 0x5102 <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    50e4:	69 a5       	ldd	r22, Y+41	; 0x29
    50e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    50e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    50ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    50ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	88 a7       	std	Y+40, r24	; 0x28
    50f6:	88 a5       	ldd	r24, Y+40	; 0x28
    50f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    50fa:	89 8d       	ldd	r24, Y+25	; 0x19
    50fc:	8a 95       	dec	r24
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <CLCD_voidSendCommand+0x1b2>
    5100:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    5102:	82 e0       	ldi	r24, 0x02	; 2
    5104:	65 e0       	ldi	r22, 0x05	; 5
    5106:	40 e0       	ldi	r20, 0x00	; 0
    5108:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	a8 e4       	ldi	r26, 0x48	; 72
    5112:	b2 e4       	ldi	r27, 0x42	; 66
    5114:	8d 8b       	std	Y+21, r24	; 0x15
    5116:	9e 8b       	std	Y+22, r25	; 0x16
    5118:	af 8b       	std	Y+23, r26	; 0x17
    511a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    511c:	6d 89       	ldd	r22, Y+21	; 0x15
    511e:	7e 89       	ldd	r23, Y+22	; 0x16
    5120:	8f 89       	ldd	r24, Y+23	; 0x17
    5122:	98 8d       	ldd	r25, Y+24	; 0x18
    5124:	2b ea       	ldi	r18, 0xAB	; 171
    5126:	3a ea       	ldi	r19, 0xAA	; 170
    5128:	4a e2       	ldi	r20, 0x2A	; 42
    512a:	50 e4       	ldi	r21, 0x40	; 64
    512c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	89 8b       	std	Y+17, r24	; 0x11
    5136:	9a 8b       	std	Y+18, r25	; 0x12
    5138:	ab 8b       	std	Y+19, r26	; 0x13
    513a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    513c:	69 89       	ldd	r22, Y+17	; 0x11
    513e:	7a 89       	ldd	r23, Y+18	; 0x12
    5140:	8b 89       	ldd	r24, Y+19	; 0x13
    5142:	9c 89       	ldd	r25, Y+20	; 0x14
    5144:	20 e0       	ldi	r18, 0x00	; 0
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	40 e8       	ldi	r20, 0x80	; 128
    514a:	5f e3       	ldi	r21, 0x3F	; 63
    514c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5150:	88 23       	and	r24, r24
    5152:	1c f4       	brge	.+6      	; 0x515a <CLCD_voidSendCommand+0x210>
		__ticks = 1;
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	88 8b       	std	Y+16, r24	; 0x10
    5158:	91 c0       	rjmp	.+290    	; 0x527c <CLCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    515a:	69 89       	ldd	r22, Y+17	; 0x11
    515c:	7a 89       	ldd	r23, Y+18	; 0x12
    515e:	8b 89       	ldd	r24, Y+19	; 0x13
    5160:	9c 89       	ldd	r25, Y+20	; 0x14
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	4f e7       	ldi	r20, 0x7F	; 127
    5168:	53 e4       	ldi	r21, 0x43	; 67
    516a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    516e:	18 16       	cp	r1, r24
    5170:	0c f0       	brlt	.+2      	; 0x5174 <CLCD_voidSendCommand+0x22a>
    5172:	7b c0       	rjmp	.+246    	; 0x526a <CLCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    5174:	6d 89       	ldd	r22, Y+21	; 0x15
    5176:	7e 89       	ldd	r23, Y+22	; 0x16
    5178:	8f 89       	ldd	r24, Y+23	; 0x17
    517a:	98 8d       	ldd	r25, Y+24	; 0x18
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	4a e7       	ldi	r20, 0x7A	; 122
    5182:	54 e4       	ldi	r21, 0x44	; 68
    5184:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    5188:	dc 01       	movw	r26, r24
    518a:	cb 01       	movw	r24, r22
    518c:	8c 87       	std	Y+12, r24	; 0x0c
    518e:	9d 87       	std	Y+13, r25	; 0x0d
    5190:	ae 87       	std	Y+14, r26	; 0x0e
    5192:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5194:	6c 85       	ldd	r22, Y+12	; 0x0c
    5196:	7d 85       	ldd	r23, Y+13	; 0x0d
    5198:	8e 85       	ldd	r24, Y+14	; 0x0e
    519a:	9f 85       	ldd	r25, Y+15	; 0x0f
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	4a ef       	ldi	r20, 0xFA	; 250
    51a2:	54 e4       	ldi	r21, 0x44	; 68
    51a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	88 87       	std	Y+8, r24	; 0x08
    51ae:	99 87       	std	Y+9, r25	; 0x09
    51b0:	aa 87       	std	Y+10, r26	; 0x0a
    51b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    51b4:	68 85       	ldd	r22, Y+8	; 0x08
    51b6:	79 85       	ldd	r23, Y+9	; 0x09
    51b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    51ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    51bc:	20 e0       	ldi	r18, 0x00	; 0
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	40 e8       	ldi	r20, 0x80	; 128
    51c2:	5f e3       	ldi	r21, 0x3F	; 63
    51c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    51c8:	88 23       	and	r24, r24
    51ca:	2c f4       	brge	.+10     	; 0x51d6 <CLCD_voidSendCommand+0x28c>
		__ticks = 1;
    51cc:	81 e0       	ldi	r24, 0x01	; 1
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	9f 83       	std	Y+7, r25	; 0x07
    51d2:	8e 83       	std	Y+6, r24	; 0x06
    51d4:	3f c0       	rjmp	.+126    	; 0x5254 <CLCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    51d6:	68 85       	ldd	r22, Y+8	; 0x08
    51d8:	79 85       	ldd	r23, Y+9	; 0x09
    51da:	8a 85       	ldd	r24, Y+10	; 0x0a
    51dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	3f ef       	ldi	r19, 0xFF	; 255
    51e2:	4f e7       	ldi	r20, 0x7F	; 127
    51e4:	57 e4       	ldi	r21, 0x47	; 71
    51e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    51ea:	18 16       	cp	r1, r24
    51ec:	4c f5       	brge	.+82     	; 0x5240 <CLCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    51f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    51f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    51f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	40 e2       	ldi	r20, 0x20	; 32
    51fc:	51 e4       	ldi	r21, 0x41	; 65
    51fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5202:	dc 01       	movw	r26, r24
    5204:	cb 01       	movw	r24, r22
    5206:	bc 01       	movw	r22, r24
    5208:	cd 01       	movw	r24, r26
    520a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	9f 83       	std	Y+7, r25	; 0x07
    5214:	8e 83       	std	Y+6, r24	; 0x06
    5216:	0f c0       	rjmp	.+30     	; 0x5236 <CLCD_voidSendCommand+0x2ec>
    5218:	88 ec       	ldi	r24, 0xC8	; 200
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	9d 83       	std	Y+5, r25	; 0x05
    521e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5220:	8c 81       	ldd	r24, Y+4	; 0x04
    5222:	9d 81       	ldd	r25, Y+5	; 0x05
    5224:	01 97       	sbiw	r24, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <CLCD_voidSendCommand+0x2da>
    5228:	9d 83       	std	Y+5, r25	; 0x05
    522a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    522c:	8e 81       	ldd	r24, Y+6	; 0x06
    522e:	9f 81       	ldd	r25, Y+7	; 0x07
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	9f 83       	std	Y+7, r25	; 0x07
    5234:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5236:	8e 81       	ldd	r24, Y+6	; 0x06
    5238:	9f 81       	ldd	r25, Y+7	; 0x07
    523a:	00 97       	sbiw	r24, 0x00	; 0
    523c:	69 f7       	brne	.-38     	; 0x5218 <CLCD_voidSendCommand+0x2ce>
    523e:	24 c0       	rjmp	.+72     	; 0x5288 <CLCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5240:	68 85       	ldd	r22, Y+8	; 0x08
    5242:	79 85       	ldd	r23, Y+9	; 0x09
    5244:	8a 85       	ldd	r24, Y+10	; 0x0a
    5246:	9b 85       	ldd	r25, Y+11	; 0x0b
    5248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	9f 83       	std	Y+7, r25	; 0x07
    5252:	8e 83       	std	Y+6, r24	; 0x06
    5254:	8e 81       	ldd	r24, Y+6	; 0x06
    5256:	9f 81       	ldd	r25, Y+7	; 0x07
    5258:	9b 83       	std	Y+3, r25	; 0x03
    525a:	8a 83       	std	Y+2, r24	; 0x02
    525c:	8a 81       	ldd	r24, Y+2	; 0x02
    525e:	9b 81       	ldd	r25, Y+3	; 0x03
    5260:	01 97       	sbiw	r24, 0x01	; 1
    5262:	f1 f7       	brne	.-4      	; 0x5260 <CLCD_voidSendCommand+0x316>
    5264:	9b 83       	std	Y+3, r25	; 0x03
    5266:	8a 83       	std	Y+2, r24	; 0x02
    5268:	0f c0       	rjmp	.+30     	; 0x5288 <CLCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    526a:	69 89       	ldd	r22, Y+17	; 0x11
    526c:	7a 89       	ldd	r23, Y+18	; 0x12
    526e:	8b 89       	ldd	r24, Y+19	; 0x13
    5270:	9c 89       	ldd	r25, Y+20	; 0x14
    5272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5276:	dc 01       	movw	r26, r24
    5278:	cb 01       	movw	r24, r22
    527a:	88 8b       	std	Y+16, r24	; 0x10
    527c:	88 89       	ldd	r24, Y+16	; 0x10
    527e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	8a 95       	dec	r24
    5284:	f1 f7       	brne	.-4      	; 0x5282 <CLCD_voidSendCommand+0x338>
    5286:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

}
    5288:	e1 96       	adiw	r28, 0x31	; 49
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	f8 94       	cli
    528e:	de bf       	out	0x3e, r29	; 62
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	cd bf       	out	0x3d, r28	; 61
    5294:	cf 91       	pop	r28
    5296:	df 91       	pop	r29
    5298:	08 95       	ret

0000529a <CLCD_voidSendData>:
void CLCD_voidSendData		(u8 Copy_u8Data		)
{
    529a:	df 93       	push	r29
    529c:	cf 93       	push	r28
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
    52a2:	e1 97       	sbiw	r28, 0x31	; 49
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	de bf       	out	0x3e, r29	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	cd bf       	out	0x3d, r28	; 61
    52ae:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> High (To Send Data )*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_HIGH);
    52b0:	82 e0       	ldi	r24, 0x02	; 2
    52b2:	67 e0       	ldi	r22, 0x07	; 7
    52b4:	41 e0       	ldi	r20, 0x01	; 1
    52b6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		/*RW -> Low	(To Write)*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    52ba:	82 e0       	ldi	r24, 0x02	; 2
    52bc:	66 e0       	ldi	r22, 0x06	; 6
    52be:	40 e0       	ldi	r20, 0x00	; 0
    52c0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		/*	Send Command */
		DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	69 a9       	ldd	r22, Y+49	; 0x31
    52c8:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_voidSetPortValue>
		/*Enable Sequence */
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    52cc:	82 e0       	ldi	r24, 0x02	; 2
    52ce:	65 e0       	ldi	r22, 0x05	; 5
    52d0:	41 e0       	ldi	r20, 0x01	; 1
    52d2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	a0 e8       	ldi	r26, 0x80	; 128
    52dc:	bf e3       	ldi	r27, 0x3F	; 63
    52de:	8d a7       	std	Y+45, r24	; 0x2d
    52e0:	9e a7       	std	Y+46, r25	; 0x2e
    52e2:	af a7       	std	Y+47, r26	; 0x2f
    52e4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    52e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    52e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    52ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    52ec:	98 a9       	ldd	r25, Y+48	; 0x30
    52ee:	2b ea       	ldi	r18, 0xAB	; 171
    52f0:	3a ea       	ldi	r19, 0xAA	; 170
    52f2:	4a e2       	ldi	r20, 0x2A	; 42
    52f4:	50 e4       	ldi	r21, 0x40	; 64
    52f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	89 a7       	std	Y+41, r24	; 0x29
    5300:	9a a7       	std	Y+42, r25	; 0x2a
    5302:	ab a7       	std	Y+43, r26	; 0x2b
    5304:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5306:	69 a5       	ldd	r22, Y+41	; 0x29
    5308:	7a a5       	ldd	r23, Y+42	; 0x2a
    530a:	8b a5       	ldd	r24, Y+43	; 0x2b
    530c:	9c a5       	ldd	r25, Y+44	; 0x2c
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	40 e8       	ldi	r20, 0x80	; 128
    5314:	5f e3       	ldi	r21, 0x3F	; 63
    5316:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    531a:	88 23       	and	r24, r24
    531c:	1c f4       	brge	.+6      	; 0x5324 <CLCD_voidSendData+0x8a>
		__ticks = 1;
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	88 a7       	std	Y+40, r24	; 0x28
    5322:	91 c0       	rjmp	.+290    	; 0x5446 <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    5324:	69 a5       	ldd	r22, Y+41	; 0x29
    5326:	7a a5       	ldd	r23, Y+42	; 0x2a
    5328:	8b a5       	ldd	r24, Y+43	; 0x2b
    532a:	9c a5       	ldd	r25, Y+44	; 0x2c
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	4f e7       	ldi	r20, 0x7F	; 127
    5332:	53 e4       	ldi	r21, 0x43	; 67
    5334:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5338:	18 16       	cp	r1, r24
    533a:	0c f0       	brlt	.+2      	; 0x533e <CLCD_voidSendData+0xa4>
    533c:	7b c0       	rjmp	.+246    	; 0x5434 <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    533e:	6d a5       	ldd	r22, Y+45	; 0x2d
    5340:	7e a5       	ldd	r23, Y+46	; 0x2e
    5342:	8f a5       	ldd	r24, Y+47	; 0x2f
    5344:	98 a9       	ldd	r25, Y+48	; 0x30
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	4a e7       	ldi	r20, 0x7A	; 122
    534c:	54 e4       	ldi	r21, 0x44	; 68
    534e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	8c a3       	std	Y+36, r24	; 0x24
    5358:	9d a3       	std	Y+37, r25	; 0x25
    535a:	ae a3       	std	Y+38, r26	; 0x26
    535c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    535e:	6c a1       	ldd	r22, Y+36	; 0x24
    5360:	7d a1       	ldd	r23, Y+37	; 0x25
    5362:	8e a1       	ldd	r24, Y+38	; 0x26
    5364:	9f a1       	ldd	r25, Y+39	; 0x27
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	4a ef       	ldi	r20, 0xFA	; 250
    536c:	54 e4       	ldi	r21, 0x44	; 68
    536e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5372:	dc 01       	movw	r26, r24
    5374:	cb 01       	movw	r24, r22
    5376:	88 a3       	std	Y+32, r24	; 0x20
    5378:	99 a3       	std	Y+33, r25	; 0x21
    537a:	aa a3       	std	Y+34, r26	; 0x22
    537c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    537e:	68 a1       	ldd	r22, Y+32	; 0x20
    5380:	79 a1       	ldd	r23, Y+33	; 0x21
    5382:	8a a1       	ldd	r24, Y+34	; 0x22
    5384:	9b a1       	ldd	r25, Y+35	; 0x23
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	40 e8       	ldi	r20, 0x80	; 128
    538c:	5f e3       	ldi	r21, 0x3F	; 63
    538e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5392:	88 23       	and	r24, r24
    5394:	2c f4       	brge	.+10     	; 0x53a0 <CLCD_voidSendData+0x106>
		__ticks = 1;
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	9f 8f       	std	Y+31, r25	; 0x1f
    539c:	8e 8f       	std	Y+30, r24	; 0x1e
    539e:	3f c0       	rjmp	.+126    	; 0x541e <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    53a0:	68 a1       	ldd	r22, Y+32	; 0x20
    53a2:	79 a1       	ldd	r23, Y+33	; 0x21
    53a4:	8a a1       	ldd	r24, Y+34	; 0x22
    53a6:	9b a1       	ldd	r25, Y+35	; 0x23
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	3f ef       	ldi	r19, 0xFF	; 255
    53ac:	4f e7       	ldi	r20, 0x7F	; 127
    53ae:	57 e4       	ldi	r21, 0x47	; 71
    53b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    53b4:	18 16       	cp	r1, r24
    53b6:	4c f5       	brge	.+82     	; 0x540a <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53b8:	6c a1       	ldd	r22, Y+36	; 0x24
    53ba:	7d a1       	ldd	r23, Y+37	; 0x25
    53bc:	8e a1       	ldd	r24, Y+38	; 0x26
    53be:	9f a1       	ldd	r25, Y+39	; 0x27
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e2       	ldi	r20, 0x20	; 32
    53c6:	51 e4       	ldi	r21, 0x41	; 65
    53c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	bc 01       	movw	r22, r24
    53d2:	cd 01       	movw	r24, r26
    53d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    53d8:	dc 01       	movw	r26, r24
    53da:	cb 01       	movw	r24, r22
    53dc:	9f 8f       	std	Y+31, r25	; 0x1f
    53de:	8e 8f       	std	Y+30, r24	; 0x1e
    53e0:	0f c0       	rjmp	.+30     	; 0x5400 <CLCD_voidSendData+0x166>
    53e2:	88 ec       	ldi	r24, 0xC8	; 200
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	9d 8f       	std	Y+29, r25	; 0x1d
    53e8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    53ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    53ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    53ee:	01 97       	sbiw	r24, 0x01	; 1
    53f0:	f1 f7       	brne	.-4      	; 0x53ee <CLCD_voidSendData+0x154>
    53f2:	9d 8f       	std	Y+29, r25	; 0x1d
    53f4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    53fa:	01 97       	sbiw	r24, 0x01	; 1
    53fc:	9f 8f       	std	Y+31, r25	; 0x1f
    53fe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5400:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5402:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5404:	00 97       	sbiw	r24, 0x00	; 0
    5406:	69 f7       	brne	.-38     	; 0x53e2 <CLCD_voidSendData+0x148>
    5408:	24 c0       	rjmp	.+72     	; 0x5452 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    540a:	68 a1       	ldd	r22, Y+32	; 0x20
    540c:	79 a1       	ldd	r23, Y+33	; 0x21
    540e:	8a a1       	ldd	r24, Y+34	; 0x22
    5410:	9b a1       	ldd	r25, Y+35	; 0x23
    5412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5416:	dc 01       	movw	r26, r24
    5418:	cb 01       	movw	r24, r22
    541a:	9f 8f       	std	Y+31, r25	; 0x1f
    541c:	8e 8f       	std	Y+30, r24	; 0x1e
    541e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5420:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5422:	9b 8f       	std	Y+27, r25	; 0x1b
    5424:	8a 8f       	std	Y+26, r24	; 0x1a
    5426:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5428:	9b 8d       	ldd	r25, Y+27	; 0x1b
    542a:	01 97       	sbiw	r24, 0x01	; 1
    542c:	f1 f7       	brne	.-4      	; 0x542a <CLCD_voidSendData+0x190>
    542e:	9b 8f       	std	Y+27, r25	; 0x1b
    5430:	8a 8f       	std	Y+26, r24	; 0x1a
    5432:	0f c0       	rjmp	.+30     	; 0x5452 <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5434:	69 a5       	ldd	r22, Y+41	; 0x29
    5436:	7a a5       	ldd	r23, Y+42	; 0x2a
    5438:	8b a5       	ldd	r24, Y+43	; 0x2b
    543a:	9c a5       	ldd	r25, Y+44	; 0x2c
    543c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	88 a7       	std	Y+40, r24	; 0x28
    5446:	88 a5       	ldd	r24, Y+40	; 0x28
    5448:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    544a:	89 8d       	ldd	r24, Y+25	; 0x19
    544c:	8a 95       	dec	r24
    544e:	f1 f7       	brne	.-4      	; 0x544c <CLCD_voidSendData+0x1b2>
    5450:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    5452:	82 e0       	ldi	r24, 0x02	; 2
    5454:	65 e0       	ldi	r22, 0x05	; 5
    5456:	40 e0       	ldi	r20, 0x00	; 0
    5458:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    545c:	80 e0       	ldi	r24, 0x00	; 0
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	a8 e4       	ldi	r26, 0x48	; 72
    5462:	b2 e4       	ldi	r27, 0x42	; 66
    5464:	8d 8b       	std	Y+21, r24	; 0x15
    5466:	9e 8b       	std	Y+22, r25	; 0x16
    5468:	af 8b       	std	Y+23, r26	; 0x17
    546a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    546c:	6d 89       	ldd	r22, Y+21	; 0x15
    546e:	7e 89       	ldd	r23, Y+22	; 0x16
    5470:	8f 89       	ldd	r24, Y+23	; 0x17
    5472:	98 8d       	ldd	r25, Y+24	; 0x18
    5474:	2b ea       	ldi	r18, 0xAB	; 171
    5476:	3a ea       	ldi	r19, 0xAA	; 170
    5478:	4a e2       	ldi	r20, 0x2A	; 42
    547a:	50 e4       	ldi	r21, 0x40	; 64
    547c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	89 8b       	std	Y+17, r24	; 0x11
    5486:	9a 8b       	std	Y+18, r25	; 0x12
    5488:	ab 8b       	std	Y+19, r26	; 0x13
    548a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    548c:	69 89       	ldd	r22, Y+17	; 0x11
    548e:	7a 89       	ldd	r23, Y+18	; 0x12
    5490:	8b 89       	ldd	r24, Y+19	; 0x13
    5492:	9c 89       	ldd	r25, Y+20	; 0x14
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	40 e8       	ldi	r20, 0x80	; 128
    549a:	5f e3       	ldi	r21, 0x3F	; 63
    549c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    54a0:	88 23       	and	r24, r24
    54a2:	1c f4       	brge	.+6      	; 0x54aa <CLCD_voidSendData+0x210>
		__ticks = 1;
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	88 8b       	std	Y+16, r24	; 0x10
    54a8:	91 c0       	rjmp	.+290    	; 0x55cc <CLCD_voidSendData+0x332>
	else if (__tmp > 255)
    54aa:	69 89       	ldd	r22, Y+17	; 0x11
    54ac:	7a 89       	ldd	r23, Y+18	; 0x12
    54ae:	8b 89       	ldd	r24, Y+19	; 0x13
    54b0:	9c 89       	ldd	r25, Y+20	; 0x14
    54b2:	20 e0       	ldi	r18, 0x00	; 0
    54b4:	30 e0       	ldi	r19, 0x00	; 0
    54b6:	4f e7       	ldi	r20, 0x7F	; 127
    54b8:	53 e4       	ldi	r21, 0x43	; 67
    54ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    54be:	18 16       	cp	r1, r24
    54c0:	0c f0       	brlt	.+2      	; 0x54c4 <CLCD_voidSendData+0x22a>
    54c2:	7b c0       	rjmp	.+246    	; 0x55ba <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    54c4:	6d 89       	ldd	r22, Y+21	; 0x15
    54c6:	7e 89       	ldd	r23, Y+22	; 0x16
    54c8:	8f 89       	ldd	r24, Y+23	; 0x17
    54ca:	98 8d       	ldd	r25, Y+24	; 0x18
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	4a e7       	ldi	r20, 0x7A	; 122
    54d2:	54 e4       	ldi	r21, 0x44	; 68
    54d4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	8c 87       	std	Y+12, r24	; 0x0c
    54de:	9d 87       	std	Y+13, r25	; 0x0d
    54e0:	ae 87       	std	Y+14, r26	; 0x0e
    54e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    54e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    54e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    54ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	4a ef       	ldi	r20, 0xFA	; 250
    54f2:	54 e4       	ldi	r21, 0x44	; 68
    54f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    54f8:	dc 01       	movw	r26, r24
    54fa:	cb 01       	movw	r24, r22
    54fc:	88 87       	std	Y+8, r24	; 0x08
    54fe:	99 87       	std	Y+9, r25	; 0x09
    5500:	aa 87       	std	Y+10, r26	; 0x0a
    5502:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5504:	68 85       	ldd	r22, Y+8	; 0x08
    5506:	79 85       	ldd	r23, Y+9	; 0x09
    5508:	8a 85       	ldd	r24, Y+10	; 0x0a
    550a:	9b 85       	ldd	r25, Y+11	; 0x0b
    550c:	20 e0       	ldi	r18, 0x00	; 0
    550e:	30 e0       	ldi	r19, 0x00	; 0
    5510:	40 e8       	ldi	r20, 0x80	; 128
    5512:	5f e3       	ldi	r21, 0x3F	; 63
    5514:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5518:	88 23       	and	r24, r24
    551a:	2c f4       	brge	.+10     	; 0x5526 <CLCD_voidSendData+0x28c>
		__ticks = 1;
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	9f 83       	std	Y+7, r25	; 0x07
    5522:	8e 83       	std	Y+6, r24	; 0x06
    5524:	3f c0       	rjmp	.+126    	; 0x55a4 <CLCD_voidSendData+0x30a>
	else if (__tmp > 65535)
    5526:	68 85       	ldd	r22, Y+8	; 0x08
    5528:	79 85       	ldd	r23, Y+9	; 0x09
    552a:	8a 85       	ldd	r24, Y+10	; 0x0a
    552c:	9b 85       	ldd	r25, Y+11	; 0x0b
    552e:	20 e0       	ldi	r18, 0x00	; 0
    5530:	3f ef       	ldi	r19, 0xFF	; 255
    5532:	4f e7       	ldi	r20, 0x7F	; 127
    5534:	57 e4       	ldi	r21, 0x47	; 71
    5536:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    553a:	18 16       	cp	r1, r24
    553c:	4c f5       	brge	.+82     	; 0x5590 <CLCD_voidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    553e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5540:	7d 85       	ldd	r23, Y+13	; 0x0d
    5542:	8e 85       	ldd	r24, Y+14	; 0x0e
    5544:	9f 85       	ldd	r25, Y+15	; 0x0f
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 e2       	ldi	r20, 0x20	; 32
    554c:	51 e4       	ldi	r21, 0x41	; 65
    554e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5552:	dc 01       	movw	r26, r24
    5554:	cb 01       	movw	r24, r22
    5556:	bc 01       	movw	r22, r24
    5558:	cd 01       	movw	r24, r26
    555a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    555e:	dc 01       	movw	r26, r24
    5560:	cb 01       	movw	r24, r22
    5562:	9f 83       	std	Y+7, r25	; 0x07
    5564:	8e 83       	std	Y+6, r24	; 0x06
    5566:	0f c0       	rjmp	.+30     	; 0x5586 <CLCD_voidSendData+0x2ec>
    5568:	88 ec       	ldi	r24, 0xC8	; 200
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	9d 83       	std	Y+5, r25	; 0x05
    556e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5570:	8c 81       	ldd	r24, Y+4	; 0x04
    5572:	9d 81       	ldd	r25, Y+5	; 0x05
    5574:	01 97       	sbiw	r24, 0x01	; 1
    5576:	f1 f7       	brne	.-4      	; 0x5574 <CLCD_voidSendData+0x2da>
    5578:	9d 83       	std	Y+5, r25	; 0x05
    557a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    557c:	8e 81       	ldd	r24, Y+6	; 0x06
    557e:	9f 81       	ldd	r25, Y+7	; 0x07
    5580:	01 97       	sbiw	r24, 0x01	; 1
    5582:	9f 83       	std	Y+7, r25	; 0x07
    5584:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5586:	8e 81       	ldd	r24, Y+6	; 0x06
    5588:	9f 81       	ldd	r25, Y+7	; 0x07
    558a:	00 97       	sbiw	r24, 0x00	; 0
    558c:	69 f7       	brne	.-38     	; 0x5568 <CLCD_voidSendData+0x2ce>
    558e:	24 c0       	rjmp	.+72     	; 0x55d8 <CLCD_voidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5590:	68 85       	ldd	r22, Y+8	; 0x08
    5592:	79 85       	ldd	r23, Y+9	; 0x09
    5594:	8a 85       	ldd	r24, Y+10	; 0x0a
    5596:	9b 85       	ldd	r25, Y+11	; 0x0b
    5598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    559c:	dc 01       	movw	r26, r24
    559e:	cb 01       	movw	r24, r22
    55a0:	9f 83       	std	Y+7, r25	; 0x07
    55a2:	8e 83       	std	Y+6, r24	; 0x06
    55a4:	8e 81       	ldd	r24, Y+6	; 0x06
    55a6:	9f 81       	ldd	r25, Y+7	; 0x07
    55a8:	9b 83       	std	Y+3, r25	; 0x03
    55aa:	8a 83       	std	Y+2, r24	; 0x02
    55ac:	8a 81       	ldd	r24, Y+2	; 0x02
    55ae:	9b 81       	ldd	r25, Y+3	; 0x03
    55b0:	01 97       	sbiw	r24, 0x01	; 1
    55b2:	f1 f7       	brne	.-4      	; 0x55b0 <CLCD_voidSendData+0x316>
    55b4:	9b 83       	std	Y+3, r25	; 0x03
    55b6:	8a 83       	std	Y+2, r24	; 0x02
    55b8:	0f c0       	rjmp	.+30     	; 0x55d8 <CLCD_voidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    55ba:	69 89       	ldd	r22, Y+17	; 0x11
    55bc:	7a 89       	ldd	r23, Y+18	; 0x12
    55be:	8b 89       	ldd	r24, Y+19	; 0x13
    55c0:	9c 89       	ldd	r25, Y+20	; 0x14
    55c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    55c6:	dc 01       	movw	r26, r24
    55c8:	cb 01       	movw	r24, r22
    55ca:	88 8b       	std	Y+16, r24	; 0x10
    55cc:	88 89       	ldd	r24, Y+16	; 0x10
    55ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    55d0:	89 81       	ldd	r24, Y+1	; 0x01
    55d2:	8a 95       	dec	r24
    55d4:	f1 f7       	brne	.-4      	; 0x55d2 <CLCD_voidSendData+0x338>
    55d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);

}
    55d8:	e1 96       	adiw	r28, 0x31	; 49
    55da:	0f b6       	in	r0, 0x3f	; 63
    55dc:	f8 94       	cli
    55de:	de bf       	out	0x3e, r29	; 62
    55e0:	0f be       	out	0x3f, r0	; 63
    55e2:	cd bf       	out	0x3d, r28	; 61
    55e4:	cf 91       	pop	r28
    55e6:	df 91       	pop	r29
    55e8:	08 95       	ret

000055ea <CLCD_voidSetPosition>:

void CLCD_voidSetPosition	(u8 Copy_u8Row , u8 Copy_u8Col)
{
    55ea:	df 93       	push	r29
    55ec:	cf 93       	push	r28
    55ee:	00 d0       	rcall	.+0      	; 0x55f0 <CLCD_voidSetPosition+0x6>
    55f0:	00 d0       	rcall	.+0      	; 0x55f2 <CLCD_voidSetPosition+0x8>
    55f2:	cd b7       	in	r28, 0x3d	; 61
    55f4:	de b7       	in	r29, 0x3e	; 62
    55f6:	89 83       	std	Y+1, r24	; 0x01
    55f8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	28 2f       	mov	r18, r24
    55fe:	30 e0       	ldi	r19, 0x00	; 0
    5600:	3c 83       	std	Y+4, r19	; 0x04
    5602:	2b 83       	std	Y+3, r18	; 0x03
    5604:	8b 81       	ldd	r24, Y+3	; 0x03
    5606:	9c 81       	ldd	r25, Y+4	; 0x04
    5608:	81 30       	cpi	r24, 0x01	; 1
    560a:	91 05       	cpc	r25, r1
    560c:	31 f0       	breq	.+12     	; 0x561a <CLCD_voidSetPosition+0x30>
    560e:	2b 81       	ldd	r18, Y+3	; 0x03
    5610:	3c 81       	ldd	r19, Y+4	; 0x04
    5612:	22 30       	cpi	r18, 0x02	; 2
    5614:	31 05       	cpc	r19, r1
    5616:	31 f0       	breq	.+12     	; 0x5624 <CLCD_voidSetPosition+0x3a>
    5618:	09 c0       	rjmp	.+18     	; 0x562c <CLCD_voidSetPosition+0x42>
	{
	case CLCD_ROW_1:	CLCD_voidSendCommand(	FIRST_PLACE_IN_ROW1 + Copy_u8Col - 1);
    561a:	8a 81       	ldd	r24, Y+2	; 0x02
    561c:	81 58       	subi	r24, 0x81	; 129
    561e:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
    5622:	04 c0       	rjmp	.+8      	; 0x562c <CLCD_voidSetPosition+0x42>
		break;
	case CLCD_ROW_2 :	CLCD_voidSendCommand(	FIRST_PLACE_IN_ROW2 + Copy_u8Col - 1);
    5624:	8a 81       	ldd	r24, Y+2	; 0x02
    5626:	81 54       	subi	r24, 0x41	; 65
    5628:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
		break ;
	default :
		break;
	}
}
    562c:	0f 90       	pop	r0
    562e:	0f 90       	pop	r0
    5630:	0f 90       	pop	r0
    5632:	0f 90       	pop	r0
    5634:	cf 91       	pop	r28
    5636:	df 91       	pop	r29
    5638:	08 95       	ret

0000563a <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar	(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar , u8 Copy_u8Row , u8 Copy_u8Col )
{
    563a:	df 93       	push	r29
    563c:	cf 93       	push	r28
    563e:	cd b7       	in	r28, 0x3d	; 61
    5640:	de b7       	in	r29, 0x3e	; 62
    5642:	27 97       	sbiw	r28, 0x07	; 7
    5644:	0f b6       	in	r0, 0x3f	; 63
    5646:	f8 94       	cli
    5648:	de bf       	out	0x3e, r29	; 62
    564a:	0f be       	out	0x3f, r0	; 63
    564c:	cd bf       	out	0x3d, r28	; 61
    564e:	8b 83       	std	Y+3, r24	; 0x03
    5650:	7d 83       	std	Y+5, r23	; 0x05
    5652:	6c 83       	std	Y+4, r22	; 0x04
    5654:	4e 83       	std	Y+6, r20	; 0x06
    5656:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address_INCREMENT = 0 ;
    5658:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    565a:	8b 81       	ldd	r24, Y+3	; 0x03
    565c:	88 2f       	mov	r24, r24
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	88 0f       	add	r24, r24
    5662:	99 1f       	adc	r25, r25
    5664:	88 0f       	add	r24, r24
    5666:	99 1f       	adc	r25, r25
    5668:	88 0f       	add	r24, r24
    566a:	99 1f       	adc	r25, r25
    566c:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	80 5c       	subi	r24, 0xC0	; 192
    5672:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    5676:	19 82       	std	Y+1, r1	; 0x01
    5678:	0e c0       	rjmp	.+28     	; 0x5696 <CLCD_voidSendExtraChar+0x5c>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    567a:	89 81       	ldd	r24, Y+1	; 0x01
    567c:	28 2f       	mov	r18, r24
    567e:	30 e0       	ldi	r19, 0x00	; 0
    5680:	8c 81       	ldd	r24, Y+4	; 0x04
    5682:	9d 81       	ldd	r25, Y+5	; 0x05
    5684:	fc 01       	movw	r30, r24
    5686:	e2 0f       	add	r30, r18
    5688:	f3 1f       	adc	r31, r19
    568a:	80 81       	ld	r24, Z
    568c:	0e 94 4d 29 	call	0x529a	; 0x529a <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	8f 5f       	subi	r24, 0xFF	; 255
    5694:	89 83       	std	Y+1, r24	; 0x01
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	88 30       	cpi	r24, 0x08	; 8
    569a:	78 f3       	brcs	.-34     	; 0x567a <CLCD_voidSendExtraChar+0x40>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}
	/*Back to DDRAM */
	CLCD_voidSetPosition(Copy_u8Row , Copy_u8Col);
    569c:	8e 81       	ldd	r24, Y+6	; 0x06
    569e:	6f 81       	ldd	r22, Y+7	; 0x07
    56a0:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <CLCD_voidSetPosition>
	/*Draw Character on display */
	CLCD_voidSendData(Copy_u8PatternLocation);
    56a4:	8b 81       	ldd	r24, Y+3	; 0x03
    56a6:	0e 94 4d 29 	call	0x529a	; 0x529a <CLCD_voidSendData>
}
    56aa:	27 96       	adiw	r28, 0x07	; 7
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	cf 91       	pop	r28
    56b8:	df 91       	pop	r29
    56ba:	08 95       	ret

000056bc <CLCD_voidStoreExtraChar>:
void CLCD_voidStoreExtraChar(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar )
{
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	00 d0       	rcall	.+0      	; 0x56c2 <CLCD_voidStoreExtraChar+0x6>
    56c2:	00 d0       	rcall	.+0      	; 0x56c4 <CLCD_voidStoreExtraChar+0x8>
    56c4:	0f 92       	push	r0
    56c6:	cd b7       	in	r28, 0x3d	; 61
    56c8:	de b7       	in	r29, 0x3e	; 62
    56ca:	8b 83       	std	Y+3, r24	; 0x03
    56cc:	7d 83       	std	Y+5, r23	; 0x05
    56ce:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Address_INCREMENT = 0 ;
    56d0:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    56d2:	8b 81       	ldd	r24, Y+3	; 0x03
    56d4:	88 2f       	mov	r24, r24
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	88 0f       	add	r24, r24
    56da:	99 1f       	adc	r25, r25
    56dc:	88 0f       	add	r24, r24
    56de:	99 1f       	adc	r25, r25
    56e0:	88 0f       	add	r24, r24
    56e2:	99 1f       	adc	r25, r25
    56e4:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    56e6:	8a 81       	ldd	r24, Y+2	; 0x02
    56e8:	80 5c       	subi	r24, 0xC0	; 192
    56ea:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    56ee:	19 82       	std	Y+1, r1	; 0x01
    56f0:	0e c0       	rjmp	.+28     	; 0x570e <CLCD_voidStoreExtraChar+0x52>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	28 2f       	mov	r18, r24
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	8c 81       	ldd	r24, Y+4	; 0x04
    56fa:	9d 81       	ldd	r25, Y+5	; 0x05
    56fc:	fc 01       	movw	r30, r24
    56fe:	e2 0f       	add	r30, r18
    5700:	f3 1f       	adc	r31, r19
    5702:	80 81       	ld	r24, Z
    5704:	0e 94 4d 29 	call	0x529a	; 0x529a <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    5708:	89 81       	ldd	r24, Y+1	; 0x01
    570a:	8f 5f       	subi	r24, 0xFF	; 255
    570c:	89 83       	std	Y+1, r24	; 0x01
    570e:	89 81       	ldd	r24, Y+1	; 0x01
    5710:	88 30       	cpi	r24, 0x08	; 8
    5712:	78 f3       	brcs	.-34     	; 0x56f2 <CLCD_voidStoreExtraChar+0x36>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}


}
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
    5718:	0f 90       	pop	r0
    571a:	0f 90       	pop	r0
    571c:	0f 90       	pop	r0
    571e:	cf 91       	pop	r28
    5720:	df 91       	pop	r29
    5722:	08 95       	ret

00005724 <CLCD_voidSendString>:
void CLCD_voidSendString	(u8 *Copy_pu8String )
{
    5724:	df 93       	push	r29
    5726:	cf 93       	push	r28
    5728:	cd b7       	in	r28, 0x3d	; 61
    572a:	de b7       	in	r29, 0x3e	; 62
    572c:	61 97       	sbiw	r28, 0x11	; 17
    572e:	0f b6       	in	r0, 0x3f	; 63
    5730:	f8 94       	cli
    5732:	de bf       	out	0x3e, r29	; 62
    5734:	0f be       	out	0x3f, r0	; 63
    5736:	cd bf       	out	0x3d, r28	; 61
    5738:	99 8b       	std	Y+17, r25	; 0x11
    573a:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Iterator = 0 ;
    573c:	1f 86       	std	Y+15, r1	; 0x0f
    573e:	80 c0       	rjmp	.+256    	; 0x5840 <CLCD_voidSendString+0x11c>
	while(Copy_pu8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    5740:	8f 85       	ldd	r24, Y+15	; 0x0f
    5742:	28 2f       	mov	r18, r24
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	88 89       	ldd	r24, Y+16	; 0x10
    5748:	99 89       	ldd	r25, Y+17	; 0x11
    574a:	fc 01       	movw	r30, r24
    574c:	e2 0f       	add	r30, r18
    574e:	f3 1f       	adc	r31, r19
    5750:	80 81       	ld	r24, Z
    5752:	0e 94 4d 29 	call	0x529a	; 0x529a <CLCD_voidSendData>
		Local_u8Iterator ++ ;
    5756:	8f 85       	ldd	r24, Y+15	; 0x0f
    5758:	8f 5f       	subi	r24, 0xFF	; 255
    575a:	8f 87       	std	Y+15, r24	; 0x0f
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	a0 e0       	ldi	r26, 0x00	; 0
    5762:	b0 e4       	ldi	r27, 0x40	; 64
    5764:	8b 87       	std	Y+11, r24	; 0x0b
    5766:	9c 87       	std	Y+12, r25	; 0x0c
    5768:	ad 87       	std	Y+13, r26	; 0x0d
    576a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    576c:	6b 85       	ldd	r22, Y+11	; 0x0b
    576e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5770:	8d 85       	ldd	r24, Y+13	; 0x0d
    5772:	9e 85       	ldd	r25, Y+14	; 0x0e
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	4a ef       	ldi	r20, 0xFA	; 250
    577a:	54 e4       	ldi	r21, 0x44	; 68
    577c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	8f 83       	std	Y+7, r24	; 0x07
    5786:	98 87       	std	Y+8, r25	; 0x08
    5788:	a9 87       	std	Y+9, r26	; 0x09
    578a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    578c:	6f 81       	ldd	r22, Y+7	; 0x07
    578e:	78 85       	ldd	r23, Y+8	; 0x08
    5790:	89 85       	ldd	r24, Y+9	; 0x09
    5792:	9a 85       	ldd	r25, Y+10	; 0x0a
    5794:	20 e0       	ldi	r18, 0x00	; 0
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	40 e8       	ldi	r20, 0x80	; 128
    579a:	5f e3       	ldi	r21, 0x3F	; 63
    579c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    57a0:	88 23       	and	r24, r24
    57a2:	2c f4       	brge	.+10     	; 0x57ae <CLCD_voidSendString+0x8a>
		__ticks = 1;
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	9e 83       	std	Y+6, r25	; 0x06
    57aa:	8d 83       	std	Y+5, r24	; 0x05
    57ac:	3f c0       	rjmp	.+126    	; 0x582c <CLCD_voidSendString+0x108>
	else if (__tmp > 65535)
    57ae:	6f 81       	ldd	r22, Y+7	; 0x07
    57b0:	78 85       	ldd	r23, Y+8	; 0x08
    57b2:	89 85       	ldd	r24, Y+9	; 0x09
    57b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57b6:	20 e0       	ldi	r18, 0x00	; 0
    57b8:	3f ef       	ldi	r19, 0xFF	; 255
    57ba:	4f e7       	ldi	r20, 0x7F	; 127
    57bc:	57 e4       	ldi	r21, 0x47	; 71
    57be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    57c2:	18 16       	cp	r1, r24
    57c4:	4c f5       	brge	.+82     	; 0x5818 <CLCD_voidSendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    57c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    57ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    57cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	40 e2       	ldi	r20, 0x20	; 32
    57d4:	51 e4       	ldi	r21, 0x41	; 65
    57d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	bc 01       	movw	r22, r24
    57e0:	cd 01       	movw	r24, r26
    57e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	9e 83       	std	Y+6, r25	; 0x06
    57ec:	8d 83       	std	Y+5, r24	; 0x05
    57ee:	0f c0       	rjmp	.+30     	; 0x580e <CLCD_voidSendString+0xea>
    57f0:	88 ec       	ldi	r24, 0xC8	; 200
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	9c 83       	std	Y+4, r25	; 0x04
    57f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    57f8:	8b 81       	ldd	r24, Y+3	; 0x03
    57fa:	9c 81       	ldd	r25, Y+4	; 0x04
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	f1 f7       	brne	.-4      	; 0x57fc <CLCD_voidSendString+0xd8>
    5800:	9c 83       	std	Y+4, r25	; 0x04
    5802:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5804:	8d 81       	ldd	r24, Y+5	; 0x05
    5806:	9e 81       	ldd	r25, Y+6	; 0x06
    5808:	01 97       	sbiw	r24, 0x01	; 1
    580a:	9e 83       	std	Y+6, r25	; 0x06
    580c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    580e:	8d 81       	ldd	r24, Y+5	; 0x05
    5810:	9e 81       	ldd	r25, Y+6	; 0x06
    5812:	00 97       	sbiw	r24, 0x00	; 0
    5814:	69 f7       	brne	.-38     	; 0x57f0 <CLCD_voidSendString+0xcc>
    5816:	14 c0       	rjmp	.+40     	; 0x5840 <CLCD_voidSendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5818:	6f 81       	ldd	r22, Y+7	; 0x07
    581a:	78 85       	ldd	r23, Y+8	; 0x08
    581c:	89 85       	ldd	r24, Y+9	; 0x09
    581e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	9e 83       	std	Y+6, r25	; 0x06
    582a:	8d 83       	std	Y+5, r24	; 0x05
    582c:	8d 81       	ldd	r24, Y+5	; 0x05
    582e:	9e 81       	ldd	r25, Y+6	; 0x06
    5830:	9a 83       	std	Y+2, r25	; 0x02
    5832:	89 83       	std	Y+1, r24	; 0x01
    5834:	89 81       	ldd	r24, Y+1	; 0x01
    5836:	9a 81       	ldd	r25, Y+2	; 0x02
    5838:	01 97       	sbiw	r24, 0x01	; 1
    583a:	f1 f7       	brne	.-4      	; 0x5838 <CLCD_voidSendString+0x114>
    583c:	9a 83       	std	Y+2, r25	; 0x02
    583e:	89 83       	std	Y+1, r24	; 0x01

}
void CLCD_voidSendString	(u8 *Copy_pu8String )
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_pu8String[Local_u8Iterator] != '\0')
    5840:	8f 85       	ldd	r24, Y+15	; 0x0f
    5842:	28 2f       	mov	r18, r24
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	88 89       	ldd	r24, Y+16	; 0x10
    5848:	99 89       	ldd	r25, Y+17	; 0x11
    584a:	fc 01       	movw	r30, r24
    584c:	e2 0f       	add	r30, r18
    584e:	f3 1f       	adc	r31, r19
    5850:	80 81       	ld	r24, Z
    5852:	88 23       	and	r24, r24
    5854:	09 f0       	breq	.+2      	; 0x5858 <CLCD_voidSendString+0x134>
    5856:	74 cf       	rjmp	.-280    	; 0x5740 <CLCD_voidSendString+0x1c>
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
		Local_u8Iterator ++ ;
		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}
}
    5858:	61 96       	adiw	r28, 0x11	; 17
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	f8 94       	cli
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	0f be       	out	0x3f, r0	; 63
    5862:	cd bf       	out	0x3d, r28	; 61
    5864:	cf 91       	pop	r28
    5866:	df 91       	pop	r29
    5868:	08 95       	ret

0000586a <CLCD_voidSendu32Number>:

void CLCD_voidSendu32Number (u32 Copy_u32Number){
    586a:	df 93       	push	r29
    586c:	cf 93       	push	r28
    586e:	cd b7       	in	r28, 0x3d	; 61
    5870:	de b7       	in	r29, 0x3e	; 62
    5872:	66 97       	sbiw	r28, 0x16	; 22
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	f8 94       	cli
    5878:	de bf       	out	0x3e, r29	; 62
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	cd bf       	out	0x3d, r28	; 61
    587e:	6b 8b       	std	Y+19, r22	; 0x13
    5880:	7c 8b       	std	Y+20, r23	; 0x14
    5882:	8d 8b       	std	Y+21, r24	; 0x15
    5884:	9e 8b       	std	Y+22, r25	; 0x16
	if(Copy_u32Number!=0)
    5886:	8b 89       	ldd	r24, Y+19	; 0x13
    5888:	9c 89       	ldd	r25, Y+20	; 0x14
    588a:	ad 89       	ldd	r26, Y+21	; 0x15
    588c:	be 89       	ldd	r27, Y+22	; 0x16
    588e:	00 97       	sbiw	r24, 0x00	; 0
    5890:	a1 05       	cpc	r26, r1
    5892:	b1 05       	cpc	r27, r1
    5894:	09 f4       	brne	.+2      	; 0x5898 <CLCD_voidSendu32Number+0x2e>
    5896:	9e c0       	rjmp	.+316    	; 0x59d4 <CLCD_voidSendu32Number+0x16a>
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
    5898:	1b 82       	std	Y+3, r1	; 0x03
    589a:	1a 82       	std	Y+2, r1	; 0x02
    589c:	19 82       	std	Y+1, r1	; 0x01
    589e:	31 c0       	rjmp	.+98     	; 0x5902 <CLCD_voidSendu32Number+0x98>
		// filling array with number reversed in order
		while(Copy_u32Number!=0)
		{
			temp=Copy_u32Number%10;
    58a0:	8b 89       	ldd	r24, Y+19	; 0x13
    58a2:	9c 89       	ldd	r25, Y+20	; 0x14
    58a4:	ad 89       	ldd	r26, Y+21	; 0x15
    58a6:	be 89       	ldd	r27, Y+22	; 0x16
    58a8:	2a e0       	ldi	r18, 0x0A	; 10
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	40 e0       	ldi	r20, 0x00	; 0
    58ae:	50 e0       	ldi	r21, 0x00	; 0
    58b0:	bc 01       	movw	r22, r24
    58b2:	cd 01       	movw	r24, r26
    58b4:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__udivmodsi4>
    58b8:	dc 01       	movw	r26, r24
    58ba:	cb 01       	movw	r24, r22
    58bc:	8c 83       	std	Y+4, r24	; 0x04
    58be:	9d 83       	std	Y+5, r25	; 0x05
    58c0:	ae 83       	std	Y+6, r26	; 0x06
    58c2:	bf 83       	std	Y+7, r27	; 0x07
			arr[Local_u8Iterator]=temp;
    58c4:	8b 81       	ldd	r24, Y+3	; 0x03
    58c6:	28 2f       	mov	r18, r24
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	4c 81       	ldd	r20, Y+4	; 0x04
    58cc:	ce 01       	movw	r24, r28
    58ce:	08 96       	adiw	r24, 0x08	; 8
    58d0:	fc 01       	movw	r30, r24
    58d2:	e2 0f       	add	r30, r18
    58d4:	f3 1f       	adc	r31, r19
    58d6:	40 83       	st	Z, r20
			Local_u8Iterator++;
    58d8:	8b 81       	ldd	r24, Y+3	; 0x03
    58da:	8f 5f       	subi	r24, 0xFF	; 255
    58dc:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
    58de:	8b 89       	ldd	r24, Y+19	; 0x13
    58e0:	9c 89       	ldd	r25, Y+20	; 0x14
    58e2:	ad 89       	ldd	r26, Y+21	; 0x15
    58e4:	be 89       	ldd	r27, Y+22	; 0x16
    58e6:	2a e0       	ldi	r18, 0x0A	; 10
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	40 e0       	ldi	r20, 0x00	; 0
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	bc 01       	movw	r22, r24
    58f0:	cd 01       	movw	r24, r26
    58f2:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__udivmodsi4>
    58f6:	da 01       	movw	r26, r20
    58f8:	c9 01       	movw	r24, r18
    58fa:	8b 8b       	std	Y+19, r24	; 0x13
    58fc:	9c 8b       	std	Y+20, r25	; 0x14
    58fe:	ad 8b       	std	Y+21, r26	; 0x15
    5900:	be 8b       	std	Y+22, r27	; 0x16
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
		// filling array with number reversed in order
		while(Copy_u32Number!=0)
    5902:	8b 89       	ldd	r24, Y+19	; 0x13
    5904:	9c 89       	ldd	r25, Y+20	; 0x14
    5906:	ad 89       	ldd	r26, Y+21	; 0x15
    5908:	be 89       	ldd	r27, Y+22	; 0x16
    590a:	00 97       	sbiw	r24, 0x00	; 0
    590c:	a1 05       	cpc	r26, r1
    590e:	b1 05       	cpc	r27, r1
    5910:	39 f6       	brne	.-114    	; 0x58a0 <CLCD_voidSendu32Number+0x36>
			temp=Copy_u32Number%10;
			arr[Local_u8Iterator]=temp;
			Local_u8Iterator++;
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x'; // null char
    5912:	8b 81       	ldd	r24, Y+3	; 0x03
    5914:	28 2f       	mov	r18, r24
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	ce 01       	movw	r24, r28
    591a:	08 96       	adiw	r24, 0x08	; 8
    591c:	fc 01       	movw	r30, r24
    591e:	e2 0f       	add	r30, r18
    5920:	f3 1f       	adc	r31, r19
    5922:	88 e7       	ldi	r24, 0x78	; 120
    5924:	80 83       	st	Z, r24
		Local_u8Iterator--;
    5926:	8b 81       	ldd	r24, Y+3	; 0x03
    5928:	81 50       	subi	r24, 0x01	; 1
    592a:	8b 83       	std	Y+3, r24	; 0x03
    592c:	33 c0       	rjmp	.+102    	; 0x5994 <CLCD_voidSendu32Number+0x12a>
		// re arrange the array
		while(Itr1<Local_u8Iterator)
		{
			// swap
			temp=arr[Itr1];
    592e:	8a 81       	ldd	r24, Y+2	; 0x02
    5930:	28 2f       	mov	r18, r24
    5932:	30 e0       	ldi	r19, 0x00	; 0
    5934:	ce 01       	movw	r24, r28
    5936:	08 96       	adiw	r24, 0x08	; 8
    5938:	fc 01       	movw	r30, r24
    593a:	e2 0f       	add	r30, r18
    593c:	f3 1f       	adc	r31, r19
    593e:	80 81       	ld	r24, Z
    5940:	88 2f       	mov	r24, r24
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	a0 e0       	ldi	r26, 0x00	; 0
    5946:	b0 e0       	ldi	r27, 0x00	; 0
    5948:	8c 83       	std	Y+4, r24	; 0x04
    594a:	9d 83       	std	Y+5, r25	; 0x05
    594c:	ae 83       	std	Y+6, r26	; 0x06
    594e:	bf 83       	std	Y+7, r27	; 0x07
			arr[Itr1]=arr[Local_u8Iterator];
    5950:	8a 81       	ldd	r24, Y+2	; 0x02
    5952:	48 2f       	mov	r20, r24
    5954:	50 e0       	ldi	r21, 0x00	; 0
    5956:	8b 81       	ldd	r24, Y+3	; 0x03
    5958:	28 2f       	mov	r18, r24
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	ce 01       	movw	r24, r28
    595e:	08 96       	adiw	r24, 0x08	; 8
    5960:	fc 01       	movw	r30, r24
    5962:	e2 0f       	add	r30, r18
    5964:	f3 1f       	adc	r31, r19
    5966:	20 81       	ld	r18, Z
    5968:	ce 01       	movw	r24, r28
    596a:	08 96       	adiw	r24, 0x08	; 8
    596c:	fc 01       	movw	r30, r24
    596e:	e4 0f       	add	r30, r20
    5970:	f5 1f       	adc	r31, r21
    5972:	20 83       	st	Z, r18
			arr[Local_u8Iterator]=temp;
    5974:	8b 81       	ldd	r24, Y+3	; 0x03
    5976:	28 2f       	mov	r18, r24
    5978:	30 e0       	ldi	r19, 0x00	; 0
    597a:	4c 81       	ldd	r20, Y+4	; 0x04
    597c:	ce 01       	movw	r24, r28
    597e:	08 96       	adiw	r24, 0x08	; 8
    5980:	fc 01       	movw	r30, r24
    5982:	e2 0f       	add	r30, r18
    5984:	f3 1f       	adc	r31, r19
    5986:	40 83       	st	Z, r20
			Itr1++;
    5988:	8a 81       	ldd	r24, Y+2	; 0x02
    598a:	8f 5f       	subi	r24, 0xFF	; 255
    598c:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Iterator--;
    598e:	8b 81       	ldd	r24, Y+3	; 0x03
    5990:	81 50       	subi	r24, 0x01	; 1
    5992:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x'; // null char
		Local_u8Iterator--;
		// re arrange the array
		while(Itr1<Local_u8Iterator)
    5994:	9a 81       	ldd	r25, Y+2	; 0x02
    5996:	8b 81       	ldd	r24, Y+3	; 0x03
    5998:	98 17       	cp	r25, r24
    599a:	48 f2       	brcs	.-110    	; 0x592e <CLCD_voidSendu32Number+0xc4>
    599c:	0f c0       	rjmp	.+30     	; 0x59bc <CLCD_voidSendu32Number+0x152>
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
		{
			CLCD_voidSendData(arr[Itr2]+'0');
    599e:	89 81       	ldd	r24, Y+1	; 0x01
    59a0:	28 2f       	mov	r18, r24
    59a2:	30 e0       	ldi	r19, 0x00	; 0
    59a4:	ce 01       	movw	r24, r28
    59a6:	08 96       	adiw	r24, 0x08	; 8
    59a8:	fc 01       	movw	r30, r24
    59aa:	e2 0f       	add	r30, r18
    59ac:	f3 1f       	adc	r31, r19
    59ae:	80 81       	ld	r24, Z
    59b0:	80 5d       	subi	r24, 0xD0	; 208
    59b2:	0e 94 4d 29 	call	0x529a	; 0x529a <CLCD_voidSendData>
			Itr2++;
    59b6:	89 81       	ldd	r24, Y+1	; 0x01
    59b8:	8f 5f       	subi	r24, 0xFF	; 255
    59ba:	89 83       	std	Y+1, r24	; 0x01
			arr[Itr1]=arr[Local_u8Iterator];
			arr[Local_u8Iterator]=temp;
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
    59bc:	89 81       	ldd	r24, Y+1	; 0x01
    59be:	28 2f       	mov	r18, r24
    59c0:	30 e0       	ldi	r19, 0x00	; 0
    59c2:	ce 01       	movw	r24, r28
    59c4:	08 96       	adiw	r24, 0x08	; 8
    59c6:	fc 01       	movw	r30, r24
    59c8:	e2 0f       	add	r30, r18
    59ca:	f3 1f       	adc	r31, r19
    59cc:	80 81       	ld	r24, Z
    59ce:	88 37       	cpi	r24, 0x78	; 120
    59d0:	31 f7       	brne	.-52     	; 0x599e <CLCD_voidSendu32Number+0x134>
    59d2:	03 c0       	rjmp	.+6      	; 0x59da <CLCD_voidSendu32Number+0x170>
			CLCD_voidSendData(arr[Itr2]+'0');
			Itr2++;
		}
	}
	else{
		CLCD_voidSendData('0');
    59d4:	80 e3       	ldi	r24, 0x30	; 48
    59d6:	0e 94 4d 29 	call	0x529a	; 0x529a <CLCD_voidSendData>
	}
}
    59da:	66 96       	adiw	r28, 0x16	; 22
    59dc:	0f b6       	in	r0, 0x3f	; 63
    59de:	f8 94       	cli
    59e0:	de bf       	out	0x3e, r29	; 62
    59e2:	0f be       	out	0x3f, r0	; 63
    59e4:	cd bf       	out	0x3d, r28	; 61
    59e6:	cf 91       	pop	r28
    59e8:	df 91       	pop	r29
    59ea:	08 95       	ret

000059ec <main>:
#define F_CPU		8000000UL
#include <util/delay.h>



int main(void){
    59ec:	df 93       	push	r29
    59ee:	cf 93       	push	r28
    59f0:	cd b7       	in	r28, 0x3d	; 61
    59f2:	de b7       	in	r29, 0x3e	; 62
    59f4:	ff cf       	rjmp	.-2      	; 0x59f4 <main+0x8>

000059f6 <__udivmodhi4>:
    59f6:	aa 1b       	sub	r26, r26
    59f8:	bb 1b       	sub	r27, r27
    59fa:	51 e1       	ldi	r21, 0x11	; 17
    59fc:	07 c0       	rjmp	.+14     	; 0x5a0c <__udivmodhi4_ep>

000059fe <__udivmodhi4_loop>:
    59fe:	aa 1f       	adc	r26, r26
    5a00:	bb 1f       	adc	r27, r27
    5a02:	a6 17       	cp	r26, r22
    5a04:	b7 07       	cpc	r27, r23
    5a06:	10 f0       	brcs	.+4      	; 0x5a0c <__udivmodhi4_ep>
    5a08:	a6 1b       	sub	r26, r22
    5a0a:	b7 0b       	sbc	r27, r23

00005a0c <__udivmodhi4_ep>:
    5a0c:	88 1f       	adc	r24, r24
    5a0e:	99 1f       	adc	r25, r25
    5a10:	5a 95       	dec	r21
    5a12:	a9 f7       	brne	.-22     	; 0x59fe <__udivmodhi4_loop>
    5a14:	80 95       	com	r24
    5a16:	90 95       	com	r25
    5a18:	bc 01       	movw	r22, r24
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	08 95       	ret

00005a1e <__udivmodsi4>:
    5a1e:	a1 e2       	ldi	r26, 0x21	; 33
    5a20:	1a 2e       	mov	r1, r26
    5a22:	aa 1b       	sub	r26, r26
    5a24:	bb 1b       	sub	r27, r27
    5a26:	fd 01       	movw	r30, r26
    5a28:	0d c0       	rjmp	.+26     	; 0x5a44 <__udivmodsi4_ep>

00005a2a <__udivmodsi4_loop>:
    5a2a:	aa 1f       	adc	r26, r26
    5a2c:	bb 1f       	adc	r27, r27
    5a2e:	ee 1f       	adc	r30, r30
    5a30:	ff 1f       	adc	r31, r31
    5a32:	a2 17       	cp	r26, r18
    5a34:	b3 07       	cpc	r27, r19
    5a36:	e4 07       	cpc	r30, r20
    5a38:	f5 07       	cpc	r31, r21
    5a3a:	20 f0       	brcs	.+8      	; 0x5a44 <__udivmodsi4_ep>
    5a3c:	a2 1b       	sub	r26, r18
    5a3e:	b3 0b       	sbc	r27, r19
    5a40:	e4 0b       	sbc	r30, r20
    5a42:	f5 0b       	sbc	r31, r21

00005a44 <__udivmodsi4_ep>:
    5a44:	66 1f       	adc	r22, r22
    5a46:	77 1f       	adc	r23, r23
    5a48:	88 1f       	adc	r24, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	1a 94       	dec	r1
    5a4e:	69 f7       	brne	.-38     	; 0x5a2a <__udivmodsi4_loop>
    5a50:	60 95       	com	r22
    5a52:	70 95       	com	r23
    5a54:	80 95       	com	r24
    5a56:	90 95       	com	r25
    5a58:	9b 01       	movw	r18, r22
    5a5a:	ac 01       	movw	r20, r24
    5a5c:	bd 01       	movw	r22, r26
    5a5e:	cf 01       	movw	r24, r30
    5a60:	08 95       	ret

00005a62 <__prologue_saves__>:
    5a62:	2f 92       	push	r2
    5a64:	3f 92       	push	r3
    5a66:	4f 92       	push	r4
    5a68:	5f 92       	push	r5
    5a6a:	6f 92       	push	r6
    5a6c:	7f 92       	push	r7
    5a6e:	8f 92       	push	r8
    5a70:	9f 92       	push	r9
    5a72:	af 92       	push	r10
    5a74:	bf 92       	push	r11
    5a76:	cf 92       	push	r12
    5a78:	df 92       	push	r13
    5a7a:	ef 92       	push	r14
    5a7c:	ff 92       	push	r15
    5a7e:	0f 93       	push	r16
    5a80:	1f 93       	push	r17
    5a82:	cf 93       	push	r28
    5a84:	df 93       	push	r29
    5a86:	cd b7       	in	r28, 0x3d	; 61
    5a88:	de b7       	in	r29, 0x3e	; 62
    5a8a:	ca 1b       	sub	r28, r26
    5a8c:	db 0b       	sbc	r29, r27
    5a8e:	0f b6       	in	r0, 0x3f	; 63
    5a90:	f8 94       	cli
    5a92:	de bf       	out	0x3e, r29	; 62
    5a94:	0f be       	out	0x3f, r0	; 63
    5a96:	cd bf       	out	0x3d, r28	; 61
    5a98:	09 94       	ijmp

00005a9a <__epilogue_restores__>:
    5a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    5a9c:	39 88       	ldd	r3, Y+17	; 0x11
    5a9e:	48 88       	ldd	r4, Y+16	; 0x10
    5aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    5aac:	b9 84       	ldd	r11, Y+9	; 0x09
    5aae:	c8 84       	ldd	r12, Y+8	; 0x08
    5ab0:	df 80       	ldd	r13, Y+7	; 0x07
    5ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    5ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    5ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    5ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    5aba:	aa 81       	ldd	r26, Y+2	; 0x02
    5abc:	b9 81       	ldd	r27, Y+1	; 0x01
    5abe:	ce 0f       	add	r28, r30
    5ac0:	d1 1d       	adc	r29, r1
    5ac2:	0f b6       	in	r0, 0x3f	; 63
    5ac4:	f8 94       	cli
    5ac6:	de bf       	out	0x3e, r29	; 62
    5ac8:	0f be       	out	0x3f, r0	; 63
    5aca:	cd bf       	out	0x3d, r28	; 61
    5acc:	ed 01       	movw	r28, r26
    5ace:	08 95       	ret

00005ad0 <_exit>:
    5ad0:	f8 94       	cli

00005ad2 <__stop_program>:
    5ad2:	ff cf       	rjmp	.-2      	; 0x5ad2 <__stop_program>
